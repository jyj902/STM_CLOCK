
Open_Lcd_Clock_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e44  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006ff4  08006ff4  00016ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070cc  080070cc  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  080070cc  080070cc  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070d4  080070d4  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070d4  080070d4  000170d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070d8  080070d8  000170d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  080070dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000148  08007224  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08007224  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a80  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003378  00000000  00000000  00037bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001338  00000000  00000000  0003af70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011c8  00000000  00000000  0003c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002680a  00000000  00000000  0003d470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011625  00000000  00000000  00063c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2ce6  00000000  00000000  0007529f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00157f85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005414  00000000  00000000  00158000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000148 	.word	0x20000148
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006fdc 	.word	0x08006fdc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000014c 	.word	0x2000014c
 80001ec:	08006fdc 	.word	0x08006fdc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <HAL_GPIO_EXTI_Callback>:
extern struct clock_state current_state;
extern NVitemTypeDef default_nvitem;
extern uint8_t BT_buffer[10];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pin;
	if (GPIO_Pin == GPIO_PIN_13)
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d9c:	f040 8081 	bne.w	8000ea2 <HAL_GPIO_EXTI_Callback+0x116>
	{
		current_time = HAL_GetTick();
 8000da0:	f001 fcbe 	bl	8002720 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	4b41      	ldr	r3, [pc, #260]	; (8000eac <HAL_GPIO_EXTI_Callback+0x120>)
 8000da8:	601a      	str	r2, [r3, #0]
		time_interval = current_time - last_time;
 8000daa:	4b40      	ldr	r3, [pc, #256]	; (8000eac <HAL_GPIO_EXTI_Callback+0x120>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b40      	ldr	r3, [pc, #256]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x124>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x128>)
 8000db6:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8000db8:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <HAL_GPIO_EXTI_Callback+0x120>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a3c      	ldr	r2, [pc, #240]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x124>)
 8000dbe:	6013      	str	r3, [r2, #0]
		pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000dc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc4:	483c      	ldr	r0, [pc, #240]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000dc6:	f002 fefb 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	73fb      	strb	r3, [r7, #15]
		if (time_interval <= 2)
 8000dce:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x128>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d965      	bls.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x116>
		{
		}
		else
		{
			click[2].time = click[1].time;
 8000dd6:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000dd8:	889a      	ldrh	r2, [r3, #4]
 8000dda:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000ddc:	811a      	strh	r2, [r3, #8]
			click[2].level = click[1].level;
 8000dde:	4b37      	ldr	r3, [pc, #220]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000de0:	799a      	ldrb	r2, [r3, #6]
 8000de2:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000de4:	729a      	strb	r2, [r3, #10]
			click[1].time = click[0].time;
 8000de6:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000de8:	881a      	ldrh	r2, [r3, #0]
 8000dea:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000dec:	809a      	strh	r2, [r3, #4]
			click[1].level = click[0].level;
 8000dee:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000df0:	789a      	ldrb	r2, [r3, #2]
 8000df2:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000df4:	719a      	strb	r2, [r3, #6]
			click[0].time = time_interval;
 8000df6:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x128>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000dfe:	801a      	strh	r2, [r3, #0]
			click[0].level = pin;
 8000e00:	4a2e      	ldr	r2, [pc, #184]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	7093      	strb	r3, [r2, #2]
			if (click[0].level == GPIO_PIN_RESET && click[0].time >= LONG_CLICK_MIN) // long click
 8000e06:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000e08:	789b      	ldrb	r3, [r3, #2]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d109      	bne.n	8000e22 <HAL_GPIO_EXTI_Callback+0x96>
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	f240 52db 	movw	r2, #1499	; 0x5db
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d903      	bls.n	8000e22 <HAL_GPIO_EXTI_Callback+0x96>
			{
				user_btn = LONG;
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x134>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	e010      	b.n	8000e44 <HAL_GPIO_EXTI_Callback+0xb8>
			}
			else if (click[0].level == GPIO_PIN_RESET && click[0].time < LONG_CLICK_MIN && click[0].time > 75)
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000e24:	789b      	ldrb	r3, [r3, #2]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <HAL_GPIO_EXTI_Callback+0xb8>
 8000e2a:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d806      	bhi.n	8000e44 <HAL_GPIO_EXTI_Callback+0xb8>
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	2b4b      	cmp	r3, #75	; 0x4b
 8000e3c:	d902      	bls.n	8000e44 <HAL_GPIO_EXTI_Callback+0xb8>
			{
				user_btn = NORMAL;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x134>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
			}
			if (click[2].level == GPIO_PIN_RESET && click[1].level == GPIO_PIN_SET && click[0].level == GPIO_PIN_RESET)
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000e46:	7a9b      	ldrb	r3, [r3, #10]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d12a      	bne.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x116>
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000e4e:	799b      	ldrb	r3, [r3, #6]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d126      	bne.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x116>
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000e56:	789b      	ldrb	r3, [r3, #2]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d122      	bne.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x116>
			{
				volatile uint8_t i;
				for ( i = 0; i < 3; i++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73bb      	strb	r3, [r7, #14]
 8000e60:	e014      	b.n	8000e8c <HAL_GPIO_EXTI_Callback+0x100>
				{
					if ((click[i].time >= DOUBLE_CLICK_MIN) && (click[i].time <= DOUBLE_CLICK_MAX))
 8000e62:	7bbb      	ldrb	r3, [r7, #14]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000e6a:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000e6e:	2b31      	cmp	r3, #49	; 0x31
 8000e70:	d910      	bls.n	8000e94 <HAL_GPIO_EXTI_Callback+0x108>
 8000e72:	7bbb      	ldrb	r3, [r7, #14]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x130>)
 8000e7a:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000e7e:	2b96      	cmp	r3, #150	; 0x96
 8000e80:	d808      	bhi.n	8000e94 <HAL_GPIO_EXTI_Callback+0x108>
				for ( i = 0; i < 3; i++)
 8000e82:	7bbb      	ldrb	r3, [r7, #14]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	73bb      	strb	r3, [r7, #14]
 8000e8c:	7bbb      	ldrb	r3, [r7, #14]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d9e6      	bls.n	8000e62 <HAL_GPIO_EXTI_Callback+0xd6>
					{}
					else break;
				}
				if (i == 3)
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d102      	bne.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x116>
				{
					user_btn = DOUBLE;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x134>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000184 	.word	0x20000184
 8000eb0:	200001dc 	.word	0x200001dc
 8000eb4:	2000018c 	.word	0x2000018c
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	20000178 	.word	0x20000178
 8000ec0:	20000000 	.word	0x20000000

08000ec4 <ADC_key>:
int ADC_key()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	key_value=HAL_ADC_GetValue(&hadc1);
 8000ec8:	4821      	ldr	r0, [pc, #132]	; (8000f50 <ADC_key+0x8c>)
 8000eca:	f001 fd61 	bl	8002990 <HAL_ADC_GetValue>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <ADC_key+0x90>)
 8000ed4:	801a      	strh	r2, [r3, #0]
	if(key_value<100) key_w = UP_btn;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <ADC_key+0x90>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	2b63      	cmp	r3, #99	; 0x63
 8000edc:	d803      	bhi.n	8000ee6 <ADC_key+0x22>
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <ADC_key+0x94>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e02f      	b.n	8000f46 <ADC_key+0x82>
	else if((key_value<1000)&&(key_value>500)) key_w = DOWN_btn;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <ADC_key+0x90>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eee:	d208      	bcs.n	8000f02 <ADC_key+0x3e>
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <ADC_key+0x90>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ef8:	d903      	bls.n	8000f02 <ADC_key+0x3e>
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <ADC_key+0x94>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e021      	b.n	8000f46 <ADC_key+0x82>
	else if((key_value<2200)&&(key_value>1500)) key_w = LEFT_btn;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <ADC_key+0x90>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	f640 0297 	movw	r2, #2199	; 0x897
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d809      	bhi.n	8000f22 <ADC_key+0x5e>
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <ADC_key+0x90>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d903      	bls.n	8000f22 <ADC_key+0x5e>
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <ADC_key+0x94>)
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e011      	b.n	8000f46 <ADC_key+0x82>
	else if((key_value<3200)&&(key_value>2500)) key_w = RIGHT_btn;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <ADC_key+0x90>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8000f2a:	d209      	bcs.n	8000f40 <ADC_key+0x7c>
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <ADC_key+0x90>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d903      	bls.n	8000f40 <ADC_key+0x7c>
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <ADC_key+0x94>)
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	e002      	b.n	8000f46 <ADC_key+0x82>
	else key_w =-1;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <ADC_key+0x94>)
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	701a      	strb	r2, [r3, #0]
	return key_w;
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <ADC_key+0x94>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000194 	.word	0x20000194
 8000f54:	20000188 	.word	0x20000188
 8000f58:	200001e1 	.word	0x200001e1

08000f5c <Folling_ADC>:

void Folling_ADC()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
	if(click[0].level ==GPIO_PIN_RESET)
 8000f62:	4b2a      	ldr	r3, [pc, #168]	; (800100c <Folling_ADC+0xb0>)
 8000f64:	789b      	ldrb	r3, [r3, #2]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 8082 	bne.w	8001070 <Folling_ADC+0x114>
	{
		if((user_btn == NORMAL)||(BT_buffer[0]==BT_ONE))
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <Folling_ADC+0xb4>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <Folling_ADC+0x20>
 8000f74:	4b27      	ldr	r3, [pc, #156]	; (8001014 <Folling_ADC+0xb8>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d108      	bne.n	8000f8e <Folling_ADC+0x32>
		{
			if(current_state.mode == NORMAL_STATE)
 8000f7c:	4b26      	ldr	r3, [pc, #152]	; (8001018 <Folling_ADC+0xbc>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d104      	bne.n	8000f8e <Folling_ADC+0x32>
			{
				Clear();
 8000f84:	f000 fc14 	bl	80017b0 <Clear>
				current_state.mode = TIME_SETTING;
 8000f88:	4b23      	ldr	r3, [pc, #140]	; (8001018 <Folling_ADC+0xbc>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
			}
		}
		if((user_btn == DOUBLE)||(BT_buffer[0]==BT_DOUBLE))
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <Folling_ADC+0xb4>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d003      	beq.n	8000f9e <Folling_ADC+0x42>
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <Folling_ADC+0xb8>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d154      	bne.n	8001048 <Folling_ADC+0xec>
		{
			noblink();
 8000f9e:	f000 fbe7 	bl	8001770 <noblink>
			if(current_state.mode == NORMAL_STATE)
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <Folling_ADC+0xbc>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d105      	bne.n	8000fb6 <Folling_ADC+0x5a>
			{
				Clear();
 8000faa:	f000 fc01 	bl	80017b0 <Clear>
				current_state.mode = ALARM_TIME_SETTING;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <Folling_ADC+0xbc>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	e048      	b.n	8001048 <Folling_ADC+0xec>
			}
			else if(current_state.mode == TIME_SETTING)
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <Folling_ADC+0xbc>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d114      	bne.n	8000fe8 <Folling_ADC+0x8c>
			{
				Clear();
 8000fbe:	f000 fbf7 	bl	80017b0 <Clear>
				current_state.mode = NORMAL_STATE;
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <Folling_ADC+0xbc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
				ctime = stime;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <Folling_ADC+0xc0>)
 8000fca:	4a15      	ldr	r2, [pc, #84]	; (8001020 <Folling_ADC+0xc4>)
 8000fcc:	8811      	ldrh	r1, [r2, #0]
 8000fce:	7892      	ldrb	r2, [r2, #2]
 8000fd0:	8019      	strh	r1, [r3, #0]
 8000fd2:	709a      	strb	r2, [r3, #2]
				default_nvitem.setting_time = stime;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <Folling_ADC+0xc8>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <Folling_ADC+0xc4>)
 8000fd8:	3304      	adds	r3, #4
 8000fda:	8811      	ldrh	r1, [r2, #0]
 8000fdc:	7892      	ldrb	r2, [r2, #2]
 8000fde:	8019      	strh	r1, [r3, #0]
 8000fe0:	709a      	strb	r2, [r3, #2]
				update_nvitems();
 8000fe2:	f000 fab7 	bl	8001554 <update_nvitems>
 8000fe6:	e02f      	b.n	8001048 <Folling_ADC+0xec>
			}
			else if(current_state.mode == ALARM_TIME_SETTING)
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <Folling_ADC+0xbc>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d11d      	bne.n	800102c <Folling_ADC+0xd0>
			{
				Clear();
 8000ff0:	f000 fbde 	bl	80017b0 <Clear>
				current_state.mode = NORMAL_STATE;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <Folling_ADC+0xbc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
				default_nvitem.alarm_time = atime;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <Folling_ADC+0xc8>)
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <Folling_ADC+0xcc>)
 8000ffe:	3307      	adds	r3, #7
 8001000:	8811      	ldrh	r1, [r2, #0]
 8001002:	7892      	ldrb	r2, [r2, #2]
 8001004:	8019      	strh	r1, [r3, #0]
 8001006:	709a      	strb	r2, [r3, #2]
 8001008:	e01e      	b.n	8001048 <Folling_ADC+0xec>
 800100a:	bf00      	nop
 800100c:	20000178 	.word	0x20000178
 8001010:	20000000 	.word	0x20000000
 8001014:	20000390 	.word	0x20000390
 8001018:	20000314 	.word	0x20000314
 800101c:	20000348 	.word	0x20000348
 8001020:	20000360 	.word	0x20000360
 8001024:	20000004 	.word	0x20000004
 8001028:	20000364 	.word	0x20000364
			}
			else if(current_state.mode == MUSIC_SELECT)
 800102c:	4b9e      	ldr	r3, [pc, #632]	; (80012a8 <Folling_ADC+0x34c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b03      	cmp	r3, #3
 8001032:	d109      	bne.n	8001048 <Folling_ADC+0xec>
			{
				Clear();
 8001034:	f000 fbbc 	bl	80017b0 <Clear>
				current_state.mode = NORMAL_STATE;
 8001038:	4b9b      	ldr	r3, [pc, #620]	; (80012a8 <Folling_ADC+0x34c>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
				default_nvitem.alarm_music_num = x;
 800103e:	4b9b      	ldr	r3, [pc, #620]	; (80012ac <Folling_ADC+0x350>)
 8001040:	f993 2000 	ldrsb.w	r2, [r3]
 8001044:	4b9a      	ldr	r3, [pc, #616]	; (80012b0 <Folling_ADC+0x354>)
 8001046:	729a      	strb	r2, [r3, #10]
			}
		}
		if((user_btn == LONG)||(BT_buffer[0]==BT_LONG))
 8001048:	4b9a      	ldr	r3, [pc, #616]	; (80012b4 <Folling_ADC+0x358>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d003      	beq.n	8001058 <Folling_ADC+0xfc>
 8001050:	4b99      	ldr	r3, [pc, #612]	; (80012b8 <Folling_ADC+0x35c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b07      	cmp	r3, #7
 8001056:	d108      	bne.n	800106a <Folling_ADC+0x10e>
		{
			Clear();
 8001058:	f000 fbaa 	bl	80017b0 <Clear>
			if(current_state.mode == NORMAL_STATE) current_state.mode = MUSIC_SELECT;
 800105c:	4b92      	ldr	r3, [pc, #584]	; (80012a8 <Folling_ADC+0x34c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <Folling_ADC+0x10e>
 8001064:	4b90      	ldr	r3, [pc, #576]	; (80012a8 <Folling_ADC+0x34c>)
 8001066:	2203      	movs	r2, #3
 8001068:	701a      	strb	r2, [r3, #0]
		}
		user_btn=-1;
 800106a:	4b92      	ldr	r3, [pc, #584]	; (80012b4 <Folling_ADC+0x358>)
 800106c:	22ff      	movs	r2, #255	; 0xff
 800106e:	701a      	strb	r2, [r3, #0]

	}
	uint8_t get_key;
	old_key = get_key;
 8001070:	4a92      	ldr	r2, [pc, #584]	; (80012bc <Folling_ADC+0x360>)
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	7013      	strb	r3, [r2, #0]
	get_key = ADC_key();
 8001076:	f7ff ff25 	bl	8000ec4 <ADC_key>
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	if(get_key != old_key)
 800107e:	4b8f      	ldr	r3, [pc, #572]	; (80012bc <Folling_ADC+0x360>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	79fa      	ldrb	r2, [r7, #7]
 8001084:	429a      	cmp	r2, r3
 8001086:	f000 822c 	beq.w	80014e2 <Folling_ADC+0x586>
	{
		if(current_state.mode == TIME_SETTING)
 800108a:	4b87      	ldr	r3, [pc, #540]	; (80012a8 <Folling_ADC+0x34c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	f040 80ed 	bne.w	800126e <Folling_ADC+0x312>
		{
			if((get_key == UP_btn)||(BT_buffer[0]==BT_UP))
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <Folling_ADC+0x146>
 800109a:	4b87      	ldr	r3, [pc, #540]	; (80012b8 <Folling_ADC+0x35c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d15e      	bne.n	8001160 <Folling_ADC+0x204>
			{
				if((y== 0)||(y==1)) stime.hours +=12;
 80010a2:	4b87      	ldr	r3, [pc, #540]	; (80012c0 <Folling_ADC+0x364>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <Folling_ADC+0x156>
 80010aa:	4b85      	ldr	r3, [pc, #532]	; (80012c0 <Folling_ADC+0x364>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d108      	bne.n	80010c4 <Folling_ADC+0x168>
 80010b2:	4b84      	ldr	r3, [pc, #528]	; (80012c4 <Folling_ADC+0x368>)
 80010b4:	f993 3000 	ldrsb.w	r3, [r3]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	330c      	adds	r3, #12
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	b25a      	sxtb	r2, r3
 80010c0:	4b80      	ldr	r3, [pc, #512]	; (80012c4 <Folling_ADC+0x368>)
 80010c2:	701a      	strb	r2, [r3, #0]
				if(y==3) stime.hours +=10;
 80010c4:	4b7e      	ldr	r3, [pc, #504]	; (80012c0 <Folling_ADC+0x364>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d108      	bne.n	80010de <Folling_ADC+0x182>
 80010cc:	4b7d      	ldr	r3, [pc, #500]	; (80012c4 <Folling_ADC+0x368>)
 80010ce:	f993 3000 	ldrsb.w	r3, [r3]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	330a      	adds	r3, #10
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	b25a      	sxtb	r2, r3
 80010da:	4b7a      	ldr	r3, [pc, #488]	; (80012c4 <Folling_ADC+0x368>)
 80010dc:	701a      	strb	r2, [r3, #0]
				if(y==4) stime.hours +=1;
 80010de:	4b78      	ldr	r3, [pc, #480]	; (80012c0 <Folling_ADC+0x364>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d108      	bne.n	80010f8 <Folling_ADC+0x19c>
 80010e6:	4b77      	ldr	r3, [pc, #476]	; (80012c4 <Folling_ADC+0x368>)
 80010e8:	f993 3000 	ldrsb.w	r3, [r3]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	b25a      	sxtb	r2, r3
 80010f4:	4b73      	ldr	r3, [pc, #460]	; (80012c4 <Folling_ADC+0x368>)
 80010f6:	701a      	strb	r2, [r3, #0]
				if(y==6) stime.minutes +=10;
 80010f8:	4b71      	ldr	r3, [pc, #452]	; (80012c0 <Folling_ADC+0x364>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b06      	cmp	r3, #6
 80010fe:	d108      	bne.n	8001112 <Folling_ADC+0x1b6>
 8001100:	4b70      	ldr	r3, [pc, #448]	; (80012c4 <Folling_ADC+0x368>)
 8001102:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	330a      	adds	r3, #10
 800110a:	b2db      	uxtb	r3, r3
 800110c:	b25a      	sxtb	r2, r3
 800110e:	4b6d      	ldr	r3, [pc, #436]	; (80012c4 <Folling_ADC+0x368>)
 8001110:	705a      	strb	r2, [r3, #1]
				if(y==7) stime.minutes +=1;
 8001112:	4b6b      	ldr	r3, [pc, #428]	; (80012c0 <Folling_ADC+0x364>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b07      	cmp	r3, #7
 8001118:	d108      	bne.n	800112c <Folling_ADC+0x1d0>
 800111a:	4b6a      	ldr	r3, [pc, #424]	; (80012c4 <Folling_ADC+0x368>)
 800111c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	3301      	adds	r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	b25a      	sxtb	r2, r3
 8001128:	4b66      	ldr	r3, [pc, #408]	; (80012c4 <Folling_ADC+0x368>)
 800112a:	705a      	strb	r2, [r3, #1]
				if(y==9) stime.seconds +=10;
 800112c:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <Folling_ADC+0x364>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b09      	cmp	r3, #9
 8001132:	d108      	bne.n	8001146 <Folling_ADC+0x1ea>
 8001134:	4b63      	ldr	r3, [pc, #396]	; (80012c4 <Folling_ADC+0x368>)
 8001136:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	330a      	adds	r3, #10
 800113e:	b2db      	uxtb	r3, r3
 8001140:	b25a      	sxtb	r2, r3
 8001142:	4b60      	ldr	r3, [pc, #384]	; (80012c4 <Folling_ADC+0x368>)
 8001144:	709a      	strb	r2, [r3, #2]
				if(y==10) stime.seconds +=1;
 8001146:	4b5e      	ldr	r3, [pc, #376]	; (80012c0 <Folling_ADC+0x364>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b0a      	cmp	r3, #10
 800114c:	d108      	bne.n	8001160 <Folling_ADC+0x204>
 800114e:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <Folling_ADC+0x368>)
 8001150:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	3301      	adds	r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	b25a      	sxtb	r2, r3
 800115c:	4b59      	ldr	r3, [pc, #356]	; (80012c4 <Folling_ADC+0x368>)
 800115e:	709a      	strb	r2, [r3, #2]
			}
			if((get_key == DOWN_btn)||(BT_buffer[0]==BT_DOWN))
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d003      	beq.n	800116e <Folling_ADC+0x212>
 8001166:	4b54      	ldr	r3, [pc, #336]	; (80012b8 <Folling_ADC+0x35c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b04      	cmp	r3, #4
 800116c:	d15e      	bne.n	800122c <Folling_ADC+0x2d0>
			{
				if((y== 0)||(y==1)) stime.hours -=12;
 800116e:	4b54      	ldr	r3, [pc, #336]	; (80012c0 <Folling_ADC+0x364>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <Folling_ADC+0x222>
 8001176:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <Folling_ADC+0x364>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d108      	bne.n	8001190 <Folling_ADC+0x234>
 800117e:	4b51      	ldr	r3, [pc, #324]	; (80012c4 <Folling_ADC+0x368>)
 8001180:	f993 3000 	ldrsb.w	r3, [r3]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	3b0c      	subs	r3, #12
 8001188:	b2db      	uxtb	r3, r3
 800118a:	b25a      	sxtb	r2, r3
 800118c:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <Folling_ADC+0x368>)
 800118e:	701a      	strb	r2, [r3, #0]
				if(y==3) stime.hours -=10;
 8001190:	4b4b      	ldr	r3, [pc, #300]	; (80012c0 <Folling_ADC+0x364>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d108      	bne.n	80011aa <Folling_ADC+0x24e>
 8001198:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <Folling_ADC+0x368>)
 800119a:	f993 3000 	ldrsb.w	r3, [r3]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3b0a      	subs	r3, #10
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <Folling_ADC+0x368>)
 80011a8:	701a      	strb	r2, [r3, #0]
				if(y==4) stime.hours -=1;
 80011aa:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <Folling_ADC+0x364>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d108      	bne.n	80011c4 <Folling_ADC+0x268>
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <Folling_ADC+0x368>)
 80011b4:	f993 3000 	ldrsb.w	r3, [r3]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	3b01      	subs	r3, #1
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	b25a      	sxtb	r2, r3
 80011c0:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <Folling_ADC+0x368>)
 80011c2:	701a      	strb	r2, [r3, #0]
				if(y==6) stime.minutes -=10;
 80011c4:	4b3e      	ldr	r3, [pc, #248]	; (80012c0 <Folling_ADC+0x364>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b06      	cmp	r3, #6
 80011ca:	d108      	bne.n	80011de <Folling_ADC+0x282>
 80011cc:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <Folling_ADC+0x368>)
 80011ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	3b0a      	subs	r3, #10
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	b25a      	sxtb	r2, r3
 80011da:	4b3a      	ldr	r3, [pc, #232]	; (80012c4 <Folling_ADC+0x368>)
 80011dc:	705a      	strb	r2, [r3, #1]
				if(y==7) stime.minutes -=1;
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <Folling_ADC+0x364>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b07      	cmp	r3, #7
 80011e4:	d108      	bne.n	80011f8 <Folling_ADC+0x29c>
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <Folling_ADC+0x368>)
 80011e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	3b01      	subs	r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	b25a      	sxtb	r2, r3
 80011f4:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <Folling_ADC+0x368>)
 80011f6:	705a      	strb	r2, [r3, #1]
				if(y==9) stime.seconds -=10;
 80011f8:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <Folling_ADC+0x364>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b09      	cmp	r3, #9
 80011fe:	d108      	bne.n	8001212 <Folling_ADC+0x2b6>
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <Folling_ADC+0x368>)
 8001202:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	3b0a      	subs	r3, #10
 800120a:	b2db      	uxtb	r3, r3
 800120c:	b25a      	sxtb	r2, r3
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <Folling_ADC+0x368>)
 8001210:	709a      	strb	r2, [r3, #2]
				if(y==10) stime.seconds -=1;
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <Folling_ADC+0x364>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b0a      	cmp	r3, #10
 8001218:	d108      	bne.n	800122c <Folling_ADC+0x2d0>
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <Folling_ADC+0x368>)
 800121c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	3b01      	subs	r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	b25a      	sxtb	r2, r3
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <Folling_ADC+0x368>)
 800122a:	709a      	strb	r2, [r3, #2]
			}
			if((get_key == LEFT_btn)||(BT_buffer[0]==BT_LEFT))
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d003      	beq.n	800123a <Folling_ADC+0x2de>
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <Folling_ADC+0x35c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d105      	bne.n	8001246 <Folling_ADC+0x2ea>
			{
				if((--y)<0) y = 15;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <Folling_ADC+0x364>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	3b01      	subs	r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <Folling_ADC+0x364>)
 8001244:	701a      	strb	r2, [r3, #0]
			}
			if((get_key == RIGHT_btn)||(BT_buffer[0]==BT_RIGHT))
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b03      	cmp	r3, #3
 800124a:	d003      	beq.n	8001254 <Folling_ADC+0x2f8>
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <Folling_ADC+0x35c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d10c      	bne.n	800126e <Folling_ADC+0x312>
			{
				if((++y)>15) y = 0;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <Folling_ADC+0x364>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <Folling_ADC+0x364>)
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <Folling_ADC+0x364>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d902      	bls.n	800126e <Folling_ADC+0x312>
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <Folling_ADC+0x364>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]

			}
		}
		if(current_state.mode == ALARM_TIME_SETTING)
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <Folling_ADC+0x34c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b02      	cmp	r3, #2
 8001274:	f040 8101 	bne.w	800147a <Folling_ADC+0x51e>
		{
			if((get_key == UP_btn)||(BT_buffer[0]==BT_UP))
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <Folling_ADC+0x32a>
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <Folling_ADC+0x35c>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b03      	cmp	r3, #3
 8001284:	d172      	bne.n	800136c <Folling_ADC+0x410>
			{
				if((y== 0)||(y==1)) atime.hours +=12;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <Folling_ADC+0x364>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <Folling_ADC+0x33a>
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <Folling_ADC+0x364>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d11c      	bne.n	80012d0 <Folling_ADC+0x374>
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <Folling_ADC+0x36c>)
 8001298:	f993 3000 	ldrsb.w	r3, [r3]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	330c      	adds	r3, #12
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	b25a      	sxtb	r2, r3
 80012a4:	e012      	b.n	80012cc <Folling_ADC+0x370>
 80012a6:	bf00      	nop
 80012a8:	20000314 	.word	0x20000314
 80012ac:	20000174 	.word	0x20000174
 80012b0:	20000004 	.word	0x20000004
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000390 	.word	0x20000390
 80012bc:	20000190 	.word	0x20000190
 80012c0:	200001e0 	.word	0x200001e0
 80012c4:	20000360 	.word	0x20000360
 80012c8:	20000364 	.word	0x20000364
 80012cc:	4b8a      	ldr	r3, [pc, #552]	; (80014f8 <Folling_ADC+0x59c>)
 80012ce:	701a      	strb	r2, [r3, #0]
				if(y==3) atime.hours +=10;
 80012d0:	4b8a      	ldr	r3, [pc, #552]	; (80014fc <Folling_ADC+0x5a0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d108      	bne.n	80012ea <Folling_ADC+0x38e>
 80012d8:	4b87      	ldr	r3, [pc, #540]	; (80014f8 <Folling_ADC+0x59c>)
 80012da:	f993 3000 	ldrsb.w	r3, [r3]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	330a      	adds	r3, #10
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	b25a      	sxtb	r2, r3
 80012e6:	4b84      	ldr	r3, [pc, #528]	; (80014f8 <Folling_ADC+0x59c>)
 80012e8:	701a      	strb	r2, [r3, #0]
				if(y==4) atime.hours +=1;
 80012ea:	4b84      	ldr	r3, [pc, #528]	; (80014fc <Folling_ADC+0x5a0>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d108      	bne.n	8001304 <Folling_ADC+0x3a8>
 80012f2:	4b81      	ldr	r3, [pc, #516]	; (80014f8 <Folling_ADC+0x59c>)
 80012f4:	f993 3000 	ldrsb.w	r3, [r3]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	4b7d      	ldr	r3, [pc, #500]	; (80014f8 <Folling_ADC+0x59c>)
 8001302:	701a      	strb	r2, [r3, #0]
				if(y==6) atime.minutes +=10;
 8001304:	4b7d      	ldr	r3, [pc, #500]	; (80014fc <Folling_ADC+0x5a0>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b06      	cmp	r3, #6
 800130a:	d108      	bne.n	800131e <Folling_ADC+0x3c2>
 800130c:	4b7a      	ldr	r3, [pc, #488]	; (80014f8 <Folling_ADC+0x59c>)
 800130e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	330a      	adds	r3, #10
 8001316:	b2db      	uxtb	r3, r3
 8001318:	b25a      	sxtb	r2, r3
 800131a:	4b77      	ldr	r3, [pc, #476]	; (80014f8 <Folling_ADC+0x59c>)
 800131c:	705a      	strb	r2, [r3, #1]
				if(y==7) atime.minutes +=1;
 800131e:	4b77      	ldr	r3, [pc, #476]	; (80014fc <Folling_ADC+0x5a0>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b07      	cmp	r3, #7
 8001324:	d108      	bne.n	8001338 <Folling_ADC+0x3dc>
 8001326:	4b74      	ldr	r3, [pc, #464]	; (80014f8 <Folling_ADC+0x59c>)
 8001328:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	3301      	adds	r3, #1
 8001330:	b2db      	uxtb	r3, r3
 8001332:	b25a      	sxtb	r2, r3
 8001334:	4b70      	ldr	r3, [pc, #448]	; (80014f8 <Folling_ADC+0x59c>)
 8001336:	705a      	strb	r2, [r3, #1]
				if(y==9) atime.seconds +=10;
 8001338:	4b70      	ldr	r3, [pc, #448]	; (80014fc <Folling_ADC+0x5a0>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b09      	cmp	r3, #9
 800133e:	d108      	bne.n	8001352 <Folling_ADC+0x3f6>
 8001340:	4b6d      	ldr	r3, [pc, #436]	; (80014f8 <Folling_ADC+0x59c>)
 8001342:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	330a      	adds	r3, #10
 800134a:	b2db      	uxtb	r3, r3
 800134c:	b25a      	sxtb	r2, r3
 800134e:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <Folling_ADC+0x59c>)
 8001350:	709a      	strb	r2, [r3, #2]
				if(y==10) atime.seconds +=1;
 8001352:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <Folling_ADC+0x5a0>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b0a      	cmp	r3, #10
 8001358:	d108      	bne.n	800136c <Folling_ADC+0x410>
 800135a:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <Folling_ADC+0x59c>)
 800135c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	3301      	adds	r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b25a      	sxtb	r2, r3
 8001368:	4b63      	ldr	r3, [pc, #396]	; (80014f8 <Folling_ADC+0x59c>)
 800136a:	709a      	strb	r2, [r3, #2]
			}
			if((get_key == DOWN_btn)||(BT_buffer[0]==BT_DOWN))
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d003      	beq.n	800137a <Folling_ADC+0x41e>
 8001372:	4b63      	ldr	r3, [pc, #396]	; (8001500 <Folling_ADC+0x5a4>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b04      	cmp	r3, #4
 8001378:	d15e      	bne.n	8001438 <Folling_ADC+0x4dc>
			{
				if((y== 0)||(y==1)) atime.hours -=12;
 800137a:	4b60      	ldr	r3, [pc, #384]	; (80014fc <Folling_ADC+0x5a0>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <Folling_ADC+0x42e>
 8001382:	4b5e      	ldr	r3, [pc, #376]	; (80014fc <Folling_ADC+0x5a0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d108      	bne.n	800139c <Folling_ADC+0x440>
 800138a:	4b5b      	ldr	r3, [pc, #364]	; (80014f8 <Folling_ADC+0x59c>)
 800138c:	f993 3000 	ldrsb.w	r3, [r3]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	3b0c      	subs	r3, #12
 8001394:	b2db      	uxtb	r3, r3
 8001396:	b25a      	sxtb	r2, r3
 8001398:	4b57      	ldr	r3, [pc, #348]	; (80014f8 <Folling_ADC+0x59c>)
 800139a:	701a      	strb	r2, [r3, #0]
				if(y==3) atime.hours -=10;
 800139c:	4b57      	ldr	r3, [pc, #348]	; (80014fc <Folling_ADC+0x5a0>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d108      	bne.n	80013b6 <Folling_ADC+0x45a>
 80013a4:	4b54      	ldr	r3, [pc, #336]	; (80014f8 <Folling_ADC+0x59c>)
 80013a6:	f993 3000 	ldrsb.w	r3, [r3]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	3b0a      	subs	r3, #10
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	b25a      	sxtb	r2, r3
 80013b2:	4b51      	ldr	r3, [pc, #324]	; (80014f8 <Folling_ADC+0x59c>)
 80013b4:	701a      	strb	r2, [r3, #0]
				if(y==4) atime.hours -=1;
 80013b6:	4b51      	ldr	r3, [pc, #324]	; (80014fc <Folling_ADC+0x5a0>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d108      	bne.n	80013d0 <Folling_ADC+0x474>
 80013be:	4b4e      	ldr	r3, [pc, #312]	; (80014f8 <Folling_ADC+0x59c>)
 80013c0:	f993 3000 	ldrsb.w	r3, [r3]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	3b01      	subs	r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	b25a      	sxtb	r2, r3
 80013cc:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <Folling_ADC+0x59c>)
 80013ce:	701a      	strb	r2, [r3, #0]
				if(y==6) atime.minutes -=10;
 80013d0:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <Folling_ADC+0x5a0>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b06      	cmp	r3, #6
 80013d6:	d108      	bne.n	80013ea <Folling_ADC+0x48e>
 80013d8:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <Folling_ADC+0x59c>)
 80013da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	3b0a      	subs	r3, #10
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	b25a      	sxtb	r2, r3
 80013e6:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <Folling_ADC+0x59c>)
 80013e8:	705a      	strb	r2, [r3, #1]
				if(y==7) atime.minutes -=1;
 80013ea:	4b44      	ldr	r3, [pc, #272]	; (80014fc <Folling_ADC+0x5a0>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	d108      	bne.n	8001404 <Folling_ADC+0x4a8>
 80013f2:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <Folling_ADC+0x59c>)
 80013f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	b25a      	sxtb	r2, r3
 8001400:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <Folling_ADC+0x59c>)
 8001402:	705a      	strb	r2, [r3, #1]
				if(y==9) atime.seconds -=10;
 8001404:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <Folling_ADC+0x5a0>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b09      	cmp	r3, #9
 800140a:	d108      	bne.n	800141e <Folling_ADC+0x4c2>
 800140c:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <Folling_ADC+0x59c>)
 800140e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	3b0a      	subs	r3, #10
 8001416:	b2db      	uxtb	r3, r3
 8001418:	b25a      	sxtb	r2, r3
 800141a:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <Folling_ADC+0x59c>)
 800141c:	709a      	strb	r2, [r3, #2]
				if(y==10) atime.seconds -=1;
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <Folling_ADC+0x5a0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b0a      	cmp	r3, #10
 8001424:	d108      	bne.n	8001438 <Folling_ADC+0x4dc>
 8001426:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <Folling_ADC+0x59c>)
 8001428:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3b01      	subs	r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	b25a      	sxtb	r2, r3
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <Folling_ADC+0x59c>)
 8001436:	709a      	strb	r2, [r3, #2]
			}
			if((get_key == LEFT_btn)||(BT_buffer[0]==BT_LEFT))
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d003      	beq.n	8001446 <Folling_ADC+0x4ea>
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <Folling_ADC+0x5a4>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d105      	bne.n	8001452 <Folling_ADC+0x4f6>
			{
				if((--y)<0) y = 15;
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <Folling_ADC+0x5a0>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	3b01      	subs	r3, #1
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <Folling_ADC+0x5a0>)
 8001450:	701a      	strb	r2, [r3, #0]
			}
			if((get_key == RIGHT_btn)||(BT_buffer[0]==BT_RIGHT))
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d003      	beq.n	8001460 <Folling_ADC+0x504>
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <Folling_ADC+0x5a4>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d10c      	bne.n	800147a <Folling_ADC+0x51e>
			{
				if((++y)>15) y = 0;
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <Folling_ADC+0x5a0>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <Folling_ADC+0x5a0>)
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <Folling_ADC+0x5a0>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d902      	bls.n	800147a <Folling_ADC+0x51e>
 8001474:	4b21      	ldr	r3, [pc, #132]	; (80014fc <Folling_ADC+0x5a0>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]

			}
		}
		if(current_state.mode == MUSIC_SELECT)
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <Folling_ADC+0x5a8>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d12f      	bne.n	80014e2 <Folling_ADC+0x586>
		{
			if((get_key == UP_btn)||(BT_buffer[0]==BT_UP))
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <Folling_ADC+0x534>
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <Folling_ADC+0x5a4>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d110      	bne.n	80014b2 <Folling_ADC+0x556>
			{
				if(--x<0) x=0;
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <Folling_ADC+0x5ac>)
 8001492:	f993 3000 	ldrsb.w	r3, [r3]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	3b01      	subs	r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	b25a      	sxtb	r2, r3
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <Folling_ADC+0x5ac>)
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <Folling_ADC+0x5ac>)
 80014a4:	f993 3000 	ldrsb.w	r3, [r3]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da02      	bge.n	80014b2 <Folling_ADC+0x556>
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <Folling_ADC+0x5ac>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
			}
			if((get_key == DOWN_btn)||(BT_buffer[0]==BT_DOWN))
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d003      	beq.n	80014c0 <Folling_ADC+0x564>
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <Folling_ADC+0x5a4>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d110      	bne.n	80014e2 <Folling_ADC+0x586>
			{
				if(++x>2) x=2;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <Folling_ADC+0x5ac>)
 80014c2:	f993 3000 	ldrsb.w	r3, [r3]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	3301      	adds	r3, #1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <Folling_ADC+0x5ac>)
 80014d0:	701a      	strb	r2, [r3, #0]
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <Folling_ADC+0x5ac>)
 80014d4:	f993 3000 	ldrsb.w	r3, [r3]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	dd02      	ble.n	80014e2 <Folling_ADC+0x586>
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <Folling_ADC+0x5ac>)
 80014de:	2202      	movs	r2, #2
 80014e0:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	BT_buffer[0] =0;
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <Folling_ADC+0x5a4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start(&hadc1);
 80014e8:	4808      	ldr	r0, [pc, #32]	; (800150c <Folling_ADC+0x5b0>)
 80014ea:	f001 f98b 	bl	8002804 <HAL_ADC_Start>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000364 	.word	0x20000364
 80014fc:	200001e0 	.word	0x200001e0
 8001500:	20000390 	.word	0x20000390
 8001504:	20000314 	.word	0x20000314
 8001508:	20000174 	.word	0x20000174
 800150c:	20000194 	.word	0x20000194

08001510 <load_nvitems>:
  {0,0,0},
  {0,0,0},
  0
};
void load_nvitems()
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
	uint32_t load_addr = ADDR_FLASH_SECTOR_8;/*
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <load_nvitems+0x3c>)
 8001518:	607b      	str	r3, [r7, #4]
	default_nvitem.setting_time.hours = (*(uint8_t*)load_addr+4);
	default_nvitem.setting_time.minutes = (*(uint8_t*)load_addr+5);
	default_nvitem.setting_time.seconds = (*(uint8_t*)load_addr+6);*/
	ctime.hours = (*((uint8_t*)load_addr+4));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3304      	adds	r3, #4
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b25a      	sxtb	r2, r3
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <load_nvitems+0x40>)
 8001524:	701a      	strb	r2, [r3, #0]
	ctime.minutes = (*((uint8_t*)load_addr+5));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3305      	adds	r3, #5
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b25a      	sxtb	r2, r3
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <load_nvitems+0x40>)
 8001530:	705a      	strb	r2, [r3, #1]
	ctime.seconds = (*((uint8_t*)load_addr+6))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3306      	adds	r3, #6
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b25a      	sxtb	r2, r3
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <load_nvitems+0x40>)
 800153c:	709a      	strb	r2, [r3, #2]
			;
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	08080000 	.word	0x08080000
 8001550:	20000348 	.word	0x20000348

08001554 <update_nvitems>:
HAL_StatusTypeDef update_nvitems(void)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b08f      	sub	sp, #60	; 0x3c
 8001558:	af00      	add	r7, sp, #0
	uint32_t FirstSector,NbOfSectors,SECTORError;
	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_StatusTypeDef error= HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    uint32_t Address,i;
    uint64_t Data;
    uint8_t *ptr;

	HAL_FLASH_Unlock();
 8001560:	f001 fed4 	bl	800330c <HAL_FLASH_Unlock>
	FirstSector = FLASH_SECTOR_8;
 8001564:	2308      	movs	r3, #8
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
	NbOfSectors = 1;
 8001568:	2301      	movs	r3, #1
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800156c:	2300      	movs	r3, #0
 800156e:	603b      	str	r3, [r7, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001570:	2302      	movs	r3, #2
 8001572:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector        = FirstSector;
 8001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001576:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	60fb      	str	r3, [r7, #12]

	error = HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 800157c:	f107 0214 	add.w	r2, r7, #20
 8001580:	463b      	mov	r3, r7
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f002 f831 	bl	80035ec <HAL_FLASHEx_Erase>
 800158a:	4603      	mov	r3, r0
 800158c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if(error != HAL_OK)
 8001590:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <update_nvitems+0x4a>
	{
		return error;
 8001598:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800159c:	e02b      	b.n	80015f6 <update_nvitems+0xa2>
	}

	ptr = (uint8_t*)&default_nvitem;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <update_nvitems+0xac>)
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24

	for(i=0;i<sizeof(NVitemTypeDef);i++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
 80015a6:	e021      	b.n	80015ec <update_nvitems+0x98>
	{
		Address = (uint8_t*)nv_items+i;
 80015a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015aa:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80015ae:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80015b2:	623b      	str	r3, [r7, #32]
		Data = *((uint8_t*)ptr+ i);
 80015b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f04f 0400 	mov.w	r4, #0
 80015c2:	e9c7 3406 	strd	r3, r4, [r7, #24]
		error = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,Address,Data);
 80015c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015ca:	6a39      	ldr	r1, [r7, #32]
 80015cc:	2000      	movs	r0, #0
 80015ce:	f001 fe49 	bl	8003264 <HAL_FLASH_Program>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if(error != HAL_OK)
 80015d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <update_nvitems+0x92>
		{
			return error;
 80015e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015e4:	e007      	b.n	80015f6 <update_nvitems+0xa2>
	for(i=0;i<sizeof(NVitemTypeDef);i++)
 80015e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e8:	3301      	adds	r3, #1
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
 80015ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ee:	2b0b      	cmp	r3, #11
 80015f0:	d9da      	bls.n	80015a8 <update_nvitems+0x54>
		}
	}

	HAL_FLASH_Lock();
 80015f2:	f001 fead 	bl	8003350 <HAL_FLASH_Lock>
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	373c      	adds	r7, #60	; 0x3c
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000004 	.word	0x20000004

08001604 <LCD_SendInternal>:

I2C_HandleTypeDef hi2c1;
uint8_t _displaycontrol;
uint8_t _numlines;

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af02      	add	r7, sp, #8
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
 800160e:	460b      	mov	r3, r1
 8001610:	71bb      	strb	r3, [r7, #6]
 8001612:	4613      	mov	r3, r2
 8001614:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	b299      	uxth	r1, r3
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	2201      	movs	r2, #1
 8001620:	4821      	ldr	r0, [pc, #132]	; (80016a8 <LCD_SendInternal+0xa4>)
 8001622:	f002 fd33 	bl	800408c <HAL_I2C_IsDeviceReady>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d000      	beq.n	8001632 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8001630:	e7f1      	b.n	8001616 <LCD_SendInternal+0x12>
            break;
 8001632:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8001634:	79bb      	ldrb	r3, [r7, #6]
 8001636:	f023 030f 	bic.w	r3, r3, #15
 800163a:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8001642:	7bba      	ldrb	r2, [r7, #14]
 8001644:	797b      	ldrb	r3, [r7, #5]
 8001646:	4313      	orrs	r3, r2
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f043 030c 	orr.w	r3, r3, #12
 800164e:	b2db      	uxtb	r3, r3
 8001650:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8001652:	7bba      	ldrb	r2, [r7, #14]
 8001654:	797b      	ldrb	r3, [r7, #5]
 8001656:	4313      	orrs	r3, r2
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f043 0308 	orr.w	r3, r3, #8
 800165e:	b2db      	uxtb	r3, r3
 8001660:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8001662:	7b7a      	ldrb	r2, [r7, #13]
 8001664:	797b      	ldrb	r3, [r7, #5]
 8001666:	4313      	orrs	r3, r2
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f043 030c 	orr.w	r3, r3, #12
 800166e:	b2db      	uxtb	r3, r3
 8001670:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 8001672:	7b7a      	ldrb	r2, [r7, #13]
 8001674:	797b      	ldrb	r3, [r7, #5]
 8001676:	4313      	orrs	r3, r2
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	b2db      	uxtb	r3, r3
 8001680:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	b299      	uxth	r1, r3
 8001686:	f107 0208 	add.w	r2, r7, #8
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2304      	movs	r3, #4
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <LCD_SendInternal+0xa4>)
 8001694:	f002 fbfc 	bl	8003e90 <HAL_I2C_Master_Transmit>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
    //HAL_Delay(LCD_DELAY_MS);
    return res;
 800169c:	7bfb      	ldrb	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200001e8 	.word	0x200001e8

080016ac <LCD_SendCommand>:
void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	460a      	mov	r2, r1
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	4613      	mov	r3, r2
 80016ba:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 80016bc:	79b9      	ldrb	r1, [r7, #6]
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2200      	movs	r2, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff9e 	bl	8001604 <LCD_SendInternal>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 80016e0:	79b9      	ldrb	r1, [r7, #6]
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff8c 	bl	8001604 <LCD_SendInternal>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2130      	movs	r1, #48	; 0x30
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ffd2 	bl	80016ac <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2102      	movs	r1, #2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ffcd 	bl	80016ac <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	210c      	movs	r1, #12
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ffc8 	bl	80016ac <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2101      	movs	r1, #1
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ffc3 	bl	80016ac <LCD_SendCommand>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	6039      	str	r1, [r7, #0]
 8001738:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 800173a:	e009      	b.n	8001750 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ffc3 	bl	80016d0 <LCD_SendData>
        str++;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f1      	bne.n	800173c <LCD_SendString+0xe>
    }
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <blink>:
void blink() {
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b00001101);
 8001764:	210d      	movs	r1, #13
 8001766:	204e      	movs	r0, #78	; 0x4e
 8001768:	f7ff ffa0 	bl	80016ac <LCD_SendCommand>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <noblink>:
void noblink() {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b00001100);
 8001774:	210c      	movs	r1, #12
 8001776:	204e      	movs	r0, #78	; 0x4e
 8001778:	f7ff ff98 	bl	80016ac <LCD_SendCommand>
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <setCursor>:
void loop() {
    //HAL_Delay(100);
}
//Command cursor
void setCursor(uint8_t col, uint8_t row)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	460a      	mov	r2, r1
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	4613      	mov	r3, r2
 800178e:	71bb      	strb	r3, [r7, #6]
	LCD_SendCommand(LCD_ADDR ,0x80+((col*0x40)+row));
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	019b      	lsls	r3, r3, #6
 8001794:	b2da      	uxtb	r2, r3
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	4413      	add	r3, r2
 800179a:	b2db      	uxtb	r3, r3
 800179c:	3b80      	subs	r3, #128	; 0x80
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4619      	mov	r1, r3
 80017a2:	204e      	movs	r0, #78	; 0x4e
 80017a4:	f7ff ff82 	bl	80016ac <LCD_SendCommand>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <Clear>:
void Clear()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b01);
 80017b4:	2101      	movs	r1, #1
 80017b6:	204e      	movs	r0, #78	; 0x4e
 80017b8:	f7ff ff78 	bl	80016ac <LCD_SendCommand>
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <init_all>:
  int8_t seconds;
}TimeTypeDef;
extern  TimeTypeDef ctime;  // current time
extern  TimeTypeDef atime;  // alarm time
void init_all()
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	  HAL_I2C_Init(&hi2c1);
 80017c4:	480e      	ldr	r0, [pc, #56]	; (8001800 <init_all+0x40>)
 80017c6:	f002 fa2b 	bl	8003c20 <HAL_I2C_Init>
	  LCD_Init(LCD_ADDR);
 80017ca:	204e      	movs	r0, #78	; 0x4e
 80017cc:	f7ff ff92 	bl	80016f4 <LCD_Init>
	  HAL_TIM_Base_Init(&htim3);
 80017d0:	480c      	ldr	r0, [pc, #48]	; (8001804 <init_all+0x44>)
 80017d2:	f003 fc49 	bl	8005068 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start_IT(&htim3);
 80017d6:	480b      	ldr	r0, [pc, #44]	; (8001804 <init_all+0x44>)
 80017d8:	f003 fc71 	bl	80050be <HAL_TIM_Base_Start_IT>
	  HAL_ADC_Init(&hadc1);
 80017dc:	480a      	ldr	r0, [pc, #40]	; (8001808 <init_all+0x48>)
 80017de:	f000 ffcd 	bl	800277c <HAL_ADC_Init>
	  HAL_ADC_Start(&hadc1);
 80017e2:	4809      	ldr	r0, [pc, #36]	; (8001808 <init_all+0x48>)
 80017e4:	f001 f80e 	bl	8002804 <HAL_ADC_Start>
	  HAL_UART_Receive_IT(&huart3, &rx_d, 1);
 80017e8:	2201      	movs	r2, #1
 80017ea:	4908      	ldr	r1, [pc, #32]	; (800180c <init_all+0x4c>)
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <init_all+0x50>)
 80017ee:	f004 f966 	bl	8005abe <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart2, BT_buffer, 1);
 80017f2:	2201      	movs	r2, #1
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <init_all+0x54>)
 80017f6:	4808      	ldr	r0, [pc, #32]	; (8001818 <init_all+0x58>)
 80017f8:	f004 f961 	bl	8005abe <HAL_UART_Receive_IT>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200001e8 	.word	0x200001e8
 8001804:	20000280 	.word	0x20000280
 8001808:	20000194 	.word	0x20000194
 800180c:	20000168 	.word	0x20000168
 8001810:	20000240 	.word	0x20000240
 8001814:	20000390 	.word	0x20000390
 8001818:	200002d4 	.word	0x200002d4

0800181c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001820:	f000 ff18 	bl	8002654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001824:	f000 f832 	bl	800188c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001828:	f000 f9ee 	bl	8001c08 <MX_GPIO_Init>
  MX_ADC1_Init();
 800182c:	f000 f88e 	bl	800194c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001830:	f000 f908 	bl	8001a44 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001834:	f000 f946 	bl	8001ac4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001838:	f000 f992 	bl	8001b60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800183c:	f000 f9ba 	bl	8001bb4 <MX_USART3_UART_Init>
  MX_DAC_Init();
 8001840:	f000 f8d6 	bl	80019f0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  init_all();
 8001844:	f7ff ffbc 	bl	80017c0 <init_all>
  load_nvitems();
 8001848:	f7ff fe62 	bl	8001510 <load_nvitems>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((ctime.hours == atime.hours)&&(ctime.minutes == atime.minutes)&&(ctime.seconds == atime.seconds))
 800184c:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <main+0x68>)
 800184e:	f993 2000 	ldrsb.w	r2, [r3]
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <main+0x6c>)
 8001854:	f993 3000 	ldrsb.w	r3, [r3]
 8001858:	429a      	cmp	r2, r3
 800185a:	d1f7      	bne.n	800184c <main+0x30>
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <main+0x68>)
 800185e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <main+0x6c>)
 8001864:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001868:	429a      	cmp	r2, r3
 800186a:	d1ef      	bne.n	800184c <main+0x30>
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <main+0x68>)
 800186e:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <main+0x6c>)
 8001874:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001878:	429a      	cmp	r2, r3
 800187a:	d1e7      	bne.n	800184c <main+0x30>
	  {
		  music_0();
 800187c:	f000 fa2c 	bl	8001cd8 <music_0>
	  if((ctime.hours == atime.hours)&&(ctime.minutes == atime.minutes)&&(ctime.seconds == atime.seconds))
 8001880:	e7e4      	b.n	800184c <main+0x30>
 8001882:	bf00      	nop
 8001884:	20000348 	.word	0x20000348
 8001888:	20000364 	.word	0x20000364

0800188c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b094      	sub	sp, #80	; 0x50
 8001890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001892:	f107 0320 	add.w	r3, r7, #32
 8001896:	2230      	movs	r2, #48	; 0x30
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f004 ff80 	bl	80067a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <SystemClock_Config+0xb8>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	4a22      	ldr	r2, [pc, #136]	; (8001944 <SystemClock_Config+0xb8>)
 80018ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018be:	6413      	str	r3, [r2, #64]	; 0x40
 80018c0:	4b20      	ldr	r3, [pc, #128]	; (8001944 <SystemClock_Config+0xb8>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <SystemClock_Config+0xbc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018d8:	4a1b      	ldr	r2, [pc, #108]	; (8001948 <SystemClock_Config+0xbc>)
 80018da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <SystemClock_Config+0xbc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ec:	2302      	movs	r3, #2
 80018ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f4:	2310      	movs	r3, #16
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	4618      	mov	r0, r3
 8001902:	f002 ff75 	bl	80047f0 <HAL_RCC_OscConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800190c:	f000 f9de 	bl	8001ccc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001910:	230f      	movs	r3, #15
 8001912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f003 f9d0 	bl	8004cd0 <HAL_RCC_ClockConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001936:	f000 f9c9 	bl	8001ccc <Error_Handler>
  }
}
 800193a:	bf00      	nop
 800193c:	3750      	adds	r7, #80	; 0x50
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000

0800194c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001952:	463b      	mov	r3, r7
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <MX_ADC1_Init+0x98>)
 8001960:	4a21      	ldr	r2, [pc, #132]	; (80019e8 <MX_ADC1_Init+0x9c>)
 8001962:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <MX_ADC1_Init+0x98>)
 8001966:	2200      	movs	r2, #0
 8001968:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <MX_ADC1_Init+0x98>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001970:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <MX_ADC1_Init+0x98>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <MX_ADC1_Init+0x98>)
 8001978:	2200      	movs	r2, #0
 800197a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <MX_ADC1_Init+0x98>)
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <MX_ADC1_Init+0x98>)
 8001986:	2200      	movs	r2, #0
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <MX_ADC1_Init+0x98>)
 800198c:	4a17      	ldr	r2, [pc, #92]	; (80019ec <MX_ADC1_Init+0xa0>)
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <MX_ADC1_Init+0x98>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <MX_ADC1_Init+0x98>)
 8001998:	2201      	movs	r2, #1
 800199a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_ADC1_Init+0x98>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_ADC1_Init+0x98>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019aa:	480e      	ldr	r0, [pc, #56]	; (80019e4 <MX_ADC1_Init+0x98>)
 80019ac:	f000 fee6 	bl	800277c <HAL_ADC_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80019b6:	f000 f989 	bl	8001ccc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80019ba:	2303      	movs	r3, #3
 80019bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c6:	463b      	mov	r3, r7
 80019c8:	4619      	mov	r1, r3
 80019ca:	4806      	ldr	r0, [pc, #24]	; (80019e4 <MX_ADC1_Init+0x98>)
 80019cc:	f000 ffee 	bl	80029ac <HAL_ADC_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80019d6:	f000 f979 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000194 	.word	0x20000194
 80019e8:	40012000 	.word	0x40012000
 80019ec:	0f000001 	.word	0x0f000001

080019f0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80019f6:	463b      	mov	r3, r7
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_DAC_Init+0x4c>)
 8001a00:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <MX_DAC_Init+0x50>)
 8001a02:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <MX_DAC_Init+0x4c>)
 8001a06:	f001 fb10 	bl	800302a <HAL_DAC_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001a10:	f000 f95c 	bl	8001ccc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <MX_DAC_Init+0x4c>)
 8001a24:	f001 fb89 	bl	800313a <HAL_DAC_ConfigChannel>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001a2e:	f000 f94d 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200002c0 	.word	0x200002c0
 8001a40:	40007400 	.word	0x40007400

08001a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <MX_I2C1_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a50:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <MX_I2C1_Init+0x7c>)
 8001a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a82:	f002 f8cd 	bl	8003c20 <HAL_I2C_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a8c:	f000 f91e 	bl	8001ccc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a90:	2100      	movs	r1, #0
 8001a92:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a94:	f002 fe31 	bl	80046fa <HAL_I2CEx_ConfigAnalogFilter>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001a9e:	f000 f915 	bl	8001ccc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001aa6:	f002 fe64 	bl	8004772 <HAL_I2CEx_ConfigDigitalFilter>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001ab0:	f000 f90c 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200001e8 	.word	0x200001e8
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	000186a0 	.word	0x000186a0

08001ac4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <MX_TIM3_Init+0x94>)
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <MX_TIM3_Init+0x98>)
 8001ae4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <MX_TIM3_Init+0x94>)
 8001ae8:	220f      	movs	r2, #15
 8001aea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_TIM3_Init+0x94>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <MX_TIM3_Init+0x94>)
 8001af4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001af8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_TIM3_Init+0x94>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_TIM3_Init+0x94>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b06:	4814      	ldr	r0, [pc, #80]	; (8001b58 <MX_TIM3_Init+0x94>)
 8001b08:	f003 faae 	bl	8005068 <HAL_TIM_Base_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001b12:	f000 f8db 	bl	8001ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	4619      	mov	r1, r3
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_TIM3_Init+0x94>)
 8001b24:	f003 fbf7 	bl	8005316 <HAL_TIM_ConfigClockSource>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b2e:	f000 f8cd 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <MX_TIM3_Init+0x94>)
 8001b40:	f003 fe02 	bl	8005748 <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001b4a:	f000 f8bf 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000280 	.word	0x20000280
 8001b5c:	40000400 	.word	0x40000400

08001b60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <MX_USART2_UART_Init+0x50>)
 8001b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b98:	f003 fe66 	bl	8005868 <HAL_UART_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ba2:	f000 f893 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200002d4 	.word	0x200002d4
 8001bb0:	40004400 	.word	0x40004400

08001bb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <MX_USART3_UART_Init+0x50>)
 8001bbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bec:	f003 fe3c 	bl	8005868 <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001bf6:	f000 f869 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000240 	.word	0x20000240
 8001c04:	40004800 	.word	0x40004800

08001c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <MX_GPIO_Init+0xb8>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <MX_GPIO_Init+0xb8>)
 8001c28:	f043 0304 	orr.w	r3, r3, #4
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <MX_GPIO_Init+0xb8>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <MX_GPIO_Init+0xb8>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <MX_GPIO_Init+0xb8>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_GPIO_Init+0xb8>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <MX_GPIO_Init+0xb8>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <MX_GPIO_Init+0xb8>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MX_GPIO_Init+0xb8>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <MX_GPIO_Init+0xb8>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <MX_GPIO_Init+0xb8>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <MX_GPIO_Init+0xb8>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <MX_GPIO_Init+0xbc>)
 8001c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <MX_GPIO_Init+0xc0>)
 8001ca4:	f001 fde2 	bl	800386c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	2028      	movs	r0, #40	; 0x28
 8001cae:	f001 f986 	bl	8002fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cb2:	2028      	movs	r0, #40	; 0x28
 8001cb4:	f001 f99f 	bl	8002ff6 <HAL_NVIC_EnableIRQ>

}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	10310000 	.word	0x10310000
 8001cc8:	40020800 	.word	0x40020800

08001ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <Error_Handler+0x6>
 8001cd4:	0000      	movs	r0, r0
	...

08001cd8 <music_0>:
	8,8,8,8,8,8,4,8,8,8,8,8,8,4,8,8,8,8,8,8,4,8,8,8,8,4,4,8,8,8,8,8,8,4,8,8,8,8,8,8,4,8,
	8,8,8,8,8,1,
	8,8,8,8,4,4,4,8,4,4,8,8,8,8,4,8,8,4,8,4,8,8,4,8,4,1
};
void music_0()
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
    for (int i = 0; i < (sizeof(melody1)/sizeof(int)); i++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	e03c      	b.n	8001d5e <music_0+0x86>
    {
      int Durations = noteDurations1[i];
 8001ce4:	4a24      	ldr	r2, [pc, #144]	; (8001d78 <music_0+0xa0>)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	60bb      	str	r3, [r7, #8]
      int pauseBetweenNotes = Durations *2.7 ;
 8001cee:	68b8      	ldr	r0, [r7, #8]
 8001cf0:	f7fe fc28 	bl	8000544 <__aeabi_i2d>
 8001cf4:	a31e      	add	r3, pc, #120	; (adr r3, 8001d70 <music_0+0x98>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fc8d 	bl	8000618 <__aeabi_dmul>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	460c      	mov	r4, r1
 8001d02:	4618      	mov	r0, r3
 8001d04:	4621      	mov	r1, r4
 8001d06:	f7fe fe99 	bl	8000a3c <__aeabi_d2iz>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	607b      	str	r3, [r7, #4]
  	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, melody1[i]);
 8001d0e:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <music_0+0xa4>)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	2208      	movs	r2, #8
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4819      	ldr	r0, [pc, #100]	; (8001d80 <music_0+0xa8>)
 8001d1c:	f001 fa5a 	bl	80031d4 <HAL_DAC_SetValue>
  	  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001d20:	2100      	movs	r1, #0
 8001d22:	4817      	ldr	r0, [pc, #92]	; (8001d80 <music_0+0xa8>)
 8001d24:	f001 f9a3 	bl	800306e <HAL_DAC_Start>
  	  HAL_Delay(Durations*50);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2232      	movs	r2, #50	; 0x32
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 fd01 	bl	8002738 <HAL_Delay>
  	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 0);
 8001d36:	2300      	movs	r3, #0
 8001d38:	2208      	movs	r2, #8
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4810      	ldr	r0, [pc, #64]	; (8001d80 <music_0+0xa8>)
 8001d3e:	f001 fa49 	bl	80031d4 <HAL_DAC_SetValue>
  	  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001d42:	2100      	movs	r1, #0
 8001d44:	480e      	ldr	r0, [pc, #56]	; (8001d80 <music_0+0xa8>)
 8001d46:	f001 f992 	bl	800306e <HAL_DAC_Start>
  	  HAL_Delay(pauseBetweenNotes*50);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2232      	movs	r2, #50	; 0x32
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fcf0 	bl	8002738 <HAL_Delay>
    for (int i = 0; i < (sizeof(melody1)/sizeof(int)); i++)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b18      	cmp	r3, #24
 8001d62:	d9bf      	bls.n	8001ce4 <music_0+0xc>
   }

}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	f3af 8000 	nop.w
 8001d70:	9999999a 	.word	0x9999999a
 8001d74:	40059999 	.word	0x40059999
 8001d78:	20000074 	.word	0x20000074
 8001d7c:	20000010 	.word	0x20000010
 8001d80:	200002c0 	.word	0x200002c0

08001d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <HAL_MspInit+0x4c>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_MspInit+0x4c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_MspInit+0x4c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4a08      	ldr	r2, [pc, #32]	; (8001dd0 <HAL_MspInit+0x4c>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_MspInit+0x4c>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <HAL_ADC_MspInit+0x7c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d127      	bne.n	8001e46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_ADC_MspInit+0x80>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <HAL_ADC_MspInit+0x80>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_ADC_MspInit+0x80>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <HAL_ADC_MspInit+0x80>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_ADC_MspInit+0x80>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <HAL_ADC_MspInit+0x80>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e2e:	2308      	movs	r3, #8
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e32:	2303      	movs	r3, #3
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4805      	ldr	r0, [pc, #20]	; (8001e58 <HAL_ADC_MspInit+0x84>)
 8001e42:	f001 fd13 	bl	800386c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e46:	bf00      	nop
 8001e48:	3728      	adds	r7, #40	; 0x28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40012000 	.word	0x40012000
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40020000 	.word	0x40020000

08001e5c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <HAL_DAC_MspInit+0x7c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d127      	bne.n	8001ece <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_DAC_MspInit+0x80>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a15      	ldr	r2, [pc, #84]	; (8001edc <HAL_DAC_MspInit+0x80>)
 8001e88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_DAC_MspInit+0x80>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_DAC_MspInit+0x80>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_DAC_MspInit+0x80>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_DAC_MspInit+0x80>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eb6:	2310      	movs	r3, #16
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <HAL_DAC_MspInit+0x84>)
 8001eca:	f001 fccf 	bl	800386c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	; 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40007400 	.word	0x40007400
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_I2C_MspInit+0x84>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12c      	bne.n	8001f60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f34:	2304      	movs	r3, #4
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480c      	ldr	r0, [pc, #48]	; (8001f70 <HAL_I2C_MspInit+0x8c>)
 8001f40:	f001 fc94 	bl	800386c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f52:	6413      	str	r3, [r2, #64]	; 0x40
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40005400 	.word	0x40005400
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020400 	.word	0x40020400

08001f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <HAL_TIM_Base_MspInit+0x48>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d115      	bne.n	8001fb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_TIM_Base_MspInit+0x4c>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <HAL_TIM_Base_MspInit+0x4c>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6413      	str	r3, [r2, #64]	; 0x40
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_TIM_Base_MspInit+0x4c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	201d      	movs	r0, #29
 8001fa8:	f001 f809 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fac:	201d      	movs	r0, #29
 8001fae:	f001 f822 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40023800 	.word	0x40023800

08001fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	; 0x30
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 031c 	add.w	r3, r7, #28
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a3a      	ldr	r2, [pc, #232]	; (80020cc <HAL_UART_MspInit+0x108>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d134      	bne.n	8002050 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_UART_MspInit+0x10c>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a38      	ldr	r2, [pc, #224]	; (80020d0 <HAL_UART_MspInit+0x10c>)
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <HAL_UART_MspInit+0x10c>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <HAL_UART_MspInit+0x10c>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a31      	ldr	r2, [pc, #196]	; (80020d0 <HAL_UART_MspInit+0x10c>)
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_UART_MspInit+0x10c>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800201e:	2360      	movs	r3, #96	; 0x60
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800202e:	2307      	movs	r3, #7
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4619      	mov	r1, r3
 8002038:	4826      	ldr	r0, [pc, #152]	; (80020d4 <HAL_UART_MspInit+0x110>)
 800203a:	f001 fc17 	bl	800386c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	2026      	movs	r0, #38	; 0x26
 8002044:	f000 ffbb 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002048:	2026      	movs	r0, #38	; 0x26
 800204a:	f000 ffd4 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800204e:	e039      	b.n	80020c4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a20      	ldr	r2, [pc, #128]	; (80020d8 <HAL_UART_MspInit+0x114>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d134      	bne.n	80020c4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_UART_MspInit+0x10c>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <HAL_UART_MspInit+0x10c>)
 8002064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_UART_MspInit+0x10c>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_UART_MspInit+0x10c>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <HAL_UART_MspInit+0x10c>)
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_UART_MspInit+0x10c>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002092:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a0:	2303      	movs	r3, #3
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020a4:	2307      	movs	r3, #7
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a8:	f107 031c 	add.w	r3, r7, #28
 80020ac:	4619      	mov	r1, r3
 80020ae:	4809      	ldr	r0, [pc, #36]	; (80020d4 <HAL_UART_MspInit+0x110>)
 80020b0:	f001 fbdc 	bl	800386c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	2027      	movs	r0, #39	; 0x27
 80020ba:	f000 ff80 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020be:	2027      	movs	r0, #39	; 0x27
 80020c0:	f000 ff99 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
}
 80020c4:	bf00      	nop
 80020c6:	3730      	adds	r7, #48	; 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40004400 	.word	0x40004400
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020c00 	.word	0x40020c00
 80020d8:	40004800 	.word	0x40004800

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <NMI_Handler+0x4>

080020e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <HardFault_Handler+0x4>

080020e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <MemManage_Handler+0x4>

080020ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <BusFault_Handler+0x4>

080020f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <UsageFault_Handler+0x4>

080020fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002128:	f000 fae6 	bl	80026f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}

08002130 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <TIM3_IRQHandler+0x10>)
 8002136:	f002 ffe6 	bl	8005106 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000280 	.word	0x20000280

08002144 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <USART2_IRQHandler+0x10>)
 800214a:	f003 fd0d 	bl	8005b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200002d4 	.word	0x200002d4

08002158 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <USART3_IRQHandler+0x10>)
 800215e:	f003 fd03 	bl	8005b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000240 	.word	0x20000240

0800216c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002170:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002174:	f001 fd3c 	bl	8003bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002184:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <_sbrk+0x5c>)
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <_sbrk+0x60>)
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <_sbrk+0x64>)
 800219a:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <_sbrk+0x68>)
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d207      	bcs.n	80021bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021ac:	f004 face 	bl	800674c <__errno>
 80021b0:	4602      	mov	r2, r0
 80021b2:	230c      	movs	r3, #12
 80021b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ba:	e009      	b.n	80021d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <_sbrk+0x64>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <_sbrk+0x64>)
 80021cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ce:	68fb      	ldr	r3, [r7, #12]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20030000 	.word	0x20030000
 80021dc:	00000400 	.word	0x00000400
 80021e0:	20000164 	.word	0x20000164
 80021e4:	200003c8 	.word	0x200003c8

080021e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <SystemInit+0x28>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	4a07      	ldr	r2, [pc, #28]	; (8002210 <SystemInit+0x28>)
 80021f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <SystemInit+0x28>)
 80021fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002202:	609a      	str	r2, [r3, #8]
#endif
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <HAL_TIM_PeriodElapsedCallback>:
TIM_HandleTypeDef htim3;
//extern
extern uint8_t y;
extern int8_t x;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if(htim->Instance==TIM3)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a28      	ldr	r2, [pc, #160]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d149      	bne.n	80022ba <HAL_TIM_PeriodElapsedCallback+0xa6>
  {
    if((timer_count%100)==0)
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b28      	ldr	r3, [pc, #160]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800222c:	fb83 1302 	smull	r1, r3, r3, r2
 8002230:	1159      	asrs	r1, r3, #5
 8002232:	17d3      	asrs	r3, r2, #31
 8002234:	1acb      	subs	r3, r1, r3
 8002236:	2164      	movs	r1, #100	; 0x64
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d134      	bne.n	80022ac <HAL_TIM_PeriodElapsedCallback+0x98>
    {
      ctime.seconds++;
 8002242:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002244:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	3301      	adds	r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	b25a      	sxtb	r2, r3
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002252:	709a      	strb	r2, [r3, #2]

      if(ctime.seconds>=60)
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002256:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800225a:	2b3b      	cmp	r3, #59	; 0x3b
 800225c:	dd0b      	ble.n	8002276 <HAL_TIM_PeriodElapsedCallback+0x62>
      {
    	ctime.minutes++;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002260:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3301      	adds	r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	b25a      	sxtb	r2, r3
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800226e:	705a      	strb	r2, [r3, #1]
    	ctime.seconds = 0;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002272:	2200      	movs	r2, #0
 8002274:	709a      	strb	r2, [r3, #2]
      }
      if(ctime.minutes>=60)
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002278:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800227c:	2b3b      	cmp	r3, #59	; 0x3b
 800227e:	dd0b      	ble.n	8002298 <HAL_TIM_PeriodElapsedCallback+0x84>
      {
    	ctime.hours++;
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002282:	f993 3000 	ldrsb.w	r3, [r3]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3301      	adds	r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	b25a      	sxtb	r2, r3
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002290:	701a      	strb	r2, [r3, #0]
        ctime.minutes = 0;
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002294:	2200      	movs	r2, #0
 8002296:	705a      	strb	r2, [r3, #1]
      }
      if(ctime.hours>=24)
 8002298:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800229a:	f993 3000 	ldrsb.w	r3, [r3]
 800229e:	2b17      	cmp	r3, #23
 80022a0:	dd02      	ble.n	80022a8 <HAL_TIM_PeriodElapsedCallback+0x94>
      {
    	ctime.hours = 0;
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
      }
#if 1
		  time_display();
 80022a8:	f000 f814 	bl	80022d4 <time_display>
#endif
    }
    Folling_ADC();
 80022ac:	f7fe fe56 	bl	8000f5c <Folling_ADC>
	  timer_count++;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80022b8:	6013      	str	r3, [r2, #0]
  }
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40000400 	.word	0x40000400
 80022c8:	20000368 	.word	0x20000368
 80022cc:	51eb851f 	.word	0x51eb851f
 80022d0:	20000348 	.word	0x20000348

080022d4 <time_display>:

void time_display(void)
{
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af02      	add	r7, sp, #8
  uint8_t hours;
  uint8_t minutes;
  uint8_t seconds;

  memset(line,0,sizeof(line));
 80022da:	2224      	movs	r2, #36	; 0x24
 80022dc:	2100      	movs	r1, #0
 80022de:	487a      	ldr	r0, [pc, #488]	; (80024c8 <time_display+0x1f4>)
 80022e0:	f004 fa5e 	bl	80067a0 <memset>

  if(current_state.mode == NORMAL_STATE)
 80022e4:	4b79      	ldr	r3, [pc, #484]	; (80024cc <time_display+0x1f8>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d117      	bne.n	800231c <time_display+0x48>
  {
	  sprintf(line[0],"Korea Polytech");
 80022ec:	4a76      	ldr	r2, [pc, #472]	; (80024c8 <time_display+0x1f4>)
 80022ee:	4b78      	ldr	r3, [pc, #480]	; (80024d0 <time_display+0x1fc>)
 80022f0:	4614      	mov	r4, r2
 80022f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80022f4:	6020      	str	r0, [r4, #0]
 80022f6:	6061      	str	r1, [r4, #4]
 80022f8:	60a2      	str	r2, [r4, #8]
 80022fa:	881a      	ldrh	r2, [r3, #0]
 80022fc:	789b      	ldrb	r3, [r3, #2]
 80022fe:	81a2      	strh	r2, [r4, #12]
 8002300:	73a3      	strb	r3, [r4, #14]
	  hours = ctime.hours;
 8002302:	4b74      	ldr	r3, [pc, #464]	; (80024d4 <time_display+0x200>)
 8002304:	f993 3000 	ldrsb.w	r3, [r3]
 8002308:	71fb      	strb	r3, [r7, #7]
	  minutes = ctime.minutes;
 800230a:	4b72      	ldr	r3, [pc, #456]	; (80024d4 <time_display+0x200>)
 800230c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002310:	71bb      	strb	r3, [r7, #6]
	  seconds = ctime.seconds;
 8002312:	4b70      	ldr	r3, [pc, #448]	; (80024d4 <time_display+0x200>)
 8002314:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002318:	717b      	strb	r3, [r7, #5]
 800231a:	e079      	b.n	8002410 <time_display+0x13c>
  }
  else if(current_state.mode == TIME_SETTING)
 800231c:	4b6b      	ldr	r3, [pc, #428]	; (80024cc <time_display+0x1f8>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d117      	bne.n	8002354 <time_display+0x80>
  {
	  blink();
 8002324:	f7ff fa1c 	bl	8001760 <blink>
	  sprintf(line[0],"Time Setting");
 8002328:	4a67      	ldr	r2, [pc, #412]	; (80024c8 <time_display+0x1f4>)
 800232a:	4b6b      	ldr	r3, [pc, #428]	; (80024d8 <time_display+0x204>)
 800232c:	4614      	mov	r4, r2
 800232e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002330:	6020      	str	r0, [r4, #0]
 8002332:	6061      	str	r1, [r4, #4]
 8002334:	60a2      	str	r2, [r4, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	7323      	strb	r3, [r4, #12]
	  hours = stime.hours;
 800233a:	4b68      	ldr	r3, [pc, #416]	; (80024dc <time_display+0x208>)
 800233c:	f993 3000 	ldrsb.w	r3, [r3]
 8002340:	71fb      	strb	r3, [r7, #7]
	  minutes = stime.minutes;
 8002342:	4b66      	ldr	r3, [pc, #408]	; (80024dc <time_display+0x208>)
 8002344:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002348:	71bb      	strb	r3, [r7, #6]
	  seconds = stime.seconds;
 800234a:	4b64      	ldr	r3, [pc, #400]	; (80024dc <time_display+0x208>)
 800234c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002350:	717b      	strb	r3, [r7, #5]
 8002352:	e05d      	b.n	8002410 <time_display+0x13c>

  }
  else if(current_state.mode == ALARM_TIME_SETTING)
 8002354:	4b5d      	ldr	r3, [pc, #372]	; (80024cc <time_display+0x1f8>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d117      	bne.n	800238c <time_display+0xb8>
  {
	  blink();
 800235c:	f7ff fa00 	bl	8001760 <blink>
	  sprintf(line[0],"Alarm Setting");
 8002360:	4a59      	ldr	r2, [pc, #356]	; (80024c8 <time_display+0x1f4>)
 8002362:	4b5f      	ldr	r3, [pc, #380]	; (80024e0 <time_display+0x20c>)
 8002364:	4614      	mov	r4, r2
 8002366:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002368:	6020      	str	r0, [r4, #0]
 800236a:	6061      	str	r1, [r4, #4]
 800236c:	60a2      	str	r2, [r4, #8]
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	81a3      	strh	r3, [r4, #12]
	  hours = atime.hours;
 8002372:	4b5c      	ldr	r3, [pc, #368]	; (80024e4 <time_display+0x210>)
 8002374:	f993 3000 	ldrsb.w	r3, [r3]
 8002378:	71fb      	strb	r3, [r7, #7]
	  minutes = atime.minutes;
 800237a:	4b5a      	ldr	r3, [pc, #360]	; (80024e4 <time_display+0x210>)
 800237c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002380:	71bb      	strb	r3, [r7, #6]
	  seconds = atime.seconds;
 8002382:	4b58      	ldr	r3, [pc, #352]	; (80024e4 <time_display+0x210>)
 8002384:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002388:	717b      	strb	r3, [r7, #5]
 800238a:	e041      	b.n	8002410 <time_display+0x13c>
  }
  else if(current_state.mode == MUSIC_SELECT)
 800238c:	4b4f      	ldr	r3, [pc, #316]	; (80024cc <time_display+0x1f8>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b03      	cmp	r3, #3
 8002392:	d13d      	bne.n	8002410 <time_display+0x13c>
  {
	  blink();
 8002394:	f7ff f9e4 	bl	8001760 <blink>
	  Clear();
 8002398:	f7ff fa0a 	bl	80017b0 <Clear>
	  if(x==0)
 800239c:	4b52      	ldr	r3, [pc, #328]	; (80024e8 <time_display+0x214>)
 800239e:	f993 3000 	ldrsb.w	r3, [r3]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10f      	bne.n	80023c6 <time_display+0xf2>
	  {
	  sprintf(line[0], " 1. Three Bears");
 80023a6:	4a48      	ldr	r2, [pc, #288]	; (80024c8 <time_display+0x1f4>)
 80023a8:	4b50      	ldr	r3, [pc, #320]	; (80024ec <time_display+0x218>)
 80023aa:	4614      	mov	r4, r2
 80023ac:	461d      	mov	r5, r3
 80023ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023b0:	6020      	str	r0, [r4, #0]
 80023b2:	6061      	str	r1, [r4, #4]
 80023b4:	60a2      	str	r2, [r4, #8]
 80023b6:	60e3      	str	r3, [r4, #12]
	  sprintf(line[1], " 2. cycle");
 80023b8:	4a4d      	ldr	r2, [pc, #308]	; (80024f0 <time_display+0x21c>)
 80023ba:	4b4e      	ldr	r3, [pc, #312]	; (80024f4 <time_display+0x220>)
 80023bc:	cb03      	ldmia	r3!, {r0, r1}
 80023be:	6010      	str	r0, [r2, #0]
 80023c0:	6051      	str	r1, [r2, #4]
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	8113      	strh	r3, [r2, #8]
	  }
	  if(x==1)
 80023c6:	4b48      	ldr	r3, [pc, #288]	; (80024e8 <time_display+0x214>)
 80023c8:	f993 3000 	ldrsb.w	r3, [r3]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d111      	bne.n	80023f4 <time_display+0x120>
	  {
	  sprintf(line[0], " 2. cycle");
 80023d0:	4a3d      	ldr	r2, [pc, #244]	; (80024c8 <time_display+0x1f4>)
 80023d2:	4b48      	ldr	r3, [pc, #288]	; (80024f4 <time_display+0x220>)
 80023d4:	cb03      	ldmia	r3!, {r0, r1}
 80023d6:	6010      	str	r0, [r2, #0]
 80023d8:	6051      	str	r1, [r2, #4]
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	8113      	strh	r3, [r2, #8]
	  sprintf(line[1], " 3. Spring Water");
 80023de:	4a44      	ldr	r2, [pc, #272]	; (80024f0 <time_display+0x21c>)
 80023e0:	4b45      	ldr	r3, [pc, #276]	; (80024f8 <time_display+0x224>)
 80023e2:	4615      	mov	r5, r2
 80023e4:	461c      	mov	r4, r3
 80023e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e8:	6028      	str	r0, [r5, #0]
 80023ea:	6069      	str	r1, [r5, #4]
 80023ec:	60aa      	str	r2, [r5, #8]
 80023ee:	60eb      	str	r3, [r5, #12]
 80023f0:	7823      	ldrb	r3, [r4, #0]
 80023f2:	742b      	strb	r3, [r5, #16]
	  }
	  if(x==2)
 80023f4:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <time_display+0x214>)
 80023f6:	f993 3000 	ldrsb.w	r3, [r3]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d108      	bne.n	8002410 <time_display+0x13c>
	  {
	  sprintf(line[0], "3. Spring Water");
 80023fe:	4a32      	ldr	r2, [pc, #200]	; (80024c8 <time_display+0x1f4>)
 8002400:	4b3e      	ldr	r3, [pc, #248]	; (80024fc <time_display+0x228>)
 8002402:	4614      	mov	r4, r2
 8002404:	461d      	mov	r5, r3
 8002406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002408:	6020      	str	r0, [r4, #0]
 800240a:	6061      	str	r1, [r4, #4]
 800240c:	60a2      	str	r2, [r4, #8]
 800240e:	60e3      	str	r3, [r4, #12]
	  }
  }
  if(current_state.mode != MUSIC_SELECT)
 8002410:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <time_display+0x1f8>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d035      	beq.n	8002484 <time_display+0x1b0>
  {
	  if(hours>=12)
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	2b0b      	cmp	r3, #11
 800241c:	d911      	bls.n	8002442 <time_display+0x16e>
	  {
		strncpy(line[1],"PM ",3);
 800241e:	4b34      	ldr	r3, [pc, #208]	; (80024f0 <time_display+0x21c>)
 8002420:	4a37      	ldr	r2, [pc, #220]	; (8002500 <time_display+0x22c>)
 8002422:	8811      	ldrh	r1, [r2, #0]
 8002424:	7892      	ldrb	r2, [r2, #2]
 8002426:	8019      	strh	r1, [r3, #0]
 8002428:	709a      	strb	r2, [r3, #2]
		sprintf(time_str,"%02d:%02d:%02d",hours-12,minutes,seconds);
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f1a3 020c 	sub.w	r2, r3, #12
 8002430:	79b9      	ldrb	r1, [r7, #6]
 8002432:	797b      	ldrb	r3, [r7, #5]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	460b      	mov	r3, r1
 8002438:	4932      	ldr	r1, [pc, #200]	; (8002504 <time_display+0x230>)
 800243a:	4833      	ldr	r0, [pc, #204]	; (8002508 <time_display+0x234>)
 800243c:	f004 f9b8 	bl	80067b0 <siprintf>
 8002440:	e00e      	b.n	8002460 <time_display+0x18c>
	  }
	  else
	  {
		strncpy(line[1],"AM ",3);
 8002442:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <time_display+0x21c>)
 8002444:	4a31      	ldr	r2, [pc, #196]	; (800250c <time_display+0x238>)
 8002446:	8811      	ldrh	r1, [r2, #0]
 8002448:	7892      	ldrb	r2, [r2, #2]
 800244a:	8019      	strh	r1, [r3, #0]
 800244c:	709a      	strb	r2, [r3, #2]
		sprintf(time_str,"%02d:%02d:%02d",hours,minutes,seconds);
 800244e:	79fa      	ldrb	r2, [r7, #7]
 8002450:	79b9      	ldrb	r1, [r7, #6]
 8002452:	797b      	ldrb	r3, [r7, #5]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	460b      	mov	r3, r1
 8002458:	492a      	ldr	r1, [pc, #168]	; (8002504 <time_display+0x230>)
 800245a:	482b      	ldr	r0, [pc, #172]	; (8002508 <time_display+0x234>)
 800245c:	f004 f9a8 	bl	80067b0 <siprintf>
	  }
	  strcat(line[1],time_str);
 8002460:	4929      	ldr	r1, [pc, #164]	; (8002508 <time_display+0x234>)
 8002462:	4823      	ldr	r0, [pc, #140]	; (80024f0 <time_display+0x21c>)
 8002464:	f004 f9c4 	bl	80067f0 <strcat>

	  if(current_state.mode == ALARM_TIME_SETTING)
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <time_display+0x1f8>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d109      	bne.n	8002484 <time_display+0x1b0>
		  strcat(line[1]," AL");
 8002470:	481f      	ldr	r0, [pc, #124]	; (80024f0 <time_display+0x21c>)
 8002472:	f7fd febd 	bl	80001f0 <strlen>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <time_display+0x21c>)
 800247c:	4413      	add	r3, r2
 800247e:	4a24      	ldr	r2, [pc, #144]	; (8002510 <time_display+0x23c>)
 8002480:	6810      	ldr	r0, [r2, #0]
 8002482:	6018      	str	r0, [r3, #0]
  }
  setCursor(0,0);
 8002484:	2100      	movs	r1, #0
 8002486:	2000      	movs	r0, #0
 8002488:	f7ff f97a 	bl	8001780 <setCursor>
  LCD_SendString(LCD_ADDR, line[0]);
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <time_display+0x1f4>)
 800248e:	204e      	movs	r0, #78	; 0x4e
 8002490:	f7ff f94d 	bl	800172e <LCD_SendString>
  setCursor(1,0);
 8002494:	2100      	movs	r1, #0
 8002496:	2001      	movs	r0, #1
 8002498:	f7ff f972 	bl	8001780 <setCursor>
  LCD_SendString(LCD_ADDR, line[1]);
 800249c:	4914      	ldr	r1, [pc, #80]	; (80024f0 <time_display+0x21c>)
 800249e:	204e      	movs	r0, #78	; 0x4e
 80024a0:	f7ff f945 	bl	800172e <LCD_SendString>
  setCursor(1,y);
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <time_display+0x240>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	2001      	movs	r0, #1
 80024ac:	f7ff f968 	bl	8001780 <setCursor>
  if(current_state.mode == MUSIC_SELECT) setCursor(0, 0);
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <time_display+0x1f8>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d103      	bne.n	80024c0 <time_display+0x1ec>
 80024b8:	2100      	movs	r1, #0
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff f960 	bl	8001780 <setCursor>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bdb0      	pop	{r4, r5, r7, pc}
 80024c8:	2000031c 	.word	0x2000031c
 80024cc:	20000314 	.word	0x20000314
 80024d0:	08006ff4 	.word	0x08006ff4
 80024d4:	20000348 	.word	0x20000348
 80024d8:	08007004 	.word	0x08007004
 80024dc:	20000360 	.word	0x20000360
 80024e0:	08007014 	.word	0x08007014
 80024e4:	20000364 	.word	0x20000364
 80024e8:	20000174 	.word	0x20000174
 80024ec:	08007024 	.word	0x08007024
 80024f0:	2000032e 	.word	0x2000032e
 80024f4:	08007034 	.word	0x08007034
 80024f8:	08007040 	.word	0x08007040
 80024fc:	08007054 	.word	0x08007054
 8002500:	08007064 	.word	0x08007064
 8002504:	08007068 	.word	0x08007068
 8002508:	20000350 	.word	0x20000350
 800250c:	08007078 	.word	0x08007078
 8002510:	0800707c 	.word	0x0800707c
 8002514:	200001e0 	.word	0x200001e0

08002518 <HAL_UART_TxCpltCallback>:
uint8_t BT_buffer[10];
uint8_t *BT_ptr;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	}
	if(huart->Instance == USART2)
	{

	}
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a29      	ldr	r2, [pc, #164]	; (80025e0 <HAL_UART_RxCpltCallback+0xb4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d132      	bne.n	80025a4 <HAL_UART_RxCpltCallback+0x78>
	{
		HAL_UART_Receive_IT(&huart3, &rx_d, 1);
 800253e:	2201      	movs	r2, #1
 8002540:	4928      	ldr	r1, [pc, #160]	; (80025e4 <HAL_UART_RxCpltCallback+0xb8>)
 8002542:	4829      	ldr	r0, [pc, #164]	; (80025e8 <HAL_UART_RxCpltCallback+0xbc>)
 8002544:	f003 fabb 	bl	8005abe <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart3, &rx_d, 1, 1000);
 8002548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254c:	2201      	movs	r2, #1
 800254e:	4925      	ldr	r1, [pc, #148]	; (80025e4 <HAL_UART_RxCpltCallback+0xb8>)
 8002550:	4825      	ldr	r0, [pc, #148]	; (80025e8 <HAL_UART_RxCpltCallback+0xbc>)
 8002552:	f003 f9d6 	bl	8005902 <HAL_UART_Transmit>
		*(ptr++) = rx_d;
 8002556:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_UART_RxCpltCallback+0xc0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	4923      	ldr	r1, [pc, #140]	; (80025ec <HAL_UART_RxCpltCallback+0xc0>)
 800255e:	600a      	str	r2, [r1, #0]
 8002560:	4a20      	ldr	r2, [pc, #128]	; (80025e4 <HAL_UART_RxCpltCallback+0xb8>)
 8002562:	7812      	ldrb	r2, [r2, #0]
 8002564:	701a      	strb	r2, [r3, #0]
		if((rx_d=='\r')||(rx_d=='\n'))
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_UART_RxCpltCallback+0xb8>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b0d      	cmp	r3, #13
 800256c:	d003      	beq.n	8002576 <HAL_UART_RxCpltCallback+0x4a>
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_UART_RxCpltCallback+0xb8>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b0a      	cmp	r3, #10
 8002574:	d116      	bne.n	80025a4 <HAL_UART_RxCpltCallback+0x78>
		{
			HAL_UART_Transmit(&huart2, buffer, ptr-buffer-1,1000);
 8002576:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_UART_RxCpltCallback+0xc0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	b29a      	uxth	r2, r3
 800257c:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <HAL_UART_RxCpltCallback+0xc4>)
 800257e:	b29b      	uxth	r3, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	b29b      	uxth	r3, r3
 8002584:	4413      	add	r3, r2
 8002586:	b29a      	uxth	r2, r3
 8002588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258c:	4918      	ldr	r1, [pc, #96]	; (80025f0 <HAL_UART_RxCpltCallback+0xc4>)
 800258e:	4819      	ldr	r0, [pc, #100]	; (80025f4 <HAL_UART_RxCpltCallback+0xc8>)
 8002590:	f003 f9b7 	bl	8005902 <HAL_UART_Transmit>
			memset(buffer, 0, sizeof(buffer));
 8002594:	221e      	movs	r2, #30
 8002596:	2100      	movs	r1, #0
 8002598:	4815      	ldr	r0, [pc, #84]	; (80025f0 <HAL_UART_RxCpltCallback+0xc4>)
 800259a:	f004 f901 	bl	80067a0 <memset>
			ptr = buffer;
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_UART_RxCpltCallback+0xc0>)
 80025a0:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <HAL_UART_RxCpltCallback+0xc4>)
 80025a2:	601a      	str	r2, [r3, #0]

		}
	}
	if(huart->Instance == USART2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <HAL_UART_RxCpltCallback+0xcc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d113      	bne.n	80025d6 <HAL_UART_RxCpltCallback+0xaa>
	{
		HAL_UART_Transmit_IT(&huart3, BT_buffer, strlen(BT_buffer));
 80025ae:	4813      	ldr	r0, [pc, #76]	; (80025fc <HAL_UART_RxCpltCallback+0xd0>)
 80025b0:	f7fd fe1e 	bl	80001f0 <strlen>
 80025b4:	4603      	mov	r3, r0
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	4910      	ldr	r1, [pc, #64]	; (80025fc <HAL_UART_RxCpltCallback+0xd0>)
 80025bc:	480a      	ldr	r0, [pc, #40]	; (80025e8 <HAL_UART_RxCpltCallback+0xbc>)
 80025be:	f003 fa39 	bl	8005a34 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2, BT_buffer, strlen(BT_buffer));
 80025c2:	480e      	ldr	r0, [pc, #56]	; (80025fc <HAL_UART_RxCpltCallback+0xd0>)
 80025c4:	f7fd fe14 	bl	80001f0 <strlen>
 80025c8:	4603      	mov	r3, r0
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	490b      	ldr	r1, [pc, #44]	; (80025fc <HAL_UART_RxCpltCallback+0xd0>)
 80025d0:	4808      	ldr	r0, [pc, #32]	; (80025f4 <HAL_UART_RxCpltCallback+0xc8>)
 80025d2:	f003 fa74 	bl	8005abe <HAL_UART_Receive_IT>
	{
		if((GPIOB->IDR&0x4000)==0x4000)GPIOB->ODR &= ~(0x4000);
		else GPIOB->ODR |= 0x4000;
	}
*/
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40004800 	.word	0x40004800
 80025e4:	20000168 	.word	0x20000168
 80025e8:	20000240 	.word	0x20000240
 80025ec:	2000036c 	.word	0x2000036c
 80025f0:	20000370 	.word	0x20000370
 80025f4:	200002d4 	.word	0x200002d4
 80025f8:	40004400 	.word	0x40004400
 80025fc:	20000390 	.word	0x20000390

08002600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002638 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002604:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002606:	e003      	b.n	8002610 <LoopCopyDataInit>

08002608 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800260a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800260c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800260e:	3104      	adds	r1, #4

08002610 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002610:	480b      	ldr	r0, [pc, #44]	; (8002640 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002614:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002616:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002618:	d3f6      	bcc.n	8002608 <CopyDataInit>
  ldr  r2, =_sbss
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800261c:	e002      	b.n	8002624 <LoopFillZerobss>

0800261e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800261e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002620:	f842 3b04 	str.w	r3, [r2], #4

08002624 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002626:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002628:	d3f9      	bcc.n	800261e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800262a:	f7ff fddd 	bl	80021e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262e:	f004 f893 	bl	8006758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002632:	f7ff f8f3 	bl	800181c <main>
  bx  lr    
 8002636:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002638:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800263c:	080070dc 	.word	0x080070dc
  ldr  r0, =_sdata
 8002640:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002644:	20000148 	.word	0x20000148
  ldr  r2, =_sbss
 8002648:	20000148 	.word	0x20000148
  ldr  r3, = _ebss
 800264c:	200003c8 	.word	0x200003c8

08002650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002650:	e7fe      	b.n	8002650 <ADC_IRQHandler>
	...

08002654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <HAL_Init+0x40>)
 800265e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_Init+0x40>)
 800266a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a07      	ldr	r2, [pc, #28]	; (8002694 <HAL_Init+0x40>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267c:	2003      	movs	r0, #3
 800267e:	f000 fc93 	bl	8002fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002682:	2000      	movs	r0, #0
 8002684:	f000 f808 	bl	8002698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002688:	f7ff fb7c 	bl	8001d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023c00 	.word	0x40023c00

08002698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_InitTick+0x54>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_InitTick+0x58>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fcab 	bl	8003012 <HAL_SYSTICK_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00e      	b.n	80026e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d80a      	bhi.n	80026e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026cc:	2200      	movs	r2, #0
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f000 fc73 	bl	8002fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d8:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <HAL_InitTick+0x5c>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200000d8 	.word	0x200000d8
 80026f0:	200000e0 	.word	0x200000e0
 80026f4:	200000dc 	.word	0x200000dc

080026f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x20>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x24>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4413      	add	r3, r2
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_IncTick+0x24>)
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	200000e0 	.word	0x200000e0
 800271c:	200003a0 	.word	0x200003a0

08002720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return uwTick;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_GetTick+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	200003a0 	.word	0x200003a0

08002738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7ff ffee 	bl	8002720 <HAL_GetTick>
 8002744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d005      	beq.n	800275e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_Delay+0x40>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800275e:	bf00      	nop
 8002760:	f7ff ffde 	bl	8002720 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	429a      	cmp	r2, r3
 800276e:	d8f7      	bhi.n	8002760 <HAL_Delay+0x28>
  {
  }
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	200000e0 	.word	0x200000e0

0800277c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e033      	b.n	80027fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fb1a 	bl	8001dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d118      	bne.n	80027ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027c2:	f023 0302 	bic.w	r3, r3, #2
 80027c6:	f043 0202 	orr.w	r2, r3, #2
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fa1e 	bl	8002c10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	f043 0201 	orr.w	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
 80027ea:	e001      	b.n	80027f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_ADC_Start+0x1a>
 800281a:	2302      	movs	r3, #2
 800281c:	e0a5      	b.n	800296a <HAL_ADC_Start+0x166>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d018      	beq.n	8002866 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002844:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <HAL_ADC_Start+0x174>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a4c      	ldr	r2, [pc, #304]	; (800297c <HAL_ADC_Start+0x178>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	0c9a      	lsrs	r2, r3, #18
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002858:	e002      	b.n	8002860 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3b01      	subs	r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f9      	bne.n	800285a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	d179      	bne.n	8002968 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800289e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b2:	d106      	bne.n	80028c2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	f023 0206 	bic.w	r2, r3, #6
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	645a      	str	r2, [r3, #68]	; 0x44
 80028c0:	e002      	b.n	80028c8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_ADC_Start+0x17c>)
 80028d2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028dc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d12a      	bne.n	8002940 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a25      	ldr	r2, [pc, #148]	; (8002984 <HAL_ADC_Start+0x180>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d015      	beq.n	8002920 <HAL_ADC_Start+0x11c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a23      	ldr	r2, [pc, #140]	; (8002988 <HAL_ADC_Start+0x184>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d105      	bne.n	800290a <HAL_ADC_Start+0x106>
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_ADC_Start+0x17c>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_ADC_Start+0x188>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d129      	bne.n	8002968 <HAL_ADC_Start+0x164>
 8002914:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <HAL_ADC_Start+0x17c>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	2b0f      	cmp	r3, #15
 800291e:	d823      	bhi.n	8002968 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11c      	bne.n	8002968 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	e013      	b.n	8002968 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <HAL_ADC_Start+0x180>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10e      	bne.n	8002968 <HAL_ADC_Start+0x164>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002966:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	200000d8 	.word	0x200000d8
 800297c:	431bde83 	.word	0x431bde83
 8002980:	40012300 	.word	0x40012300
 8002984:	40012000 	.word	0x40012000
 8002988:	40012100 	.word	0x40012100
 800298c:	40012200 	.word	0x40012200

08002990 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1c>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e113      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x244>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b09      	cmp	r3, #9
 80029d6:	d925      	bls.n	8002a24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68d9      	ldr	r1, [r3, #12]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	3b1e      	subs	r3, #30
 80029ee:	2207      	movs	r2, #7
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43da      	mvns	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	400a      	ands	r2, r1
 80029fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68d9      	ldr	r1, [r3, #12]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	4603      	mov	r3, r0
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4403      	add	r3, r0
 8002a16:	3b1e      	subs	r3, #30
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	e022      	b.n	8002a6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6919      	ldr	r1, [r3, #16]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	2207      	movs	r2, #7
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	400a      	ands	r2, r1
 8002a46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6919      	ldr	r1, [r3, #16]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	4618      	mov	r0, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4403      	add	r3, r0
 8002a60:	409a      	lsls	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d824      	bhi.n	8002abc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	3b05      	subs	r3, #5
 8002a84:	221f      	movs	r2, #31
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	400a      	ands	r2, r1
 8002a92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b05      	subs	r3, #5
 8002aae:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8002aba:	e04c      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b0c      	cmp	r3, #12
 8002ac2:	d824      	bhi.n	8002b0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3b23      	subs	r3, #35	; 0x23
 8002ad6:	221f      	movs	r2, #31
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43da      	mvns	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	3b23      	subs	r3, #35	; 0x23
 8002b00:	fa00 f203 	lsl.w	r2, r0, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b0c:	e023      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3b41      	subs	r3, #65	; 0x41
 8002b20:	221f      	movs	r2, #31
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43da      	mvns	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	3b41      	subs	r3, #65	; 0x41
 8002b4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b56:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_ADC_ConfigChannel+0x250>)
 8002b58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a28      	ldr	r2, [pc, #160]	; (8002c00 <HAL_ADC_ConfigChannel+0x254>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d10f      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x1d8>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b12      	cmp	r3, #18
 8002b6a:	d10b      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <HAL_ADC_ConfigChannel+0x254>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d12b      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x23a>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <HAL_ADC_ConfigChannel+0x258>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d003      	beq.n	8002ba0 <HAL_ADC_ConfigChannel+0x1f4>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b11      	cmp	r3, #17
 8002b9e:	d122      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a11      	ldr	r2, [pc, #68]	; (8002c04 <HAL_ADC_ConfigChannel+0x258>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d111      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_ADC_ConfigChannel+0x25c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a11      	ldr	r2, [pc, #68]	; (8002c0c <HAL_ADC_ConfigChannel+0x260>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	0c9a      	lsrs	r2, r3, #18
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bd8:	e002      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f9      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40012300 	.word	0x40012300
 8002c00:	40012000 	.word	0x40012000
 8002c04:	10000012 	.word	0x10000012
 8002c08:	200000d8 	.word	0x200000d8
 8002c0c:	431bde83 	.word	0x431bde83

08002c10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c18:	4b79      	ldr	r3, [pc, #484]	; (8002e00 <ADC_Init+0x1f0>)
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	021a      	lsls	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6899      	ldr	r1, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <ADC_Init+0x1f4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d022      	beq.n	8002cee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6899      	ldr	r1, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6899      	ldr	r1, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	e00f      	b.n	8002d0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0202 	bic.w	r2, r2, #2
 8002d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6899      	ldr	r1, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7e1b      	ldrb	r3, [r3, #24]
 8002d28:	005a      	lsls	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01b      	beq.n	8002d74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6859      	ldr	r1, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	3b01      	subs	r3, #1
 8002d68:	035a      	lsls	r2, r3, #13
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	e007      	b.n	8002d84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	051a      	lsls	r2, r3, #20
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002db8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6899      	ldr	r1, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dc6:	025a      	lsls	r2, r3, #9
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6899      	ldr	r1, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	029a      	lsls	r2, r3, #10
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	40012300 	.word	0x40012300
 8002e04:	0f000001 	.word	0x0f000001

08002e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <__NVIC_SetPriorityGrouping+0x44>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e24:	4013      	ands	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e3a:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	60d3      	str	r3, [r2, #12]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e54:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <__NVIC_GetPriorityGrouping+0x18>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	f003 0307 	and.w	r3, r3, #7
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	db0b      	blt.n	8002e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	4907      	ldr	r1, [pc, #28]	; (8002ea4 <__NVIC_EnableIRQ+0x38>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000e100 	.word	0xe000e100

08002ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	6039      	str	r1, [r7, #0]
 8002eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	db0a      	blt.n	8002ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	490c      	ldr	r1, [pc, #48]	; (8002ef4 <__NVIC_SetPriority+0x4c>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	0112      	lsls	r2, r2, #4
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	440b      	add	r3, r1
 8002ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed0:	e00a      	b.n	8002ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4908      	ldr	r1, [pc, #32]	; (8002ef8 <__NVIC_SetPriority+0x50>)
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	3b04      	subs	r3, #4
 8002ee0:	0112      	lsls	r2, r2, #4
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	761a      	strb	r2, [r3, #24]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000e100 	.word	0xe000e100
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	; 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f1c3 0307 	rsb	r3, r3, #7
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	bf28      	it	cs
 8002f1a:	2304      	movcs	r3, #4
 8002f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3304      	adds	r3, #4
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	d902      	bls.n	8002f2c <NVIC_EncodePriority+0x30>
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3b03      	subs	r3, #3
 8002f2a:	e000      	b.n	8002f2e <NVIC_EncodePriority+0x32>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	401a      	ands	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f44:	f04f 31ff 	mov.w	r1, #4294967295
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	43d9      	mvns	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	4313      	orrs	r3, r2
         );
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3724      	adds	r7, #36	; 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f74:	d301      	bcc.n	8002f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00f      	b.n	8002f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <SysTick_Config+0x40>)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f82:	210f      	movs	r1, #15
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295
 8002f88:	f7ff ff8e 	bl	8002ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <SysTick_Config+0x40>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f92:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <SysTick_Config+0x40>)
 8002f94:	2207      	movs	r2, #7
 8002f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	e000e010 	.word	0xe000e010

08002fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ff29 	bl	8002e08 <__NVIC_SetPriorityGrouping>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd0:	f7ff ff3e 	bl	8002e50 <__NVIC_GetPriorityGrouping>
 8002fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	6978      	ldr	r0, [r7, #20]
 8002fdc:	f7ff ff8e 	bl	8002efc <NVIC_EncodePriority>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ff5d 	bl	8002ea8 <__NVIC_SetPriority>
}
 8002fee:	bf00      	nop
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff31 	bl	8002e6c <__NVIC_EnableIRQ>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ffa2 	bl	8002f64 <SysTick_Config>
 8003020:	4603      	mov	r3, r0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e014      	b.n	8003066 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	791b      	ldrb	r3, [r3, #4]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d105      	bne.n	8003052 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7fe ff05 	bl	8001e5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2202      	movs	r2, #2
 8003056:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800306e:	b480      	push	{r7}
 8003070:	b085      	sub	sp, #20
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	2300      	movs	r3, #0
 800307e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	795b      	ldrb	r3, [r3, #5]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_DAC_Start+0x1e>
 8003088:	2302      	movs	r3, #2
 800308a:	e050      	b.n	800312e <HAL_DAC_Start+0xc0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6819      	ldr	r1, [r3, #0]
 800309e:	2201      	movs	r2, #1
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	409a      	lsls	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11a      	bne.n	80030e8 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030c8:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d127      	bne.n	8003120 <HAL_DAC_Start+0xb2>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b38      	cmp	r3, #56	; 0x38
 80030d4:	d124      	bne.n	8003120 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0201 	orr.w	r2, r2, #1
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	e01b      	b.n	8003120 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f2:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80030fe:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003106:	d10b      	bne.n	8003120 <HAL_DAC_Start+0xb2>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800310e:	d107      	bne.n	8003120 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0202 	orr.w	r2, r2, #2
 800311e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800313a:	b480      	push	{r7}
 800313c:	b087      	sub	sp, #28
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	795b      	ldrb	r3, [r3, #5]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_DAC_ConfigChannel+0x20>
 8003156:	2302      	movs	r3, #2
 8003158:	e036      	b.n	80031c8 <HAL_DAC_ConfigChannel+0x8e>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2202      	movs	r2, #2
 8003164:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800316e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4013      	ands	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6819      	ldr	r1, [r3, #0]
 80031a8:	22c0      	movs	r2, #192	; 0xc0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43da      	mvns	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	400a      	ands	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d105      	bne.n	80031fe <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	3308      	adds	r3, #8
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	e004      	b.n	8003208 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4413      	add	r3, r2
 8003204:	3314      	adds	r3, #20
 8003206:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	461a      	mov	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d004      	beq.n	800323c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2280      	movs	r2, #128	; 0x80
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e00c      	b.n	8003256 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2205      	movs	r2, #5
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003276:	4b23      	ldr	r3, [pc, #140]	; (8003304 <HAL_FLASH_Program+0xa0>)
 8003278:	7e1b      	ldrb	r3, [r3, #24]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_FLASH_Program+0x1e>
 800327e:	2302      	movs	r3, #2
 8003280:	e03b      	b.n	80032fa <HAL_FLASH_Program+0x96>
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_FLASH_Program+0xa0>)
 8003284:	2201      	movs	r2, #1
 8003286:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003288:	f24c 3050 	movw	r0, #50000	; 0xc350
 800328c:	f000 f870 	bl	8003370 <FLASH_WaitForLastOperation>
 8003290:	4603      	mov	r3, r0
 8003292:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d12b      	bne.n	80032f2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80032a0:	783b      	ldrb	r3, [r7, #0]
 80032a2:	4619      	mov	r1, r3
 80032a4:	68b8      	ldr	r0, [r7, #8]
 80032a6:	f000 f919 	bl	80034dc <FLASH_Program_Byte>
 80032aa:	e016      	b.n	80032da <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d105      	bne.n	80032be <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80032b2:	883b      	ldrh	r3, [r7, #0]
 80032b4:	4619      	mov	r1, r3
 80032b6:	68b8      	ldr	r0, [r7, #8]
 80032b8:	f000 f8ec 	bl	8003494 <FLASH_Program_HalfWord>
 80032bc:	e00d      	b.n	80032da <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d105      	bne.n	80032d0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4619      	mov	r1, r3
 80032c8:	68b8      	ldr	r0, [r7, #8]
 80032ca:	f000 f8c1 	bl	8003450 <FLASH_Program_Word>
 80032ce:	e004      	b.n	80032da <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80032d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032d4:	68b8      	ldr	r0, [r7, #8]
 80032d6:	f000 f88b 	bl	80033f0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032de:	f000 f847 	bl	8003370 <FLASH_WaitForLastOperation>
 80032e2:	4603      	mov	r3, r0
 80032e4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <HAL_FLASH_Program+0xa4>)
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	4a07      	ldr	r2, [pc, #28]	; (8003308 <HAL_FLASH_Program+0xa4>)
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80032f2:	4b04      	ldr	r3, [pc, #16]	; (8003304 <HAL_FLASH_Program+0xa0>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200003a4 	.word	0x200003a4
 8003308:	40023c00 	.word	0x40023c00

0800330c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_FLASH_Unlock+0x38>)
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	da0b      	bge.n	8003336 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_FLASH_Unlock+0x38>)
 8003320:	4a09      	ldr	r2, [pc, #36]	; (8003348 <HAL_FLASH_Unlock+0x3c>)
 8003322:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <HAL_FLASH_Unlock+0x38>)
 8003326:	4a09      	ldr	r2, [pc, #36]	; (800334c <HAL_FLASH_Unlock+0x40>)
 8003328:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_FLASH_Unlock+0x38>)
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	da01      	bge.n	8003336 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003336:	79fb      	ldrb	r3, [r7, #7]
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40023c00 	.word	0x40023c00
 8003348:	45670123 	.word	0x45670123
 800334c:	cdef89ab 	.word	0xcdef89ab

08003350 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_FLASH_Lock+0x1c>)
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <HAL_FLASH_Lock+0x1c>)
 800335a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800335e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	40023c00 	.word	0x40023c00

08003370 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <FLASH_WaitForLastOperation+0x78>)
 800337e:	2200      	movs	r2, #0
 8003380:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003382:	f7ff f9cd 	bl	8002720 <HAL_GetTick>
 8003386:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003388:	e010      	b.n	80033ac <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d00c      	beq.n	80033ac <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <FLASH_WaitForLastOperation+0x38>
 8003398:	f7ff f9c2 	bl	8002720 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d201      	bcs.n	80033ac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e019      	b.n	80033e0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <FLASH_WaitForLastOperation+0x7c>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e8      	bne.n	800338a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <FLASH_WaitForLastOperation+0x7c>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <FLASH_WaitForLastOperation+0x7c>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <FLASH_WaitForLastOperation+0x7c>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80033d6:	f000 f8a3 	bl	8003520 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
  
}  
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	200003a4 	.word	0x200003a4
 80033ec:	40023c00 	.word	0x40023c00

080033f0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80033f0:	b490      	push	{r4, r7}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80033fc:	4b13      	ldr	r3, [pc, #76]	; (800344c <FLASH_Program_DoubleWord+0x5c>)
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	4a12      	ldr	r2, [pc, #72]	; (800344c <FLASH_Program_DoubleWord+0x5c>)
 8003402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003406:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003408:	4b10      	ldr	r3, [pc, #64]	; (800344c <FLASH_Program_DoubleWord+0x5c>)
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	4a0f      	ldr	r2, [pc, #60]	; (800344c <FLASH_Program_DoubleWord+0x5c>)
 800340e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003412:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003414:	4b0d      	ldr	r3, [pc, #52]	; (800344c <FLASH_Program_DoubleWord+0x5c>)
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	4a0c      	ldr	r2, [pc, #48]	; (800344c <FLASH_Program_DoubleWord+0x5c>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003426:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800342a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	f04f 0400 	mov.w	r4, #0
 8003436:	0013      	movs	r3, r2
 8003438:	2400      	movs	r4, #0
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	3204      	adds	r2, #4
 800343e:	6013      	str	r3, [r2, #0]
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bc90      	pop	{r4, r7}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40023c00 	.word	0x40023c00

08003450 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <FLASH_Program_Word+0x40>)
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	4a0c      	ldr	r2, [pc, #48]	; (8003490 <FLASH_Program_Word+0x40>)
 8003460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003464:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <FLASH_Program_Word+0x40>)
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <FLASH_Program_Word+0x40>)
 800346c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003470:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <FLASH_Program_Word+0x40>)
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	4a06      	ldr	r2, [pc, #24]	; (8003490 <FLASH_Program_Word+0x40>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	601a      	str	r2, [r3, #0]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40023c00 	.word	0x40023c00

08003494 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80034a0:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <FLASH_Program_HalfWord+0x44>)
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	4a0c      	ldr	r2, [pc, #48]	; (80034d8 <FLASH_Program_HalfWord+0x44>)
 80034a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <FLASH_Program_HalfWord+0x44>)
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <FLASH_Program_HalfWord+0x44>)
 80034b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80034b8:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <FLASH_Program_HalfWord+0x44>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	4a06      	ldr	r2, [pc, #24]	; (80034d8 <FLASH_Program_HalfWord+0x44>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	801a      	strh	r2, [r3, #0]
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40023c00 	.word	0x40023c00

080034dc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <FLASH_Program_Byte+0x40>)
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	4a0b      	ldr	r2, [pc, #44]	; (800351c <FLASH_Program_Byte+0x40>)
 80034ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <FLASH_Program_Byte+0x40>)
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <FLASH_Program_Byte+0x40>)
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80034fc:	4b07      	ldr	r3, [pc, #28]	; (800351c <FLASH_Program_Byte+0x40>)
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	4a06      	ldr	r2, [pc, #24]	; (800351c <FLASH_Program_Byte+0x40>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	701a      	strb	r2, [r3, #0]
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40023c00 	.word	0x40023c00

08003520 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003524:	4b2f      	ldr	r3, [pc, #188]	; (80035e4 <FLASH_SetErrorCode+0xc4>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003530:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <FLASH_SetErrorCode+0xc8>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f043 0310 	orr.w	r3, r3, #16
 8003538:	4a2b      	ldr	r2, [pc, #172]	; (80035e8 <FLASH_SetErrorCode+0xc8>)
 800353a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800353c:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <FLASH_SetErrorCode+0xc4>)
 800353e:	2210      	movs	r2, #16
 8003540:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003542:	4b28      	ldr	r3, [pc, #160]	; (80035e4 <FLASH_SetErrorCode+0xc4>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800354e:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <FLASH_SetErrorCode+0xc8>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f043 0308 	orr.w	r3, r3, #8
 8003556:	4a24      	ldr	r2, [pc, #144]	; (80035e8 <FLASH_SetErrorCode+0xc8>)
 8003558:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800355a:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <FLASH_SetErrorCode+0xc4>)
 800355c:	2220      	movs	r2, #32
 800355e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003560:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <FLASH_SetErrorCode+0xc4>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800356c:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <FLASH_SetErrorCode+0xc8>)
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f043 0304 	orr.w	r3, r3, #4
 8003574:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <FLASH_SetErrorCode+0xc8>)
 8003576:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003578:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <FLASH_SetErrorCode+0xc4>)
 800357a:	2240      	movs	r2, #64	; 0x40
 800357c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800357e:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <FLASH_SetErrorCode+0xc4>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800358a:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <FLASH_SetErrorCode+0xc8>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f043 0302 	orr.w	r3, r3, #2
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <FLASH_SetErrorCode+0xc8>)
 8003594:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003596:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <FLASH_SetErrorCode+0xc4>)
 8003598:	2280      	movs	r2, #128	; 0x80
 800359a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <FLASH_SetErrorCode+0xc4>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <FLASH_SetErrorCode+0xc8>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	4a0d      	ldr	r2, [pc, #52]	; (80035e8 <FLASH_SetErrorCode+0xc8>)
 80035b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <FLASH_SetErrorCode+0xc4>)
 80035b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ba:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80035bc:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <FLASH_SetErrorCode+0xc4>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80035c8:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <FLASH_SetErrorCode+0xc8>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f043 0320 	orr.w	r3, r3, #32
 80035d0:	4a05      	ldr	r2, [pc, #20]	; (80035e8 <FLASH_SetErrorCode+0xc8>)
 80035d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <FLASH_SetErrorCode+0xc4>)
 80035d6:	2202      	movs	r2, #2
 80035d8:	60da      	str	r2, [r3, #12]
  }
}
 80035da:	bf00      	nop
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	40023c00 	.word	0x40023c00
 80035e8:	200003a4 	.word	0x200003a4

080035ec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035fe:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <HAL_FLASHEx_Erase+0xdc>)
 8003600:	7e1b      	ldrb	r3, [r3, #24]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_FLASHEx_Erase+0x1e>
 8003606:	2302      	movs	r3, #2
 8003608:	e05a      	b.n	80036c0 <HAL_FLASHEx_Erase+0xd4>
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_FLASHEx_Erase+0xdc>)
 800360c:	2201      	movs	r2, #1
 800360e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003610:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003614:	f7ff feac 	bl	8003370 <FLASH_WaitForLastOperation>
 8003618:	4603      	mov	r3, r0
 800361a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d14a      	bne.n	80036b8 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	f04f 32ff 	mov.w	r2, #4294967295
 8003628:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d117      	bne.n	8003662 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f000 f846 	bl	80036d0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003644:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003648:	f7ff fe92 	bl	8003370 <FLASH_WaitForLastOperation>
 800364c:	4603      	mov	r3, r0
 800364e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003650:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <HAL_FLASHEx_Erase+0xe0>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4a1d      	ldr	r2, [pc, #116]	; (80036cc <HAL_FLASHEx_Erase+0xe0>)
 8003656:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800365a:	f023 0304 	bic.w	r3, r3, #4
 800365e:	6113      	str	r3, [r2, #16]
 8003660:	e028      	b.n	80036b4 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	e01c      	b.n	80036a4 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	4619      	mov	r1, r3
 8003672:	68b8      	ldr	r0, [r7, #8]
 8003674:	f000 f866 	bl	8003744 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003678:	f24c 3050 	movw	r0, #50000	; 0xc350
 800367c:	f7ff fe78 	bl	8003370 <FLASH_WaitForLastOperation>
 8003680:	4603      	mov	r3, r0
 8003682:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_FLASHEx_Erase+0xe0>)
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	4a10      	ldr	r2, [pc, #64]	; (80036cc <HAL_FLASHEx_Erase+0xe0>)
 800368a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800368e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	601a      	str	r2, [r3, #0]
          break;
 800369c:	e00a      	b.n	80036b4 <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	3301      	adds	r3, #1
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4413      	add	r3, r2
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d3da      	bcc.n	800366a <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80036b4:	f000 f894 	bl	80037e0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_FLASHEx_Erase+0xdc>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	761a      	strb	r2, [r3, #24]

  return status;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	200003a4 	.word	0x200003a4
 80036cc:	40023c00 	.word	0x40023c00

080036d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80036dc:	4b18      	ldr	r3, [pc, #96]	; (8003740 <FLASH_MassErase+0x70>)
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	4a17      	ldr	r2, [pc, #92]	; (8003740 <FLASH_MassErase+0x70>)
 80036e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e6:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d108      	bne.n	8003700 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80036ee:	4b14      	ldr	r3, [pc, #80]	; (8003740 <FLASH_MassErase+0x70>)
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	4a13      	ldr	r2, [pc, #76]	; (8003740 <FLASH_MassErase+0x70>)
 80036f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f8:	f043 0304 	orr.w	r3, r3, #4
 80036fc:	6113      	str	r3, [r2, #16]
 80036fe:	e00f      	b.n	8003720 <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d106      	bne.n	8003714 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003706:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <FLASH_MassErase+0x70>)
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	4a0d      	ldr	r2, [pc, #52]	; (8003740 <FLASH_MassErase+0x70>)
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	6113      	str	r3, [r2, #16]
 8003712:	e005      	b.n	8003720 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <FLASH_MassErase+0x70>)
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	4a09      	ldr	r2, [pc, #36]	; (8003740 <FLASH_MassErase+0x70>)
 800371a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <FLASH_MassErase+0x70>)
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	4313      	orrs	r3, r2
 800372a:	4a05      	ldr	r2, [pc, #20]	; (8003740 <FLASH_MassErase+0x70>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	6113      	str	r3, [r2, #16]
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40023c00 	.word	0x40023c00

08003744 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	e010      	b.n	8003782 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d103      	bne.n	800376e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	e009      	b.n	8003782 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d103      	bne.n	800377c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	e002      	b.n	8003782 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800377c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003780:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b0b      	cmp	r3, #11
 8003786:	d902      	bls.n	800378e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3304      	adds	r3, #4
 800378c:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <FLASH_Erase_Sector+0x98>)
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	4a12      	ldr	r2, [pc, #72]	; (80037dc <FLASH_Erase_Sector+0x98>)
 8003794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003798:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <FLASH_Erase_Sector+0x98>)
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	490f      	ldr	r1, [pc, #60]	; (80037dc <FLASH_Erase_Sector+0x98>)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80037a6:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <FLASH_Erase_Sector+0x98>)
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	4a0c      	ldr	r2, [pc, #48]	; (80037dc <FLASH_Erase_Sector+0x98>)
 80037ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80037b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <FLASH_Erase_Sector+0x98>)
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4313      	orrs	r3, r2
 80037bc:	4a07      	ldr	r2, [pc, #28]	; (80037dc <FLASH_Erase_Sector+0x98>)
 80037be:	f043 0302 	orr.w	r3, r3, #2
 80037c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <FLASH_Erase_Sector+0x98>)
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	4a04      	ldr	r2, [pc, #16]	; (80037dc <FLASH_Erase_Sector+0x98>)
 80037ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ce:	6113      	str	r3, [r2, #16]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40023c00 	.word	0x40023c00

080037e0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80037e4:	4b20      	ldr	r3, [pc, #128]	; (8003868 <FLASH_FlushCaches+0x88>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d017      	beq.n	8003820 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80037f0:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <FLASH_FlushCaches+0x88>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <FLASH_FlushCaches+0x88>)
 80037f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037fa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80037fc:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <FLASH_FlushCaches+0x88>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a19      	ldr	r2, [pc, #100]	; (8003868 <FLASH_FlushCaches+0x88>)
 8003802:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b17      	ldr	r3, [pc, #92]	; (8003868 <FLASH_FlushCaches+0x88>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a16      	ldr	r2, [pc, #88]	; (8003868 <FLASH_FlushCaches+0x88>)
 800380e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003812:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003814:	4b14      	ldr	r3, [pc, #80]	; (8003868 <FLASH_FlushCaches+0x88>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a13      	ldr	r2, [pc, #76]	; (8003868 <FLASH_FlushCaches+0x88>)
 800381a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800381e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <FLASH_FlushCaches+0x88>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d017      	beq.n	800385c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <FLASH_FlushCaches+0x88>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0d      	ldr	r2, [pc, #52]	; (8003868 <FLASH_FlushCaches+0x88>)
 8003832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003836:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <FLASH_FlushCaches+0x88>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <FLASH_FlushCaches+0x88>)
 800383e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <FLASH_FlushCaches+0x88>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a07      	ldr	r2, [pc, #28]	; (8003868 <FLASH_FlushCaches+0x88>)
 800384a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800384e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <FLASH_FlushCaches+0x88>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a04      	ldr	r2, [pc, #16]	; (8003868 <FLASH_FlushCaches+0x88>)
 8003856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800385a:	6013      	str	r3, [r2, #0]
  }
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40023c00 	.word	0x40023c00

0800386c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800386c:	b480      	push	{r7}
 800386e:	b089      	sub	sp, #36	; 0x24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	e177      	b.n	8003b78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003888:	2201      	movs	r2, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4013      	ands	r3, r2
 800389a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	f040 8166 	bne.w	8003b72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d00b      	beq.n	80038c6 <HAL_GPIO_Init+0x5a>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d007      	beq.n	80038c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038ba:	2b11      	cmp	r3, #17
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b12      	cmp	r3, #18
 80038c4:	d130      	bne.n	8003928 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	2203      	movs	r2, #3
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4013      	ands	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038fc:	2201      	movs	r2, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 0201 	and.w	r2, r3, #1
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	2203      	movs	r2, #3
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0xfc>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b12      	cmp	r3, #18
 8003966:	d123      	bne.n	80039b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	08da      	lsrs	r2, r3, #3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3208      	adds	r2, #8
 8003970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	220f      	movs	r2, #15
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	69b9      	ldr	r1, [r7, #24]
 80039ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	2203      	movs	r2, #3
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0203 	and.w	r2, r3, #3
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80c0 	beq.w	8003b72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	4b65      	ldr	r3, [pc, #404]	; (8003b8c <HAL_GPIO_Init+0x320>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	4a64      	ldr	r2, [pc, #400]	; (8003b8c <HAL_GPIO_Init+0x320>)
 80039fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a00:	6453      	str	r3, [r2, #68]	; 0x44
 8003a02:	4b62      	ldr	r3, [pc, #392]	; (8003b8c <HAL_GPIO_Init+0x320>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a0e:	4a60      	ldr	r2, [pc, #384]	; (8003b90 <HAL_GPIO_Init+0x324>)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	3302      	adds	r3, #2
 8003a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	220f      	movs	r2, #15
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a57      	ldr	r2, [pc, #348]	; (8003b94 <HAL_GPIO_Init+0x328>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d037      	beq.n	8003aaa <HAL_GPIO_Init+0x23e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a56      	ldr	r2, [pc, #344]	; (8003b98 <HAL_GPIO_Init+0x32c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d031      	beq.n	8003aa6 <HAL_GPIO_Init+0x23a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a55      	ldr	r2, [pc, #340]	; (8003b9c <HAL_GPIO_Init+0x330>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d02b      	beq.n	8003aa2 <HAL_GPIO_Init+0x236>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a54      	ldr	r2, [pc, #336]	; (8003ba0 <HAL_GPIO_Init+0x334>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d025      	beq.n	8003a9e <HAL_GPIO_Init+0x232>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a53      	ldr	r2, [pc, #332]	; (8003ba4 <HAL_GPIO_Init+0x338>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01f      	beq.n	8003a9a <HAL_GPIO_Init+0x22e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a52      	ldr	r2, [pc, #328]	; (8003ba8 <HAL_GPIO_Init+0x33c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d019      	beq.n	8003a96 <HAL_GPIO_Init+0x22a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a51      	ldr	r2, [pc, #324]	; (8003bac <HAL_GPIO_Init+0x340>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <HAL_GPIO_Init+0x226>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a50      	ldr	r2, [pc, #320]	; (8003bb0 <HAL_GPIO_Init+0x344>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00d      	beq.n	8003a8e <HAL_GPIO_Init+0x222>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a4f      	ldr	r2, [pc, #316]	; (8003bb4 <HAL_GPIO_Init+0x348>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d007      	beq.n	8003a8a <HAL_GPIO_Init+0x21e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a4e      	ldr	r2, [pc, #312]	; (8003bb8 <HAL_GPIO_Init+0x34c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d101      	bne.n	8003a86 <HAL_GPIO_Init+0x21a>
 8003a82:	2309      	movs	r3, #9
 8003a84:	e012      	b.n	8003aac <HAL_GPIO_Init+0x240>
 8003a86:	230a      	movs	r3, #10
 8003a88:	e010      	b.n	8003aac <HAL_GPIO_Init+0x240>
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	e00e      	b.n	8003aac <HAL_GPIO_Init+0x240>
 8003a8e:	2307      	movs	r3, #7
 8003a90:	e00c      	b.n	8003aac <HAL_GPIO_Init+0x240>
 8003a92:	2306      	movs	r3, #6
 8003a94:	e00a      	b.n	8003aac <HAL_GPIO_Init+0x240>
 8003a96:	2305      	movs	r3, #5
 8003a98:	e008      	b.n	8003aac <HAL_GPIO_Init+0x240>
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	e006      	b.n	8003aac <HAL_GPIO_Init+0x240>
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e004      	b.n	8003aac <HAL_GPIO_Init+0x240>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e002      	b.n	8003aac <HAL_GPIO_Init+0x240>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_GPIO_Init+0x240>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	f002 0203 	and.w	r2, r2, #3
 8003ab2:	0092      	lsls	r2, r2, #2
 8003ab4:	4093      	lsls	r3, r2
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003abc:	4934      	ldr	r1, [pc, #208]	; (8003b90 <HAL_GPIO_Init+0x324>)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	089b      	lsrs	r3, r3, #2
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aca:	4b3c      	ldr	r3, [pc, #240]	; (8003bbc <HAL_GPIO_Init+0x350>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aee:	4a33      	ldr	r2, [pc, #204]	; (8003bbc <HAL_GPIO_Init+0x350>)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003af4:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_GPIO_Init+0x350>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b18:	4a28      	ldr	r2, [pc, #160]	; (8003bbc <HAL_GPIO_Init+0x350>)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b1e:	4b27      	ldr	r3, [pc, #156]	; (8003bbc <HAL_GPIO_Init+0x350>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	43db      	mvns	r3, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b42:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <HAL_GPIO_Init+0x350>)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b48:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <HAL_GPIO_Init+0x350>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b6c:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <HAL_GPIO_Init+0x350>)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3301      	adds	r3, #1
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	2b0f      	cmp	r3, #15
 8003b7c:	f67f ae84 	bls.w	8003888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b80:	bf00      	nop
 8003b82:	3724      	adds	r7, #36	; 0x24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40013800 	.word	0x40013800
 8003b94:	40020000 	.word	0x40020000
 8003b98:	40020400 	.word	0x40020400
 8003b9c:	40020800 	.word	0x40020800
 8003ba0:	40020c00 	.word	0x40020c00
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40021400 	.word	0x40021400
 8003bac:	40021800 	.word	0x40021800
 8003bb0:	40021c00 	.word	0x40021c00
 8003bb4:	40022000 	.word	0x40022000
 8003bb8:	40022400 	.word	0x40022400
 8003bbc:	40013c00 	.word	0x40013c00

08003bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	887b      	ldrh	r3, [r7, #2]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
 8003bdc:	e001      	b.n	8003be2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bfa:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d006      	beq.n	8003c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c06:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd f8bc 	bl	8000d8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40013c00 	.word	0x40013c00

08003c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e11f      	b.n	8003e72 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fe f94c 	bl	8001ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	; 0x24
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c84:	f001 f9c8 	bl	8005018 <HAL_RCC_GetPCLK1Freq>
 8003c88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4a7b      	ldr	r2, [pc, #492]	; (8003e7c <HAL_I2C_Init+0x25c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d807      	bhi.n	8003ca4 <HAL_I2C_Init+0x84>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a7a      	ldr	r2, [pc, #488]	; (8003e80 <HAL_I2C_Init+0x260>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	bf94      	ite	ls
 8003c9c:	2301      	movls	r3, #1
 8003c9e:	2300      	movhi	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e006      	b.n	8003cb2 <HAL_I2C_Init+0x92>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4a77      	ldr	r2, [pc, #476]	; (8003e84 <HAL_I2C_Init+0x264>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	bf94      	ite	ls
 8003cac:	2301      	movls	r3, #1
 8003cae:	2300      	movhi	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e0db      	b.n	8003e72 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4a72      	ldr	r2, [pc, #456]	; (8003e88 <HAL_I2C_Init+0x268>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	0c9b      	lsrs	r3, r3, #18
 8003cc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4a64      	ldr	r2, [pc, #400]	; (8003e7c <HAL_I2C_Init+0x25c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d802      	bhi.n	8003cf4 <HAL_I2C_Init+0xd4>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	e009      	b.n	8003d08 <HAL_I2C_Init+0xe8>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	4a63      	ldr	r2, [pc, #396]	; (8003e8c <HAL_I2C_Init+0x26c>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	3301      	adds	r3, #1
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4956      	ldr	r1, [pc, #344]	; (8003e7c <HAL_I2C_Init+0x25c>)
 8003d24:	428b      	cmp	r3, r1
 8003d26:	d80d      	bhi.n	8003d44 <HAL_I2C_Init+0x124>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e59      	subs	r1, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d36:	3301      	adds	r3, #1
 8003d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	bf38      	it	cc
 8003d40:	2304      	movcc	r3, #4
 8003d42:	e04f      	b.n	8003de4 <HAL_I2C_Init+0x1c4>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d111      	bne.n	8003d70 <HAL_I2C_Init+0x150>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1e58      	subs	r0, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	440b      	add	r3, r1
 8003d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e012      	b.n	8003d96 <HAL_I2C_Init+0x176>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1e58      	subs	r0, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	0099      	lsls	r1, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Init+0x17e>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e022      	b.n	8003de4 <HAL_I2C_Init+0x1c4>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10e      	bne.n	8003dc4 <HAL_I2C_Init+0x1a4>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1e58      	subs	r0, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	440b      	add	r3, r1
 8003db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc2:	e00f      	b.n	8003de4 <HAL_I2C_Init+0x1c4>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1e58      	subs	r0, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	0099      	lsls	r1, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	6809      	ldr	r1, [r1, #0]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6911      	ldr	r1, [r2, #16]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68d2      	ldr	r2, [r2, #12]
 8003e1e:	4311      	orrs	r1, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	000186a0 	.word	0x000186a0
 8003e80:	001e847f 	.word	0x001e847f
 8003e84:	003d08ff 	.word	0x003d08ff
 8003e88:	431bde83 	.word	0x431bde83
 8003e8c:	10624dd3 	.word	0x10624dd3

08003e90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	817b      	strh	r3, [r7, #10]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ea4:	f7fe fc3c 	bl	8002720 <HAL_GetTick>
 8003ea8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	f040 80e0 	bne.w	8004078 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2319      	movs	r3, #25
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4970      	ldr	r1, [pc, #448]	; (8004084 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fa92 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e0d3      	b.n	800407a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_I2C_Master_Transmit+0x50>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e0cc      	b.n	800407a <HAL_I2C_Master_Transmit+0x1ea>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d007      	beq.n	8003f06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2221      	movs	r2, #33	; 0x21
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2210      	movs	r2, #16
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	893a      	ldrh	r2, [r7, #8]
 8003f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4a50      	ldr	r2, [pc, #320]	; (8004088 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f48:	8979      	ldrh	r1, [r7, #10]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	6a3a      	ldr	r2, [r7, #32]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f9ca 	bl	80042e8 <I2C_MasterRequestWrite>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e08d      	b.n	800407a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f74:	e066      	b.n	8004044 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	6a39      	ldr	r1, [r7, #32]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fb0c 	bl	8004598 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d107      	bne.n	8003f9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e06b      	b.n	800407a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	781a      	ldrb	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d11b      	bne.n	8004018 <HAL_I2C_Master_Transmit+0x188>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d017      	beq.n	8004018 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	781a      	ldrb	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	6a39      	ldr	r1, [r7, #32]
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 fafc 	bl	800461a <I2C_WaitOnBTFFlagUntilTimeout>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00d      	beq.n	8004044 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	2b04      	cmp	r3, #4
 800402e:	d107      	bne.n	8004040 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e01a      	b.n	800407a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004048:	2b00      	cmp	r3, #0
 800404a:	d194      	bne.n	8003f76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	00100002 	.word	0x00100002
 8004088:	ffff0000 	.word	0xffff0000

0800408c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af02      	add	r7, sp, #8
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	460b      	mov	r3, r1
 800409a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800409c:	f7fe fb40 	bl	8002720 <HAL_GetTick>
 80040a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80040a2:	2301      	movs	r3, #1
 80040a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	f040 8111 	bne.w	80042d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2319      	movs	r3, #25
 80040ba:	2201      	movs	r2, #1
 80040bc:	4988      	ldr	r1, [pc, #544]	; (80042e0 <HAL_I2C_IsDeviceReady+0x254>)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f994 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
 80040cc:	e104      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_I2C_IsDeviceReady+0x50>
 80040d8:	2302      	movs	r3, #2
 80040da:	e0fd      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d007      	beq.n	8004102 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0201 	orr.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004110:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2224      	movs	r2, #36	; 0x24
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a70      	ldr	r2, [pc, #448]	; (80042e4 <HAL_I2C_IsDeviceReady+0x258>)
 8004124:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004134:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2200      	movs	r2, #0
 800413e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f952 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00d      	beq.n	800416a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415c:	d103      	bne.n	8004166 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e0b6      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800416a:	897b      	ldrh	r3, [r7, #10]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004178:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800417a:	f7fe fad1 	bl	8002720 <HAL_GetTick>
 800417e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b02      	cmp	r3, #2
 800418c:	bf0c      	ite	eq
 800418e:	2301      	moveq	r3, #1
 8004190:	2300      	movne	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a4:	bf0c      	ite	eq
 80041a6:	2301      	moveq	r3, #1
 80041a8:	2300      	movne	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041ae:	e025      	b.n	80041fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041b0:	f7fe fab6 	bl	8002720 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d302      	bcc.n	80041c6 <HAL_I2C_IsDeviceReady+0x13a>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d103      	bne.n	80041ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	22a0      	movs	r2, #160	; 0xa0
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b02      	cmp	r3, #2
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2ba0      	cmp	r3, #160	; 0xa0
 8004206:	d005      	beq.n	8004214 <HAL_I2C_IsDeviceReady+0x188>
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d102      	bne.n	8004214 <HAL_I2C_IsDeviceReady+0x188>
 800420e:	7dbb      	ldrb	r3, [r7, #22]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0cd      	beq.n	80041b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b02      	cmp	r3, #2
 8004228:	d129      	bne.n	800427e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004238:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2319      	movs	r3, #25
 8004256:	2201      	movs	r2, #1
 8004258:	4921      	ldr	r1, [pc, #132]	; (80042e0 <HAL_I2C_IsDeviceReady+0x254>)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f8c6 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e036      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e02c      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004296:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	2319      	movs	r3, #25
 800429e:	2201      	movs	r2, #1
 80042a0:	490f      	ldr	r1, [pc, #60]	; (80042e0 <HAL_I2C_IsDeviceReady+0x254>)
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f8a2 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e012      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	3301      	adds	r3, #1
 80042b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	f4ff af32 	bcc.w	8004126 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80042d6:	2302      	movs	r3, #2
  }
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3720      	adds	r7, #32
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	00100002 	.word	0x00100002
 80042e4:	ffff0000 	.word	0xffff0000

080042e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	460b      	mov	r3, r1
 80042f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b08      	cmp	r3, #8
 8004302:	d006      	beq.n	8004312 <I2C_MasterRequestWrite+0x2a>
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d003      	beq.n	8004312 <I2C_MasterRequestWrite+0x2a>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004310:	d108      	bne.n	8004324 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e00b      	b.n	800433c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	2b12      	cmp	r3, #18
 800432a:	d107      	bne.n	800433c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800433a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f84f 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00d      	beq.n	8004370 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004362:	d103      	bne.n	800436c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e035      	b.n	80043dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004378:	d108      	bne.n	800438c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800437a:	897b      	ldrh	r3, [r7, #10]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004388:	611a      	str	r2, [r3, #16]
 800438a:	e01b      	b.n	80043c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800438c:	897b      	ldrh	r3, [r7, #10]
 800438e:	11db      	asrs	r3, r3, #7
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f003 0306 	and.w	r3, r3, #6
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f063 030f 	orn	r3, r3, #15
 800439c:	b2da      	uxtb	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	490e      	ldr	r1, [pc, #56]	; (80043e4 <I2C_MasterRequestWrite+0xfc>)
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f875 	bl	800449a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e010      	b.n	80043dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043ba:	897b      	ldrh	r3, [r7, #10]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	4907      	ldr	r1, [pc, #28]	; (80043e8 <I2C_MasterRequestWrite+0x100>)
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f865 	bl	800449a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	00010008 	.word	0x00010008
 80043e8:	00010002 	.word	0x00010002

080043ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fc:	e025      	b.n	800444a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d021      	beq.n	800444a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004406:	f7fe f98b 	bl	8002720 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d116      	bne.n	800444a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f043 0220 	orr.w	r2, r3, #32
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e023      	b.n	8004492 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d10d      	bne.n	8004470 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	43da      	mvns	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	e00c      	b.n	800448a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	43da      	mvns	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4013      	ands	r3, r2
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	bf0c      	ite	eq
 8004482:	2301      	moveq	r3, #1
 8004484:	2300      	movne	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	429a      	cmp	r2, r3
 800448e:	d0b6      	beq.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044a8:	e051      	b.n	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b8:	d123      	bne.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f043 0204 	orr.w	r2, r3, #4
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e046      	b.n	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d021      	beq.n	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fe f909 	bl	8002720 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d116      	bne.n	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e020      	b.n	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	d10c      	bne.n	8004572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	43da      	mvns	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4013      	ands	r3, r2
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	bf14      	ite	ne
 800456a:	2301      	movne	r3, #1
 800456c:	2300      	moveq	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	e00b      	b.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	43da      	mvns	r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4013      	ands	r3, r2
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf14      	ite	ne
 8004584:	2301      	movne	r3, #1
 8004586:	2300      	moveq	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d18d      	bne.n	80044aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a4:	e02d      	b.n	8004602 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f878 	bl	800469c <I2C_IsAcknowledgeFailed>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e02d      	b.n	8004612 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d021      	beq.n	8004602 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7fe f8af 	bl	8002720 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d116      	bne.n	8004602 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f043 0220 	orr.w	r2, r3, #32
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e007      	b.n	8004612 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460c:	2b80      	cmp	r3, #128	; 0x80
 800460e:	d1ca      	bne.n	80045a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004626:	e02d      	b.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f837 	bl	800469c <I2C_IsAcknowledgeFailed>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e02d      	b.n	8004694 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d021      	beq.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004640:	f7fe f86e 	bl	8002720 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	429a      	cmp	r2, r3
 800464e:	d302      	bcc.n	8004656 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d116      	bne.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f043 0220 	orr.w	r2, r3, #32
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e007      	b.n	8004694 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b04      	cmp	r3, #4
 8004690:	d1ca      	bne.n	8004628 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b2:	d11b      	bne.n	80046ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	f043 0204 	orr.w	r2, r3, #4
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b20      	cmp	r3, #32
 800470e:	d129      	bne.n	8004764 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2224      	movs	r2, #36	; 0x24
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0210 	bic.w	r2, r2, #16
 8004736:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	e000      	b.n	8004766 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004764:	2302      	movs	r3, #2
  }
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b20      	cmp	r3, #32
 800478a:	d12a      	bne.n	80047e2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2224      	movs	r2, #36	; 0x24
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80047ac:	89fb      	ldrh	r3, [r7, #14]
 80047ae:	f023 030f 	bic.w	r3, r3, #15
 80047b2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	89fb      	ldrh	r3, [r7, #14]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	89fa      	ldrh	r2, [r7, #14]
 80047c4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0201 	orr.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e000      	b.n	80047e4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
  }
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e25b      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d075      	beq.n	80048fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800480e:	4ba3      	ldr	r3, [pc, #652]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b04      	cmp	r3, #4
 8004818:	d00c      	beq.n	8004834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800481a:	4ba0      	ldr	r3, [pc, #640]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004822:	2b08      	cmp	r3, #8
 8004824:	d112      	bne.n	800484c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004826:	4b9d      	ldr	r3, [pc, #628]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004832:	d10b      	bne.n	800484c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004834:	4b99      	ldr	r3, [pc, #612]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d05b      	beq.n	80048f8 <HAL_RCC_OscConfig+0x108>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d157      	bne.n	80048f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e236      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004854:	d106      	bne.n	8004864 <HAL_RCC_OscConfig+0x74>
 8004856:	4b91      	ldr	r3, [pc, #580]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a90      	ldr	r2, [pc, #576]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800485c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e01d      	b.n	80048a0 <HAL_RCC_OscConfig+0xb0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800486c:	d10c      	bne.n	8004888 <HAL_RCC_OscConfig+0x98>
 800486e:	4b8b      	ldr	r3, [pc, #556]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a8a      	ldr	r2, [pc, #552]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	4b88      	ldr	r3, [pc, #544]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a87      	ldr	r2, [pc, #540]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e00b      	b.n	80048a0 <HAL_RCC_OscConfig+0xb0>
 8004888:	4b84      	ldr	r3, [pc, #528]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a83      	ldr	r2, [pc, #524]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800488e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	4b81      	ldr	r3, [pc, #516]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a80      	ldr	r2, [pc, #512]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800489a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800489e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d013      	beq.n	80048d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fd ff3a 	bl	8002720 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fd ff36 	bl	8002720 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e1fb      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	4b76      	ldr	r3, [pc, #472]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0xc0>
 80048ce:	e014      	b.n	80048fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fd ff26 	bl	8002720 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048d8:	f7fd ff22 	bl	8002720 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b64      	cmp	r3, #100	; 0x64
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e1e7      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ea:	4b6c      	ldr	r3, [pc, #432]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0xe8>
 80048f6:	e000      	b.n	80048fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d063      	beq.n	80049ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004906:	4b65      	ldr	r3, [pc, #404]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004912:	4b62      	ldr	r3, [pc, #392]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491a:	2b08      	cmp	r3, #8
 800491c:	d11c      	bne.n	8004958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800491e:	4b5f      	ldr	r3, [pc, #380]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d116      	bne.n	8004958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492a:	4b5c      	ldr	r3, [pc, #368]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_RCC_OscConfig+0x152>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d001      	beq.n	8004942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e1bb      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004942:	4b56      	ldr	r3, [pc, #344]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	4952      	ldr	r1, [pc, #328]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	e03a      	b.n	80049ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d020      	beq.n	80049a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004960:	4b4f      	ldr	r3, [pc, #316]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004966:	f7fd fedb 	bl	8002720 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800496e:	f7fd fed7 	bl	8002720 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e19c      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004980:	4b46      	ldr	r3, [pc, #280]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498c:	4b43      	ldr	r3, [pc, #268]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4940      	ldr	r1, [pc, #256]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800499c:	4313      	orrs	r3, r2
 800499e:	600b      	str	r3, [r1, #0]
 80049a0:	e015      	b.n	80049ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a2:	4b3f      	ldr	r3, [pc, #252]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7fd feba 	bl	8002720 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049b0:	f7fd feb6 	bl	8002720 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e17b      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c2:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d030      	beq.n	8004a3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e2:	4b30      	ldr	r3, [pc, #192]	; (8004aa4 <HAL_RCC_OscConfig+0x2b4>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e8:	f7fd fe9a 	bl	8002720 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f0:	f7fd fe96 	bl	8002720 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e15b      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a02:	4b26      	ldr	r3, [pc, #152]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x200>
 8004a0e:	e015      	b.n	8004a3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a10:	4b24      	ldr	r3, [pc, #144]	; (8004aa4 <HAL_RCC_OscConfig+0x2b4>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a16:	f7fd fe83 	bl	8002720 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1e:	f7fd fe7f 	bl	8002720 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e144      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a30:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f0      	bne.n	8004a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80a0 	beq.w	8004b8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10f      	bne.n	8004a7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	4a0e      	ldr	r2, [pc, #56]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a68:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a72:	60bb      	str	r3, [r7, #8]
 8004a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a76:	2301      	movs	r3, #1
 8004a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_OscConfig+0x2b8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d121      	bne.n	8004aca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a86:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <HAL_RCC_OscConfig+0x2b8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a07      	ldr	r2, [pc, #28]	; (8004aa8 <HAL_RCC_OscConfig+0x2b8>)
 8004a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a92:	f7fd fe45 	bl	8002720 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a98:	e011      	b.n	8004abe <HAL_RCC_OscConfig+0x2ce>
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	42470000 	.word	0x42470000
 8004aa4:	42470e80 	.word	0x42470e80
 8004aa8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aac:	f7fd fe38 	bl	8002720 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e0fd      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004abe:	4b81      	ldr	r3, [pc, #516]	; (8004cc4 <HAL_RCC_OscConfig+0x4d4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d106      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x2f0>
 8004ad2:	4b7d      	ldr	r3, [pc, #500]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad6:	4a7c      	ldr	r2, [pc, #496]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ade:	e01c      	b.n	8004b1a <HAL_RCC_OscConfig+0x32a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b05      	cmp	r3, #5
 8004ae6:	d10c      	bne.n	8004b02 <HAL_RCC_OscConfig+0x312>
 8004ae8:	4b77      	ldr	r3, [pc, #476]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	4a76      	ldr	r2, [pc, #472]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004aee:	f043 0304 	orr.w	r3, r3, #4
 8004af2:	6713      	str	r3, [r2, #112]	; 0x70
 8004af4:	4b74      	ldr	r3, [pc, #464]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	4a73      	ldr	r2, [pc, #460]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	6713      	str	r3, [r2, #112]	; 0x70
 8004b00:	e00b      	b.n	8004b1a <HAL_RCC_OscConfig+0x32a>
 8004b02:	4b71      	ldr	r3, [pc, #452]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	4a70      	ldr	r2, [pc, #448]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0e:	4b6e      	ldr	r3, [pc, #440]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	4a6d      	ldr	r2, [pc, #436]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b14:	f023 0304 	bic.w	r3, r3, #4
 8004b18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d015      	beq.n	8004b4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b22:	f7fd fdfd 	bl	8002720 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b28:	e00a      	b.n	8004b40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b2a:	f7fd fdf9 	bl	8002720 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e0bc      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b40:	4b61      	ldr	r3, [pc, #388]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ee      	beq.n	8004b2a <HAL_RCC_OscConfig+0x33a>
 8004b4c:	e014      	b.n	8004b78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4e:	f7fd fde7 	bl	8002720 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b56:	f7fd fde3 	bl	8002720 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e0a6      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b6c:	4b56      	ldr	r3, [pc, #344]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1ee      	bne.n	8004b56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d105      	bne.n	8004b8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7e:	4b52      	ldr	r3, [pc, #328]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	4a51      	ldr	r2, [pc, #324]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8092 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b94:	4b4c      	ldr	r3, [pc, #304]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d05c      	beq.n	8004c5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d141      	bne.n	8004c2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba8:	4b48      	ldr	r3, [pc, #288]	; (8004ccc <HAL_RCC_OscConfig+0x4dc>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bae:	f7fd fdb7 	bl	8002720 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb6:	f7fd fdb3 	bl	8002720 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e078      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc8:	4b3f      	ldr	r3, [pc, #252]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f0      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	019b      	lsls	r3, r3, #6
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	3b01      	subs	r3, #1
 8004bee:	041b      	lsls	r3, r3, #16
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	061b      	lsls	r3, r3, #24
 8004bf8:	4933      	ldr	r1, [pc, #204]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bfe:	4b33      	ldr	r3, [pc, #204]	; (8004ccc <HAL_RCC_OscConfig+0x4dc>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7fd fd8c 	bl	8002720 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c0c:	f7fd fd88 	bl	8002720 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e04d      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1e:	4b2a      	ldr	r3, [pc, #168]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0x41c>
 8004c2a:	e045      	b.n	8004cb8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2c:	4b27      	ldr	r3, [pc, #156]	; (8004ccc <HAL_RCC_OscConfig+0x4dc>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c32:	f7fd fd75 	bl	8002720 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3a:	f7fd fd71 	bl	8002720 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e036      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4c:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f0      	bne.n	8004c3a <HAL_RCC_OscConfig+0x44a>
 8004c58:	e02e      	b.n	8004cb8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e029      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c66:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d11c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d115      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c8e:	4013      	ands	r3, r2
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d10d      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d106      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40007000 	.word	0x40007000
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	42470060 	.word	0x42470060

08004cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0cc      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce4:	4b68      	ldr	r3, [pc, #416]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 030f 	and.w	r3, r3, #15
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d90c      	bls.n	8004d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf2:	4b65      	ldr	r3, [pc, #404]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	4b63      	ldr	r3, [pc, #396]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0b8      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d020      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d24:	4b59      	ldr	r3, [pc, #356]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	4a58      	ldr	r2, [pc, #352]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d3c:	4b53      	ldr	r3, [pc, #332]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	4a52      	ldr	r2, [pc, #328]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d48:	4b50      	ldr	r3, [pc, #320]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	494d      	ldr	r1, [pc, #308]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d044      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d107      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6e:	4b47      	ldr	r3, [pc, #284]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d119      	bne.n	8004dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e07f      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d003      	beq.n	8004d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d8e:	4b3f      	ldr	r3, [pc, #252]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e06f      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9e:	4b3b      	ldr	r3, [pc, #236]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e067      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dae:	4b37      	ldr	r3, [pc, #220]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f023 0203 	bic.w	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4934      	ldr	r1, [pc, #208]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc0:	f7fd fcae 	bl	8002720 <HAL_GetTick>
 8004dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc6:	e00a      	b.n	8004dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc8:	f7fd fcaa 	bl	8002720 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e04f      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dde:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 020c 	and.w	r2, r3, #12
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d1eb      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004df0:	4b25      	ldr	r3, [pc, #148]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d20c      	bcs.n	8004e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfe:	4b22      	ldr	r3, [pc, #136]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b20      	ldr	r3, [pc, #128]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e032      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4916      	ldr	r1, [pc, #88]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	490e      	ldr	r1, [pc, #56]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e56:	f000 f821 	bl	8004e9c <HAL_RCC_GetSysClockFreq>
 8004e5a:	4601      	mov	r1, r0
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <HAL_RCC_ClockConfig+0x1c0>)
 8004e68:	5cd3      	ldrb	r3, [r2, r3]
 8004e6a:	fa21 f303 	lsr.w	r3, r1, r3
 8004e6e:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e72:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <HAL_RCC_ClockConfig+0x1c8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fd fc0e 	bl	8002698 <HAL_InitTick>

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40023c00 	.word	0x40023c00
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	08007080 	.word	0x08007080
 8004e94:	200000d8 	.word	0x200000d8
 8004e98:	200000dc 	.word	0x200000dc

08004e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb2:	4b50      	ldr	r3, [pc, #320]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d007      	beq.n	8004ece <HAL_RCC_GetSysClockFreq+0x32>
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d008      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x38>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f040 808d 	bne.w	8004fe2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ec8:	4b4b      	ldr	r3, [pc, #300]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004eca:	60bb      	str	r3, [r7, #8]
       break;
 8004ecc:	e08c      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ece:	4b4b      	ldr	r3, [pc, #300]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ed0:	60bb      	str	r3, [r7, #8]
      break;
 8004ed2:	e089      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ed4:	4b47      	ldr	r3, [pc, #284]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004edc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ede:	4b45      	ldr	r3, [pc, #276]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d023      	beq.n	8004f32 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eea:	4b42      	ldr	r3, [pc, #264]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	099b      	lsrs	r3, r3, #6
 8004ef0:	f04f 0400 	mov.w	r4, #0
 8004ef4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	ea03 0501 	and.w	r5, r3, r1
 8004f00:	ea04 0602 	and.w	r6, r4, r2
 8004f04:	4a3d      	ldr	r2, [pc, #244]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8004f06:	fb02 f106 	mul.w	r1, r2, r6
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	fb02 f205 	mul.w	r2, r2, r5
 8004f10:	440a      	add	r2, r1
 8004f12:	493a      	ldr	r1, [pc, #232]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8004f14:	fba5 0101 	umull	r0, r1, r5, r1
 8004f18:	1853      	adds	r3, r2, r1
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f04f 0400 	mov.w	r4, #0
 8004f22:	461a      	mov	r2, r3
 8004f24:	4623      	mov	r3, r4
 8004f26:	f7fb fdb1 	bl	8000a8c <__aeabi_uldivmod>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e049      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f32:	4b30      	ldr	r3, [pc, #192]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	f04f 0400 	mov.w	r4, #0
 8004f3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	ea03 0501 	and.w	r5, r3, r1
 8004f48:	ea04 0602 	and.w	r6, r4, r2
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	4632      	mov	r2, r6
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	f04f 0400 	mov.w	r4, #0
 8004f58:	0154      	lsls	r4, r2, #5
 8004f5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f5e:	014b      	lsls	r3, r1, #5
 8004f60:	4619      	mov	r1, r3
 8004f62:	4622      	mov	r2, r4
 8004f64:	1b49      	subs	r1, r1, r5
 8004f66:	eb62 0206 	sbc.w	r2, r2, r6
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	f04f 0400 	mov.w	r4, #0
 8004f72:	0194      	lsls	r4, r2, #6
 8004f74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f78:	018b      	lsls	r3, r1, #6
 8004f7a:	1a5b      	subs	r3, r3, r1
 8004f7c:	eb64 0402 	sbc.w	r4, r4, r2
 8004f80:	f04f 0100 	mov.w	r1, #0
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	00e2      	lsls	r2, r4, #3
 8004f8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f8e:	00d9      	lsls	r1, r3, #3
 8004f90:	460b      	mov	r3, r1
 8004f92:	4614      	mov	r4, r2
 8004f94:	195b      	adds	r3, r3, r5
 8004f96:	eb44 0406 	adc.w	r4, r4, r6
 8004f9a:	f04f 0100 	mov.w	r1, #0
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	02a2      	lsls	r2, r4, #10
 8004fa4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004fa8:	0299      	lsls	r1, r3, #10
 8004faa:	460b      	mov	r3, r1
 8004fac:	4614      	mov	r4, r2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f04f 0400 	mov.w	r4, #0
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4623      	mov	r3, r4
 8004fbc:	f7fb fd66 	bl	8000a8c <__aeabi_uldivmod>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fde:	60bb      	str	r3, [r7, #8]
      break;
 8004fe0:	e002      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fe2:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004fe4:	60bb      	str	r3, [r7, #8]
      break;
 8004fe6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	00f42400 	.word	0x00f42400
 8004ffc:	017d7840 	.word	0x017d7840

08005000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <HAL_RCC_GetHCLKFreq+0x14>)
 8005006:	681b      	ldr	r3, [r3, #0]
}
 8005008:	4618      	mov	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	200000d8 	.word	0x200000d8

08005018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800501c:	f7ff fff0 	bl	8005000 <HAL_RCC_GetHCLKFreq>
 8005020:	4601      	mov	r1, r0
 8005022:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	0a9b      	lsrs	r3, r3, #10
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	4a03      	ldr	r2, [pc, #12]	; (800503c <HAL_RCC_GetPCLK1Freq+0x24>)
 800502e:	5cd3      	ldrb	r3, [r2, r3]
 8005030:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005034:	4618      	mov	r0, r3
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40023800 	.word	0x40023800
 800503c:	08007090 	.word	0x08007090

08005040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005044:	f7ff ffdc 	bl	8005000 <HAL_RCC_GetHCLKFreq>
 8005048:	4601      	mov	r1, r0
 800504a:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	0b5b      	lsrs	r3, r3, #13
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4a03      	ldr	r2, [pc, #12]	; (8005064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005056:	5cd3      	ldrb	r3, [r2, r3]
 8005058:	fa21 f303 	lsr.w	r3, r1, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40023800 	.word	0x40023800
 8005064:	08007090 	.word	0x08007090

08005068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e01d      	b.n	80050b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fc ff70 	bl	8001f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f000 fa14 	bl	80054d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b06      	cmp	r3, #6
 80050e6:	d007      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b02      	cmp	r3, #2
 800511a:	d122      	bne.n	8005162 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b02      	cmp	r3, #2
 8005128:	d11b      	bne.n	8005162 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f06f 0202 	mvn.w	r2, #2
 8005132:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f003 0303 	and.w	r3, r3, #3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f9a5 	bl	8005498 <HAL_TIM_IC_CaptureCallback>
 800514e:	e005      	b.n	800515c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f997 	bl	8005484 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f9a8 	bl	80054ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b04      	cmp	r3, #4
 800516e:	d122      	bne.n	80051b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b04      	cmp	r3, #4
 800517c:	d11b      	bne.n	80051b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f06f 0204 	mvn.w	r2, #4
 8005186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f97b 	bl	8005498 <HAL_TIM_IC_CaptureCallback>
 80051a2:	e005      	b.n	80051b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f96d 	bl	8005484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f97e 	bl	80054ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d122      	bne.n	800520a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d11b      	bne.n	800520a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f06f 0208 	mvn.w	r2, #8
 80051da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2204      	movs	r2, #4
 80051e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f951 	bl	8005498 <HAL_TIM_IC_CaptureCallback>
 80051f6:	e005      	b.n	8005204 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f943 	bl	8005484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f954 	bl	80054ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b10      	cmp	r3, #16
 8005216:	d122      	bne.n	800525e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0310 	and.w	r3, r3, #16
 8005222:	2b10      	cmp	r3, #16
 8005224:	d11b      	bne.n	800525e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f06f 0210 	mvn.w	r2, #16
 800522e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2208      	movs	r2, #8
 8005234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f927 	bl	8005498 <HAL_TIM_IC_CaptureCallback>
 800524a:	e005      	b.n	8005258 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f919 	bl	8005484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f92a 	bl	80054ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b01      	cmp	r3, #1
 800526a:	d10e      	bne.n	800528a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b01      	cmp	r3, #1
 8005278:	d107      	bne.n	800528a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f06f 0201 	mvn.w	r2, #1
 8005282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7fc ffc5 	bl	8002214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d10e      	bne.n	80052b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a2:	2b80      	cmp	r3, #128	; 0x80
 80052a4:	d107      	bne.n	80052b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 facf 	bl	8005854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c0:	2b40      	cmp	r3, #64	; 0x40
 80052c2:	d10e      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ce:	2b40      	cmp	r3, #64	; 0x40
 80052d0:	d107      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f8ef 	bl	80054c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b20      	cmp	r3, #32
 80052ee:	d10e      	bne.n	800530e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d107      	bne.n	800530e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f06f 0220 	mvn.w	r2, #32
 8005306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fa99 	bl	8005840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800530e:	bf00      	nop
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_TIM_ConfigClockSource+0x18>
 800532a:	2302      	movs	r3, #2
 800532c:	e0a6      	b.n	800547c <HAL_TIM_ConfigClockSource+0x166>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2202      	movs	r2, #2
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800534c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005354:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b40      	cmp	r3, #64	; 0x40
 8005364:	d067      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x120>
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d80b      	bhi.n	8005382 <HAL_TIM_ConfigClockSource+0x6c>
 800536a:	2b10      	cmp	r3, #16
 800536c:	d073      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x140>
 800536e:	2b10      	cmp	r3, #16
 8005370:	d802      	bhi.n	8005378 <HAL_TIM_ConfigClockSource+0x62>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d06f      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005376:	e078      	b.n	800546a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005378:	2b20      	cmp	r3, #32
 800537a:	d06c      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x140>
 800537c:	2b30      	cmp	r3, #48	; 0x30
 800537e:	d06a      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005380:	e073      	b.n	800546a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005382:	2b70      	cmp	r3, #112	; 0x70
 8005384:	d00d      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x8c>
 8005386:	2b70      	cmp	r3, #112	; 0x70
 8005388:	d804      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x7e>
 800538a:	2b50      	cmp	r3, #80	; 0x50
 800538c:	d033      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0xe0>
 800538e:	2b60      	cmp	r3, #96	; 0x60
 8005390:	d041      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005392:	e06a      	b.n	800546a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005398:	d066      	beq.n	8005468 <HAL_TIM_ConfigClockSource+0x152>
 800539a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539e:	d017      	beq.n	80053d0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80053a0:	e063      	b.n	800546a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6899      	ldr	r1, [r3, #8]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f000 f9a9 	bl	8005708 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	609a      	str	r2, [r3, #8]
      break;
 80053ce:	e04c      	b.n	800546a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	6899      	ldr	r1, [r3, #8]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f000 f992 	bl	8005708 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053f2:	609a      	str	r2, [r3, #8]
      break;
 80053f4:	e039      	b.n	800546a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6859      	ldr	r1, [r3, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	461a      	mov	r2, r3
 8005404:	f000 f906 	bl	8005614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2150      	movs	r1, #80	; 0x50
 800540e:	4618      	mov	r0, r3
 8005410:	f000 f95f 	bl	80056d2 <TIM_ITRx_SetConfig>
      break;
 8005414:	e029      	b.n	800546a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6859      	ldr	r1, [r3, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	461a      	mov	r2, r3
 8005424:	f000 f925 	bl	8005672 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2160      	movs	r1, #96	; 0x60
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f94f 	bl	80056d2 <TIM_ITRx_SetConfig>
      break;
 8005434:	e019      	b.n	800546a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6859      	ldr	r1, [r3, #4]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	461a      	mov	r2, r3
 8005444:	f000 f8e6 	bl	8005614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2140      	movs	r1, #64	; 0x40
 800544e:	4618      	mov	r0, r3
 8005450:	f000 f93f 	bl	80056d2 <TIM_ITRx_SetConfig>
      break;
 8005454:	e009      	b.n	800546a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4619      	mov	r1, r3
 8005460:	4610      	mov	r0, r2
 8005462:	f000 f936 	bl	80056d2 <TIM_ITRx_SetConfig>
      break;
 8005466:	e000      	b.n	800546a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005468:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a40      	ldr	r2, [pc, #256]	; (80055e8 <TIM_Base_SetConfig+0x114>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d013      	beq.n	8005514 <TIM_Base_SetConfig+0x40>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f2:	d00f      	beq.n	8005514 <TIM_Base_SetConfig+0x40>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a3d      	ldr	r2, [pc, #244]	; (80055ec <TIM_Base_SetConfig+0x118>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d00b      	beq.n	8005514 <TIM_Base_SetConfig+0x40>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a3c      	ldr	r2, [pc, #240]	; (80055f0 <TIM_Base_SetConfig+0x11c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d007      	beq.n	8005514 <TIM_Base_SetConfig+0x40>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a3b      	ldr	r2, [pc, #236]	; (80055f4 <TIM_Base_SetConfig+0x120>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_Base_SetConfig+0x40>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a3a      	ldr	r2, [pc, #232]	; (80055f8 <TIM_Base_SetConfig+0x124>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d108      	bne.n	8005526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2f      	ldr	r2, [pc, #188]	; (80055e8 <TIM_Base_SetConfig+0x114>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d02b      	beq.n	8005586 <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005534:	d027      	beq.n	8005586 <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2c      	ldr	r2, [pc, #176]	; (80055ec <TIM_Base_SetConfig+0x118>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d023      	beq.n	8005586 <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a2b      	ldr	r2, [pc, #172]	; (80055f0 <TIM_Base_SetConfig+0x11c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01f      	beq.n	8005586 <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2a      	ldr	r2, [pc, #168]	; (80055f4 <TIM_Base_SetConfig+0x120>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d01b      	beq.n	8005586 <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a29      	ldr	r2, [pc, #164]	; (80055f8 <TIM_Base_SetConfig+0x124>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d017      	beq.n	8005586 <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a28      	ldr	r2, [pc, #160]	; (80055fc <TIM_Base_SetConfig+0x128>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <TIM_Base_SetConfig+0xb2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a27      	ldr	r2, [pc, #156]	; (8005600 <TIM_Base_SetConfig+0x12c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a26      	ldr	r2, [pc, #152]	; (8005604 <TIM_Base_SetConfig+0x130>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a25      	ldr	r2, [pc, #148]	; (8005608 <TIM_Base_SetConfig+0x134>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a24      	ldr	r2, [pc, #144]	; (800560c <TIM_Base_SetConfig+0x138>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a23      	ldr	r2, [pc, #140]	; (8005610 <TIM_Base_SetConfig+0x13c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a0a      	ldr	r2, [pc, #40]	; (80055e8 <TIM_Base_SetConfig+0x114>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d003      	beq.n	80055cc <TIM_Base_SetConfig+0xf8>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a0c      	ldr	r2, [pc, #48]	; (80055f8 <TIM_Base_SetConfig+0x124>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d103      	bne.n	80055d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	615a      	str	r2, [r3, #20]
}
 80055da:	bf00      	nop
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40010000 	.word	0x40010000
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40000c00 	.word	0x40000c00
 80055f8:	40010400 	.word	0x40010400
 80055fc:	40014000 	.word	0x40014000
 8005600:	40014400 	.word	0x40014400
 8005604:	40014800 	.word	0x40014800
 8005608:	40001800 	.word	0x40001800
 800560c:	40001c00 	.word	0x40001c00
 8005610:	40002000 	.word	0x40002000

08005614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f023 0201 	bic.w	r2, r3, #1
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800563e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f023 030a 	bic.w	r3, r3, #10
 8005650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	621a      	str	r2, [r3, #32]
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005672:	b480      	push	{r7}
 8005674:	b087      	sub	sp, #28
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f023 0210 	bic.w	r2, r3, #16
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800569c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	031b      	lsls	r3, r3, #12
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	621a      	str	r2, [r3, #32]
}
 80056c6:	bf00      	nop
 80056c8:	371c      	adds	r7, #28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b085      	sub	sp, #20
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f043 0307 	orr.w	r3, r3, #7
 80056f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	609a      	str	r2, [r3, #8]
}
 80056fc:	bf00      	nop
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	021a      	lsls	r2, r3, #8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	431a      	orrs	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4313      	orrs	r3, r2
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	609a      	str	r2, [r3, #8]
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800575c:	2302      	movs	r3, #2
 800575e:	e05a      	b.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a21      	ldr	r2, [pc, #132]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d022      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ac:	d01d      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d018      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1b      	ldr	r2, [pc, #108]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d013      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a1a      	ldr	r2, [pc, #104]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00e      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a18      	ldr	r2, [pc, #96]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d009      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a17      	ldr	r2, [pc, #92]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d004      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a15      	ldr	r2, [pc, #84]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d10c      	bne.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40010000 	.word	0x40010000
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40010400 	.word	0x40010400
 8005838:	40014000 	.word	0x40014000
 800583c:	40001800 	.word	0x40001800

08005840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e03f      	b.n	80058fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fc fb98 	bl	8001fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2224      	movs	r2, #36	; 0x24
 8005898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fbd1 	bl	8006054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695a      	ldr	r2, [r3, #20]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b088      	sub	sp, #32
 8005906:	af02      	add	r7, sp, #8
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	4613      	mov	r3, r2
 8005910:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b20      	cmp	r3, #32
 8005920:	f040 8083 	bne.w	8005a2a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_UART_Transmit+0x2e>
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e07b      	b.n	8005a2c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_UART_Transmit+0x40>
 800593e:	2302      	movs	r3, #2
 8005940:	e074      	b.n	8005a2c <HAL_UART_Transmit+0x12a>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2221      	movs	r2, #33	; 0x21
 8005954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005958:	f7fc fee2 	bl	8002720 <HAL_GetTick>
 800595c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	88fa      	ldrh	r2, [r7, #6]
 8005962:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	88fa      	ldrh	r2, [r7, #6]
 8005968:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005972:	e042      	b.n	80059fa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598a:	d122      	bne.n	80059d2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2200      	movs	r2, #0
 8005994:	2180      	movs	r1, #128	; 0x80
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f9f0 	bl	8005d7c <UART_WaitOnFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e042      	b.n	8005a2c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	3302      	adds	r3, #2
 80059c6:	60bb      	str	r3, [r7, #8]
 80059c8:	e017      	b.n	80059fa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	3301      	adds	r3, #1
 80059ce:	60bb      	str	r3, [r7, #8]
 80059d0:	e013      	b.n	80059fa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2200      	movs	r2, #0
 80059da:	2180      	movs	r1, #128	; 0x80
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f9cd 	bl	8005d7c <UART_WaitOnFlagUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e01f      	b.n	8005a2c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	60ba      	str	r2, [r7, #8]
 80059f2:	781a      	ldrb	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1b7      	bne.n	8005974 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	2140      	movs	r1, #64	; 0x40
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f9b4 	bl	8005d7c <UART_WaitOnFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e006      	b.n	8005a2c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e000      	b.n	8005a2c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005a2a:	2302      	movs	r3, #2
  }
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d130      	bne.n	8005ab0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_UART_Transmit_IT+0x26>
 8005a54:	88fb      	ldrh	r3, [r7, #6]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e029      	b.n	8005ab2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_UART_Transmit_IT+0x38>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e022      	b.n	8005ab2 <HAL_UART_Transmit_IT+0x7e>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	88fa      	ldrh	r2, [r7, #6]
 8005a7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2221      	movs	r2, #33	; 0x21
 8005a90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005aaa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	e000      	b.n	8005ab2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005ab0:	2302      	movs	r3, #2
  }
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b20      	cmp	r3, #32
 8005ad6:	d140      	bne.n	8005b5a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <HAL_UART_Receive_IT+0x26>
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e039      	b.n	8005b5c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Receive_IT+0x38>
 8005af2:	2302      	movs	r3, #2
 8005af4:	e032      	b.n	8005b5c <HAL_UART_Receive_IT+0x9e>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	88fa      	ldrh	r2, [r7, #6]
 8005b08:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	88fa      	ldrh	r2, [r7, #6]
 8005b0e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2222      	movs	r2, #34	; 0x22
 8005b1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b34:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695a      	ldr	r2, [r3, #20]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0201 	orr.w	r2, r2, #1
 8005b44:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0220 	orr.w	r2, r2, #32
 8005b54:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	e000      	b.n	8005b5c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005b5a:	2302      	movs	r3, #2
  }
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10d      	bne.n	8005bba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <HAL_UART_IRQHandler+0x52>
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9cc 	bl	8005f50 <UART_Receive_IT>
      return;
 8005bb8:	e0d1      	b.n	8005d5e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80b0 	beq.w	8005d22 <HAL_UART_IRQHandler+0x1ba>
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d105      	bne.n	8005bd8 <HAL_UART_IRQHandler+0x70>
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80a5 	beq.w	8005d22 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x90>
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf0:	f043 0201 	orr.w	r2, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_UART_IRQHandler+0xb0>
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c10:	f043 0202 	orr.w	r2, r3, #2
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_UART_IRQHandler+0xd0>
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c30:	f043 0204 	orr.w	r2, r3, #4
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00f      	beq.n	8005c62 <HAL_UART_IRQHandler+0xfa>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	f003 0320 	and.w	r3, r3, #32
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d104      	bne.n	8005c56 <HAL_UART_IRQHandler+0xee>
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5a:	f043 0208 	orr.w	r2, r3, #8
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d078      	beq.n	8005d5c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <HAL_UART_IRQHandler+0x11c>
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f966 	bl	8005f50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8e:	2b40      	cmp	r3, #64	; 0x40
 8005c90:	bf0c      	ite	eq
 8005c92:	2301      	moveq	r3, #1
 8005c94:	2300      	movne	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <HAL_UART_IRQHandler+0x144>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d031      	beq.n	8005d10 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f8af 	bl	8005e10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d123      	bne.n	8005d08 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695a      	ldr	r2, [r3, #20]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d013      	beq.n	8005d00 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cdc:	4a21      	ldr	r2, [pc, #132]	; (8005d64 <HAL_UART_IRQHandler+0x1fc>)
 8005cde:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fd fa9a 	bl	800321e <HAL_DMA_Abort_IT>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d016      	beq.n	8005d1e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfe:	e00e      	b.n	8005d1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f831 	bl	8005d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d06:	e00a      	b.n	8005d1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f82d 	bl	8005d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0e:	e006      	b.n	8005d1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f829 	bl	8005d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005d1c:	e01e      	b.n	8005d5c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1e:	bf00      	nop
    return;
 8005d20:	e01c      	b.n	8005d5c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_UART_IRQHandler+0x1d6>
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f89c 	bl	8005e74 <UART_Transmit_IT>
    return;
 8005d3c:	e00f      	b.n	8005d5e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <HAL_UART_IRQHandler+0x1f6>
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f8e4 	bl	8005f20 <UART_EndTransmit_IT>
    return;
 8005d58:	bf00      	nop
 8005d5a:	e000      	b.n	8005d5e <HAL_UART_IRQHandler+0x1f6>
    return;
 8005d5c:	bf00      	nop
  }
}
 8005d5e:	3720      	adds	r7, #32
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	08005e4d 	.word	0x08005e4d

08005d68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8c:	e02c      	b.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d94:	d028      	beq.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d007      	beq.n	8005dac <UART_WaitOnFlagUntilTimeout+0x30>
 8005d9c:	f7fc fcc0 	bl	8002720 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d21d      	bcs.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695a      	ldr	r2, [r3, #20]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0201 	bic.w	r2, r2, #1
 8005dca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e00f      	b.n	8005e08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4013      	ands	r3, r2
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	bf0c      	ite	eq
 8005df8:	2301      	moveq	r3, #1
 8005dfa:	2300      	movne	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d0c3      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0201 	bic.w	r2, r2, #1
 8005e36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7ff ff7e 	bl	8005d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e6c:	bf00      	nop
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b21      	cmp	r3, #33	; 0x21
 8005e86:	d144      	bne.n	8005f12 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e90:	d11a      	bne.n	8005ec8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d105      	bne.n	8005ebc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	1c9a      	adds	r2, r3, #2
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	621a      	str	r2, [r3, #32]
 8005eba:	e00e      	b.n	8005eda <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	621a      	str	r2, [r3, #32]
 8005ec6:	e008      	b.n	8005eda <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	1c59      	adds	r1, r3, #1
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6211      	str	r1, [r2, #32]
 8005ed2:	781a      	ldrb	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10f      	bne.n	8005f0e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005efc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e000      	b.n	8005f14 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005f12:	2302      	movs	r3, #2
  }
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7fc fae9 	bl	8002518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b22      	cmp	r3, #34	; 0x22
 8005f62:	d171      	bne.n	8006048 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6c:	d123      	bne.n	8005fb6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10e      	bne.n	8005f9a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f92:	1c9a      	adds	r2, r3, #2
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	629a      	str	r2, [r3, #40]	; 0x28
 8005f98:	e029      	b.n	8005fee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8005fb4:	e01b      	b.n	8005fee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6858      	ldr	r0, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	1c59      	adds	r1, r3, #1
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6291      	str	r1, [r2, #40]	; 0x28
 8005fce:	b2c2      	uxtb	r2, r0
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	e00c      	b.n	8005fee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	1c58      	adds	r0, r3, #1
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	6288      	str	r0, [r1, #40]	; 0x28
 8005fe6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d120      	bne.n	8006044 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0220 	bic.w	r2, r2, #32
 8006010:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006020:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695a      	ldr	r2, [r3, #20]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0201 	bic.w	r2, r2, #1
 8006030:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fc fa76 	bl	800252c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	e002      	b.n	800604a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e000      	b.n	800604a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006058:	b085      	sub	sp, #20
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006096:	f023 030c 	bic.w	r3, r3, #12
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6812      	ldr	r2, [r2, #0]
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	430b      	orrs	r3, r1
 80060a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699a      	ldr	r2, [r3, #24]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c2:	f040 818b 	bne.w	80063dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4ac1      	ldr	r2, [pc, #772]	; (80063d0 <UART_SetConfig+0x37c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d005      	beq.n	80060dc <UART_SetConfig+0x88>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4abf      	ldr	r2, [pc, #764]	; (80063d4 <UART_SetConfig+0x380>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	f040 80bd 	bne.w	8006256 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fe ffb0 	bl	8005040 <HAL_RCC_GetPCLK2Freq>
 80060e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	461d      	mov	r5, r3
 80060e6:	f04f 0600 	mov.w	r6, #0
 80060ea:	46a8      	mov	r8, r5
 80060ec:	46b1      	mov	r9, r6
 80060ee:	eb18 0308 	adds.w	r3, r8, r8
 80060f2:	eb49 0409 	adc.w	r4, r9, r9
 80060f6:	4698      	mov	r8, r3
 80060f8:	46a1      	mov	r9, r4
 80060fa:	eb18 0805 	adds.w	r8, r8, r5
 80060fe:	eb49 0906 	adc.w	r9, r9, r6
 8006102:	f04f 0100 	mov.w	r1, #0
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800610e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006112:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006116:	4688      	mov	r8, r1
 8006118:	4691      	mov	r9, r2
 800611a:	eb18 0005 	adds.w	r0, r8, r5
 800611e:	eb49 0106 	adc.w	r1, r9, r6
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	461d      	mov	r5, r3
 8006128:	f04f 0600 	mov.w	r6, #0
 800612c:	196b      	adds	r3, r5, r5
 800612e:	eb46 0406 	adc.w	r4, r6, r6
 8006132:	461a      	mov	r2, r3
 8006134:	4623      	mov	r3, r4
 8006136:	f7fa fca9 	bl	8000a8c <__aeabi_uldivmod>
 800613a:	4603      	mov	r3, r0
 800613c:	460c      	mov	r4, r1
 800613e:	461a      	mov	r2, r3
 8006140:	4ba5      	ldr	r3, [pc, #660]	; (80063d8 <UART_SetConfig+0x384>)
 8006142:	fba3 2302 	umull	r2, r3, r3, r2
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	461d      	mov	r5, r3
 8006150:	f04f 0600 	mov.w	r6, #0
 8006154:	46a9      	mov	r9, r5
 8006156:	46b2      	mov	sl, r6
 8006158:	eb19 0309 	adds.w	r3, r9, r9
 800615c:	eb4a 040a 	adc.w	r4, sl, sl
 8006160:	4699      	mov	r9, r3
 8006162:	46a2      	mov	sl, r4
 8006164:	eb19 0905 	adds.w	r9, r9, r5
 8006168:	eb4a 0a06 	adc.w	sl, sl, r6
 800616c:	f04f 0100 	mov.w	r1, #0
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006178:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800617c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006180:	4689      	mov	r9, r1
 8006182:	4692      	mov	sl, r2
 8006184:	eb19 0005 	adds.w	r0, r9, r5
 8006188:	eb4a 0106 	adc.w	r1, sl, r6
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	461d      	mov	r5, r3
 8006192:	f04f 0600 	mov.w	r6, #0
 8006196:	196b      	adds	r3, r5, r5
 8006198:	eb46 0406 	adc.w	r4, r6, r6
 800619c:	461a      	mov	r2, r3
 800619e:	4623      	mov	r3, r4
 80061a0:	f7fa fc74 	bl	8000a8c <__aeabi_uldivmod>
 80061a4:	4603      	mov	r3, r0
 80061a6:	460c      	mov	r4, r1
 80061a8:	461a      	mov	r2, r3
 80061aa:	4b8b      	ldr	r3, [pc, #556]	; (80063d8 <UART_SetConfig+0x384>)
 80061ac:	fba3 1302 	umull	r1, r3, r3, r2
 80061b0:	095b      	lsrs	r3, r3, #5
 80061b2:	2164      	movs	r1, #100	; 0x64
 80061b4:	fb01 f303 	mul.w	r3, r1, r3
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	3332      	adds	r3, #50	; 0x32
 80061be:	4a86      	ldr	r2, [pc, #536]	; (80063d8 <UART_SetConfig+0x384>)
 80061c0:	fba2 2303 	umull	r2, r3, r2, r3
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061cc:	4498      	add	r8, r3
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	461d      	mov	r5, r3
 80061d2:	f04f 0600 	mov.w	r6, #0
 80061d6:	46a9      	mov	r9, r5
 80061d8:	46b2      	mov	sl, r6
 80061da:	eb19 0309 	adds.w	r3, r9, r9
 80061de:	eb4a 040a 	adc.w	r4, sl, sl
 80061e2:	4699      	mov	r9, r3
 80061e4:	46a2      	mov	sl, r4
 80061e6:	eb19 0905 	adds.w	r9, r9, r5
 80061ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80061ee:	f04f 0100 	mov.w	r1, #0
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006202:	4689      	mov	r9, r1
 8006204:	4692      	mov	sl, r2
 8006206:	eb19 0005 	adds.w	r0, r9, r5
 800620a:	eb4a 0106 	adc.w	r1, sl, r6
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	461d      	mov	r5, r3
 8006214:	f04f 0600 	mov.w	r6, #0
 8006218:	196b      	adds	r3, r5, r5
 800621a:	eb46 0406 	adc.w	r4, r6, r6
 800621e:	461a      	mov	r2, r3
 8006220:	4623      	mov	r3, r4
 8006222:	f7fa fc33 	bl	8000a8c <__aeabi_uldivmod>
 8006226:	4603      	mov	r3, r0
 8006228:	460c      	mov	r4, r1
 800622a:	461a      	mov	r2, r3
 800622c:	4b6a      	ldr	r3, [pc, #424]	; (80063d8 <UART_SetConfig+0x384>)
 800622e:	fba3 1302 	umull	r1, r3, r3, r2
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	2164      	movs	r1, #100	; 0x64
 8006236:	fb01 f303 	mul.w	r3, r1, r3
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	3332      	adds	r3, #50	; 0x32
 8006240:	4a65      	ldr	r2, [pc, #404]	; (80063d8 <UART_SetConfig+0x384>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	f003 0207 	and.w	r2, r3, #7
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4442      	add	r2, r8
 8006252:	609a      	str	r2, [r3, #8]
 8006254:	e26f      	b.n	8006736 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006256:	f7fe fedf 	bl	8005018 <HAL_RCC_GetPCLK1Freq>
 800625a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	461d      	mov	r5, r3
 8006260:	f04f 0600 	mov.w	r6, #0
 8006264:	46a8      	mov	r8, r5
 8006266:	46b1      	mov	r9, r6
 8006268:	eb18 0308 	adds.w	r3, r8, r8
 800626c:	eb49 0409 	adc.w	r4, r9, r9
 8006270:	4698      	mov	r8, r3
 8006272:	46a1      	mov	r9, r4
 8006274:	eb18 0805 	adds.w	r8, r8, r5
 8006278:	eb49 0906 	adc.w	r9, r9, r6
 800627c:	f04f 0100 	mov.w	r1, #0
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006288:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800628c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006290:	4688      	mov	r8, r1
 8006292:	4691      	mov	r9, r2
 8006294:	eb18 0005 	adds.w	r0, r8, r5
 8006298:	eb49 0106 	adc.w	r1, r9, r6
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	461d      	mov	r5, r3
 80062a2:	f04f 0600 	mov.w	r6, #0
 80062a6:	196b      	adds	r3, r5, r5
 80062a8:	eb46 0406 	adc.w	r4, r6, r6
 80062ac:	461a      	mov	r2, r3
 80062ae:	4623      	mov	r3, r4
 80062b0:	f7fa fbec 	bl	8000a8c <__aeabi_uldivmod>
 80062b4:	4603      	mov	r3, r0
 80062b6:	460c      	mov	r4, r1
 80062b8:	461a      	mov	r2, r3
 80062ba:	4b47      	ldr	r3, [pc, #284]	; (80063d8 <UART_SetConfig+0x384>)
 80062bc:	fba3 2302 	umull	r2, r3, r3, r2
 80062c0:	095b      	lsrs	r3, r3, #5
 80062c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	461d      	mov	r5, r3
 80062ca:	f04f 0600 	mov.w	r6, #0
 80062ce:	46a9      	mov	r9, r5
 80062d0:	46b2      	mov	sl, r6
 80062d2:	eb19 0309 	adds.w	r3, r9, r9
 80062d6:	eb4a 040a 	adc.w	r4, sl, sl
 80062da:	4699      	mov	r9, r3
 80062dc:	46a2      	mov	sl, r4
 80062de:	eb19 0905 	adds.w	r9, r9, r5
 80062e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80062e6:	f04f 0100 	mov.w	r1, #0
 80062ea:	f04f 0200 	mov.w	r2, #0
 80062ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062fa:	4689      	mov	r9, r1
 80062fc:	4692      	mov	sl, r2
 80062fe:	eb19 0005 	adds.w	r0, r9, r5
 8006302:	eb4a 0106 	adc.w	r1, sl, r6
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	461d      	mov	r5, r3
 800630c:	f04f 0600 	mov.w	r6, #0
 8006310:	196b      	adds	r3, r5, r5
 8006312:	eb46 0406 	adc.w	r4, r6, r6
 8006316:	461a      	mov	r2, r3
 8006318:	4623      	mov	r3, r4
 800631a:	f7fa fbb7 	bl	8000a8c <__aeabi_uldivmod>
 800631e:	4603      	mov	r3, r0
 8006320:	460c      	mov	r4, r1
 8006322:	461a      	mov	r2, r3
 8006324:	4b2c      	ldr	r3, [pc, #176]	; (80063d8 <UART_SetConfig+0x384>)
 8006326:	fba3 1302 	umull	r1, r3, r3, r2
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	2164      	movs	r1, #100	; 0x64
 800632e:	fb01 f303 	mul.w	r3, r1, r3
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	3332      	adds	r3, #50	; 0x32
 8006338:	4a27      	ldr	r2, [pc, #156]	; (80063d8 <UART_SetConfig+0x384>)
 800633a:	fba2 2303 	umull	r2, r3, r2, r3
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006346:	4498      	add	r8, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	461d      	mov	r5, r3
 800634c:	f04f 0600 	mov.w	r6, #0
 8006350:	46a9      	mov	r9, r5
 8006352:	46b2      	mov	sl, r6
 8006354:	eb19 0309 	adds.w	r3, r9, r9
 8006358:	eb4a 040a 	adc.w	r4, sl, sl
 800635c:	4699      	mov	r9, r3
 800635e:	46a2      	mov	sl, r4
 8006360:	eb19 0905 	adds.w	r9, r9, r5
 8006364:	eb4a 0a06 	adc.w	sl, sl, r6
 8006368:	f04f 0100 	mov.w	r1, #0
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006374:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006378:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800637c:	4689      	mov	r9, r1
 800637e:	4692      	mov	sl, r2
 8006380:	eb19 0005 	adds.w	r0, r9, r5
 8006384:	eb4a 0106 	adc.w	r1, sl, r6
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	461d      	mov	r5, r3
 800638e:	f04f 0600 	mov.w	r6, #0
 8006392:	196b      	adds	r3, r5, r5
 8006394:	eb46 0406 	adc.w	r4, r6, r6
 8006398:	461a      	mov	r2, r3
 800639a:	4623      	mov	r3, r4
 800639c:	f7fa fb76 	bl	8000a8c <__aeabi_uldivmod>
 80063a0:	4603      	mov	r3, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	461a      	mov	r2, r3
 80063a6:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <UART_SetConfig+0x384>)
 80063a8:	fba3 1302 	umull	r1, r3, r3, r2
 80063ac:	095b      	lsrs	r3, r3, #5
 80063ae:	2164      	movs	r1, #100	; 0x64
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	3332      	adds	r3, #50	; 0x32
 80063ba:	4a07      	ldr	r2, [pc, #28]	; (80063d8 <UART_SetConfig+0x384>)
 80063bc:	fba2 2303 	umull	r2, r3, r2, r3
 80063c0:	095b      	lsrs	r3, r3, #5
 80063c2:	f003 0207 	and.w	r2, r3, #7
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4442      	add	r2, r8
 80063cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80063ce:	e1b2      	b.n	8006736 <UART_SetConfig+0x6e2>
 80063d0:	40011000 	.word	0x40011000
 80063d4:	40011400 	.word	0x40011400
 80063d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4ad7      	ldr	r2, [pc, #860]	; (8006740 <UART_SetConfig+0x6ec>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d005      	beq.n	80063f2 <UART_SetConfig+0x39e>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4ad6      	ldr	r2, [pc, #856]	; (8006744 <UART_SetConfig+0x6f0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	f040 80d1 	bne.w	8006594 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80063f2:	f7fe fe25 	bl	8005040 <HAL_RCC_GetPCLK2Freq>
 80063f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	469a      	mov	sl, r3
 80063fc:	f04f 0b00 	mov.w	fp, #0
 8006400:	46d0      	mov	r8, sl
 8006402:	46d9      	mov	r9, fp
 8006404:	eb18 0308 	adds.w	r3, r8, r8
 8006408:	eb49 0409 	adc.w	r4, r9, r9
 800640c:	4698      	mov	r8, r3
 800640e:	46a1      	mov	r9, r4
 8006410:	eb18 080a 	adds.w	r8, r8, sl
 8006414:	eb49 090b 	adc.w	r9, r9, fp
 8006418:	f04f 0100 	mov.w	r1, #0
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006424:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006428:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800642c:	4688      	mov	r8, r1
 800642e:	4691      	mov	r9, r2
 8006430:	eb1a 0508 	adds.w	r5, sl, r8
 8006434:	eb4b 0609 	adc.w	r6, fp, r9
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	4619      	mov	r1, r3
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	f04f 0400 	mov.w	r4, #0
 800644a:	0094      	lsls	r4, r2, #2
 800644c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006450:	008b      	lsls	r3, r1, #2
 8006452:	461a      	mov	r2, r3
 8006454:	4623      	mov	r3, r4
 8006456:	4628      	mov	r0, r5
 8006458:	4631      	mov	r1, r6
 800645a:	f7fa fb17 	bl	8000a8c <__aeabi_uldivmod>
 800645e:	4603      	mov	r3, r0
 8006460:	460c      	mov	r4, r1
 8006462:	461a      	mov	r2, r3
 8006464:	4bb8      	ldr	r3, [pc, #736]	; (8006748 <UART_SetConfig+0x6f4>)
 8006466:	fba3 2302 	umull	r2, r3, r3, r2
 800646a:	095b      	lsrs	r3, r3, #5
 800646c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	469b      	mov	fp, r3
 8006474:	f04f 0c00 	mov.w	ip, #0
 8006478:	46d9      	mov	r9, fp
 800647a:	46e2      	mov	sl, ip
 800647c:	eb19 0309 	adds.w	r3, r9, r9
 8006480:	eb4a 040a 	adc.w	r4, sl, sl
 8006484:	4699      	mov	r9, r3
 8006486:	46a2      	mov	sl, r4
 8006488:	eb19 090b 	adds.w	r9, r9, fp
 800648c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006490:	f04f 0100 	mov.w	r1, #0
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800649c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064a4:	4689      	mov	r9, r1
 80064a6:	4692      	mov	sl, r2
 80064a8:	eb1b 0509 	adds.w	r5, fp, r9
 80064ac:	eb4c 060a 	adc.w	r6, ip, sl
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	4619      	mov	r1, r3
 80064b6:	f04f 0200 	mov.w	r2, #0
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	f04f 0400 	mov.w	r4, #0
 80064c2:	0094      	lsls	r4, r2, #2
 80064c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064c8:	008b      	lsls	r3, r1, #2
 80064ca:	461a      	mov	r2, r3
 80064cc:	4623      	mov	r3, r4
 80064ce:	4628      	mov	r0, r5
 80064d0:	4631      	mov	r1, r6
 80064d2:	f7fa fadb 	bl	8000a8c <__aeabi_uldivmod>
 80064d6:	4603      	mov	r3, r0
 80064d8:	460c      	mov	r4, r1
 80064da:	461a      	mov	r2, r3
 80064dc:	4b9a      	ldr	r3, [pc, #616]	; (8006748 <UART_SetConfig+0x6f4>)
 80064de:	fba3 1302 	umull	r1, r3, r3, r2
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	2164      	movs	r1, #100	; 0x64
 80064e6:	fb01 f303 	mul.w	r3, r1, r3
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	3332      	adds	r3, #50	; 0x32
 80064f0:	4a95      	ldr	r2, [pc, #596]	; (8006748 <UART_SetConfig+0x6f4>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064fc:	4498      	add	r8, r3
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	469b      	mov	fp, r3
 8006502:	f04f 0c00 	mov.w	ip, #0
 8006506:	46d9      	mov	r9, fp
 8006508:	46e2      	mov	sl, ip
 800650a:	eb19 0309 	adds.w	r3, r9, r9
 800650e:	eb4a 040a 	adc.w	r4, sl, sl
 8006512:	4699      	mov	r9, r3
 8006514:	46a2      	mov	sl, r4
 8006516:	eb19 090b 	adds.w	r9, r9, fp
 800651a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800651e:	f04f 0100 	mov.w	r1, #0
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800652a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800652e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006532:	4689      	mov	r9, r1
 8006534:	4692      	mov	sl, r2
 8006536:	eb1b 0509 	adds.w	r5, fp, r9
 800653a:	eb4c 060a 	adc.w	r6, ip, sl
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	4619      	mov	r1, r3
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	f04f 0400 	mov.w	r4, #0
 8006550:	0094      	lsls	r4, r2, #2
 8006552:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006556:	008b      	lsls	r3, r1, #2
 8006558:	461a      	mov	r2, r3
 800655a:	4623      	mov	r3, r4
 800655c:	4628      	mov	r0, r5
 800655e:	4631      	mov	r1, r6
 8006560:	f7fa fa94 	bl	8000a8c <__aeabi_uldivmod>
 8006564:	4603      	mov	r3, r0
 8006566:	460c      	mov	r4, r1
 8006568:	461a      	mov	r2, r3
 800656a:	4b77      	ldr	r3, [pc, #476]	; (8006748 <UART_SetConfig+0x6f4>)
 800656c:	fba3 1302 	umull	r1, r3, r3, r2
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	2164      	movs	r1, #100	; 0x64
 8006574:	fb01 f303 	mul.w	r3, r1, r3
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	3332      	adds	r3, #50	; 0x32
 800657e:	4a72      	ldr	r2, [pc, #456]	; (8006748 <UART_SetConfig+0x6f4>)
 8006580:	fba2 2303 	umull	r2, r3, r2, r3
 8006584:	095b      	lsrs	r3, r3, #5
 8006586:	f003 020f 	and.w	r2, r3, #15
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4442      	add	r2, r8
 8006590:	609a      	str	r2, [r3, #8]
 8006592:	e0d0      	b.n	8006736 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006594:	f7fe fd40 	bl	8005018 <HAL_RCC_GetPCLK1Freq>
 8006598:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	469a      	mov	sl, r3
 800659e:	f04f 0b00 	mov.w	fp, #0
 80065a2:	46d0      	mov	r8, sl
 80065a4:	46d9      	mov	r9, fp
 80065a6:	eb18 0308 	adds.w	r3, r8, r8
 80065aa:	eb49 0409 	adc.w	r4, r9, r9
 80065ae:	4698      	mov	r8, r3
 80065b0:	46a1      	mov	r9, r4
 80065b2:	eb18 080a 	adds.w	r8, r8, sl
 80065b6:	eb49 090b 	adc.w	r9, r9, fp
 80065ba:	f04f 0100 	mov.w	r1, #0
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065ce:	4688      	mov	r8, r1
 80065d0:	4691      	mov	r9, r2
 80065d2:	eb1a 0508 	adds.w	r5, sl, r8
 80065d6:	eb4b 0609 	adc.w	r6, fp, r9
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	4619      	mov	r1, r3
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	f04f 0400 	mov.w	r4, #0
 80065ec:	0094      	lsls	r4, r2, #2
 80065ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065f2:	008b      	lsls	r3, r1, #2
 80065f4:	461a      	mov	r2, r3
 80065f6:	4623      	mov	r3, r4
 80065f8:	4628      	mov	r0, r5
 80065fa:	4631      	mov	r1, r6
 80065fc:	f7fa fa46 	bl	8000a8c <__aeabi_uldivmod>
 8006600:	4603      	mov	r3, r0
 8006602:	460c      	mov	r4, r1
 8006604:	461a      	mov	r2, r3
 8006606:	4b50      	ldr	r3, [pc, #320]	; (8006748 <UART_SetConfig+0x6f4>)
 8006608:	fba3 2302 	umull	r2, r3, r3, r2
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	469b      	mov	fp, r3
 8006616:	f04f 0c00 	mov.w	ip, #0
 800661a:	46d9      	mov	r9, fp
 800661c:	46e2      	mov	sl, ip
 800661e:	eb19 0309 	adds.w	r3, r9, r9
 8006622:	eb4a 040a 	adc.w	r4, sl, sl
 8006626:	4699      	mov	r9, r3
 8006628:	46a2      	mov	sl, r4
 800662a:	eb19 090b 	adds.w	r9, r9, fp
 800662e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006632:	f04f 0100 	mov.w	r1, #0
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800663e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006642:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006646:	4689      	mov	r9, r1
 8006648:	4692      	mov	sl, r2
 800664a:	eb1b 0509 	adds.w	r5, fp, r9
 800664e:	eb4c 060a 	adc.w	r6, ip, sl
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	4619      	mov	r1, r3
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	f04f 0400 	mov.w	r4, #0
 8006664:	0094      	lsls	r4, r2, #2
 8006666:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800666a:	008b      	lsls	r3, r1, #2
 800666c:	461a      	mov	r2, r3
 800666e:	4623      	mov	r3, r4
 8006670:	4628      	mov	r0, r5
 8006672:	4631      	mov	r1, r6
 8006674:	f7fa fa0a 	bl	8000a8c <__aeabi_uldivmod>
 8006678:	4603      	mov	r3, r0
 800667a:	460c      	mov	r4, r1
 800667c:	461a      	mov	r2, r3
 800667e:	4b32      	ldr	r3, [pc, #200]	; (8006748 <UART_SetConfig+0x6f4>)
 8006680:	fba3 1302 	umull	r1, r3, r3, r2
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	2164      	movs	r1, #100	; 0x64
 8006688:	fb01 f303 	mul.w	r3, r1, r3
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	3332      	adds	r3, #50	; 0x32
 8006692:	4a2d      	ldr	r2, [pc, #180]	; (8006748 <UART_SetConfig+0x6f4>)
 8006694:	fba2 2303 	umull	r2, r3, r2, r3
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800669e:	4498      	add	r8, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	469b      	mov	fp, r3
 80066a4:	f04f 0c00 	mov.w	ip, #0
 80066a8:	46d9      	mov	r9, fp
 80066aa:	46e2      	mov	sl, ip
 80066ac:	eb19 0309 	adds.w	r3, r9, r9
 80066b0:	eb4a 040a 	adc.w	r4, sl, sl
 80066b4:	4699      	mov	r9, r3
 80066b6:	46a2      	mov	sl, r4
 80066b8:	eb19 090b 	adds.w	r9, r9, fp
 80066bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80066c0:	f04f 0100 	mov.w	r1, #0
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066d4:	4689      	mov	r9, r1
 80066d6:	4692      	mov	sl, r2
 80066d8:	eb1b 0509 	adds.w	r5, fp, r9
 80066dc:	eb4c 060a 	adc.w	r6, ip, sl
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	4619      	mov	r1, r3
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	f04f 0300 	mov.w	r3, #0
 80066ee:	f04f 0400 	mov.w	r4, #0
 80066f2:	0094      	lsls	r4, r2, #2
 80066f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066f8:	008b      	lsls	r3, r1, #2
 80066fa:	461a      	mov	r2, r3
 80066fc:	4623      	mov	r3, r4
 80066fe:	4628      	mov	r0, r5
 8006700:	4631      	mov	r1, r6
 8006702:	f7fa f9c3 	bl	8000a8c <__aeabi_uldivmod>
 8006706:	4603      	mov	r3, r0
 8006708:	460c      	mov	r4, r1
 800670a:	461a      	mov	r2, r3
 800670c:	4b0e      	ldr	r3, [pc, #56]	; (8006748 <UART_SetConfig+0x6f4>)
 800670e:	fba3 1302 	umull	r1, r3, r3, r2
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	2164      	movs	r1, #100	; 0x64
 8006716:	fb01 f303 	mul.w	r3, r1, r3
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	011b      	lsls	r3, r3, #4
 800671e:	3332      	adds	r3, #50	; 0x32
 8006720:	4a09      	ldr	r2, [pc, #36]	; (8006748 <UART_SetConfig+0x6f4>)
 8006722:	fba2 2303 	umull	r2, r3, r2, r3
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	f003 020f 	and.w	r2, r3, #15
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4442      	add	r2, r8
 8006732:	609a      	str	r2, [r3, #8]
}
 8006734:	e7ff      	b.n	8006736 <UART_SetConfig+0x6e2>
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006740:	40011000 	.word	0x40011000
 8006744:	40011400 	.word	0x40011400
 8006748:	51eb851f 	.word	0x51eb851f

0800674c <__errno>:
 800674c:	4b01      	ldr	r3, [pc, #4]	; (8006754 <__errno+0x8>)
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	200000e4 	.word	0x200000e4

08006758 <__libc_init_array>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	4e0d      	ldr	r6, [pc, #52]	; (8006790 <__libc_init_array+0x38>)
 800675c:	4c0d      	ldr	r4, [pc, #52]	; (8006794 <__libc_init_array+0x3c>)
 800675e:	1ba4      	subs	r4, r4, r6
 8006760:	10a4      	asrs	r4, r4, #2
 8006762:	2500      	movs	r5, #0
 8006764:	42a5      	cmp	r5, r4
 8006766:	d109      	bne.n	800677c <__libc_init_array+0x24>
 8006768:	4e0b      	ldr	r6, [pc, #44]	; (8006798 <__libc_init_array+0x40>)
 800676a:	4c0c      	ldr	r4, [pc, #48]	; (800679c <__libc_init_array+0x44>)
 800676c:	f000 fc36 	bl	8006fdc <_init>
 8006770:	1ba4      	subs	r4, r4, r6
 8006772:	10a4      	asrs	r4, r4, #2
 8006774:	2500      	movs	r5, #0
 8006776:	42a5      	cmp	r5, r4
 8006778:	d105      	bne.n	8006786 <__libc_init_array+0x2e>
 800677a:	bd70      	pop	{r4, r5, r6, pc}
 800677c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006780:	4798      	blx	r3
 8006782:	3501      	adds	r5, #1
 8006784:	e7ee      	b.n	8006764 <__libc_init_array+0xc>
 8006786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800678a:	4798      	blx	r3
 800678c:	3501      	adds	r5, #1
 800678e:	e7f2      	b.n	8006776 <__libc_init_array+0x1e>
 8006790:	080070d4 	.word	0x080070d4
 8006794:	080070d4 	.word	0x080070d4
 8006798:	080070d4 	.word	0x080070d4
 800679c:	080070d8 	.word	0x080070d8

080067a0 <memset>:
 80067a0:	4402      	add	r2, r0
 80067a2:	4603      	mov	r3, r0
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d100      	bne.n	80067aa <memset+0xa>
 80067a8:	4770      	bx	lr
 80067aa:	f803 1b01 	strb.w	r1, [r3], #1
 80067ae:	e7f9      	b.n	80067a4 <memset+0x4>

080067b0 <siprintf>:
 80067b0:	b40e      	push	{r1, r2, r3}
 80067b2:	b500      	push	{lr}
 80067b4:	b09c      	sub	sp, #112	; 0x70
 80067b6:	ab1d      	add	r3, sp, #116	; 0x74
 80067b8:	9002      	str	r0, [sp, #8]
 80067ba:	9006      	str	r0, [sp, #24]
 80067bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067c0:	4809      	ldr	r0, [pc, #36]	; (80067e8 <siprintf+0x38>)
 80067c2:	9107      	str	r1, [sp, #28]
 80067c4:	9104      	str	r1, [sp, #16]
 80067c6:	4909      	ldr	r1, [pc, #36]	; (80067ec <siprintf+0x3c>)
 80067c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067cc:	9105      	str	r1, [sp, #20]
 80067ce:	6800      	ldr	r0, [r0, #0]
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	a902      	add	r1, sp, #8
 80067d4:	f000 f876 	bl	80068c4 <_svfiprintf_r>
 80067d8:	9b02      	ldr	r3, [sp, #8]
 80067da:	2200      	movs	r2, #0
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	b01c      	add	sp, #112	; 0x70
 80067e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067e4:	b003      	add	sp, #12
 80067e6:	4770      	bx	lr
 80067e8:	200000e4 	.word	0x200000e4
 80067ec:	ffff0208 	.word	0xffff0208

080067f0 <strcat>:
 80067f0:	b510      	push	{r4, lr}
 80067f2:	4603      	mov	r3, r0
 80067f4:	781a      	ldrb	r2, [r3, #0]
 80067f6:	1c5c      	adds	r4, r3, #1
 80067f8:	b93a      	cbnz	r2, 800680a <strcat+0x1a>
 80067fa:	3b01      	subs	r3, #1
 80067fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006800:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006804:	2a00      	cmp	r2, #0
 8006806:	d1f9      	bne.n	80067fc <strcat+0xc>
 8006808:	bd10      	pop	{r4, pc}
 800680a:	4623      	mov	r3, r4
 800680c:	e7f2      	b.n	80067f4 <strcat+0x4>

0800680e <__ssputs_r>:
 800680e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006812:	688e      	ldr	r6, [r1, #8]
 8006814:	429e      	cmp	r6, r3
 8006816:	4682      	mov	sl, r0
 8006818:	460c      	mov	r4, r1
 800681a:	4690      	mov	r8, r2
 800681c:	4699      	mov	r9, r3
 800681e:	d837      	bhi.n	8006890 <__ssputs_r+0x82>
 8006820:	898a      	ldrh	r2, [r1, #12]
 8006822:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006826:	d031      	beq.n	800688c <__ssputs_r+0x7e>
 8006828:	6825      	ldr	r5, [r4, #0]
 800682a:	6909      	ldr	r1, [r1, #16]
 800682c:	1a6f      	subs	r7, r5, r1
 800682e:	6965      	ldr	r5, [r4, #20]
 8006830:	2302      	movs	r3, #2
 8006832:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006836:	fb95 f5f3 	sdiv	r5, r5, r3
 800683a:	f109 0301 	add.w	r3, r9, #1
 800683e:	443b      	add	r3, r7
 8006840:	429d      	cmp	r5, r3
 8006842:	bf38      	it	cc
 8006844:	461d      	movcc	r5, r3
 8006846:	0553      	lsls	r3, r2, #21
 8006848:	d530      	bpl.n	80068ac <__ssputs_r+0x9e>
 800684a:	4629      	mov	r1, r5
 800684c:	f000 fb2c 	bl	8006ea8 <_malloc_r>
 8006850:	4606      	mov	r6, r0
 8006852:	b950      	cbnz	r0, 800686a <__ssputs_r+0x5c>
 8006854:	230c      	movs	r3, #12
 8006856:	f8ca 3000 	str.w	r3, [sl]
 800685a:	89a3      	ldrh	r3, [r4, #12]
 800685c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006860:	81a3      	strh	r3, [r4, #12]
 8006862:	f04f 30ff 	mov.w	r0, #4294967295
 8006866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686a:	463a      	mov	r2, r7
 800686c:	6921      	ldr	r1, [r4, #16]
 800686e:	f000 faa9 	bl	8006dc4 <memcpy>
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687c:	81a3      	strh	r3, [r4, #12]
 800687e:	6126      	str	r6, [r4, #16]
 8006880:	6165      	str	r5, [r4, #20]
 8006882:	443e      	add	r6, r7
 8006884:	1bed      	subs	r5, r5, r7
 8006886:	6026      	str	r6, [r4, #0]
 8006888:	60a5      	str	r5, [r4, #8]
 800688a:	464e      	mov	r6, r9
 800688c:	454e      	cmp	r6, r9
 800688e:	d900      	bls.n	8006892 <__ssputs_r+0x84>
 8006890:	464e      	mov	r6, r9
 8006892:	4632      	mov	r2, r6
 8006894:	4641      	mov	r1, r8
 8006896:	6820      	ldr	r0, [r4, #0]
 8006898:	f000 fa9f 	bl	8006dda <memmove>
 800689c:	68a3      	ldr	r3, [r4, #8]
 800689e:	1b9b      	subs	r3, r3, r6
 80068a0:	60a3      	str	r3, [r4, #8]
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	441e      	add	r6, r3
 80068a6:	6026      	str	r6, [r4, #0]
 80068a8:	2000      	movs	r0, #0
 80068aa:	e7dc      	b.n	8006866 <__ssputs_r+0x58>
 80068ac:	462a      	mov	r2, r5
 80068ae:	f000 fb55 	bl	8006f5c <_realloc_r>
 80068b2:	4606      	mov	r6, r0
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d1e2      	bne.n	800687e <__ssputs_r+0x70>
 80068b8:	6921      	ldr	r1, [r4, #16]
 80068ba:	4650      	mov	r0, sl
 80068bc:	f000 faa6 	bl	8006e0c <_free_r>
 80068c0:	e7c8      	b.n	8006854 <__ssputs_r+0x46>
	...

080068c4 <_svfiprintf_r>:
 80068c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c8:	461d      	mov	r5, r3
 80068ca:	898b      	ldrh	r3, [r1, #12]
 80068cc:	061f      	lsls	r7, r3, #24
 80068ce:	b09d      	sub	sp, #116	; 0x74
 80068d0:	4680      	mov	r8, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	4616      	mov	r6, r2
 80068d6:	d50f      	bpl.n	80068f8 <_svfiprintf_r+0x34>
 80068d8:	690b      	ldr	r3, [r1, #16]
 80068da:	b96b      	cbnz	r3, 80068f8 <_svfiprintf_r+0x34>
 80068dc:	2140      	movs	r1, #64	; 0x40
 80068de:	f000 fae3 	bl	8006ea8 <_malloc_r>
 80068e2:	6020      	str	r0, [r4, #0]
 80068e4:	6120      	str	r0, [r4, #16]
 80068e6:	b928      	cbnz	r0, 80068f4 <_svfiprintf_r+0x30>
 80068e8:	230c      	movs	r3, #12
 80068ea:	f8c8 3000 	str.w	r3, [r8]
 80068ee:	f04f 30ff 	mov.w	r0, #4294967295
 80068f2:	e0c8      	b.n	8006a86 <_svfiprintf_r+0x1c2>
 80068f4:	2340      	movs	r3, #64	; 0x40
 80068f6:	6163      	str	r3, [r4, #20]
 80068f8:	2300      	movs	r3, #0
 80068fa:	9309      	str	r3, [sp, #36]	; 0x24
 80068fc:	2320      	movs	r3, #32
 80068fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006902:	2330      	movs	r3, #48	; 0x30
 8006904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006908:	9503      	str	r5, [sp, #12]
 800690a:	f04f 0b01 	mov.w	fp, #1
 800690e:	4637      	mov	r7, r6
 8006910:	463d      	mov	r5, r7
 8006912:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006916:	b10b      	cbz	r3, 800691c <_svfiprintf_r+0x58>
 8006918:	2b25      	cmp	r3, #37	; 0x25
 800691a:	d13e      	bne.n	800699a <_svfiprintf_r+0xd6>
 800691c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006920:	d00b      	beq.n	800693a <_svfiprintf_r+0x76>
 8006922:	4653      	mov	r3, sl
 8006924:	4632      	mov	r2, r6
 8006926:	4621      	mov	r1, r4
 8006928:	4640      	mov	r0, r8
 800692a:	f7ff ff70 	bl	800680e <__ssputs_r>
 800692e:	3001      	adds	r0, #1
 8006930:	f000 80a4 	beq.w	8006a7c <_svfiprintf_r+0x1b8>
 8006934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006936:	4453      	add	r3, sl
 8006938:	9309      	str	r3, [sp, #36]	; 0x24
 800693a:	783b      	ldrb	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 809d 	beq.w	8006a7c <_svfiprintf_r+0x1b8>
 8006942:	2300      	movs	r3, #0
 8006944:	f04f 32ff 	mov.w	r2, #4294967295
 8006948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800694c:	9304      	str	r3, [sp, #16]
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006954:	931a      	str	r3, [sp, #104]	; 0x68
 8006956:	462f      	mov	r7, r5
 8006958:	2205      	movs	r2, #5
 800695a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800695e:	4850      	ldr	r0, [pc, #320]	; (8006aa0 <_svfiprintf_r+0x1dc>)
 8006960:	f7f9 fc4e 	bl	8000200 <memchr>
 8006964:	9b04      	ldr	r3, [sp, #16]
 8006966:	b9d0      	cbnz	r0, 800699e <_svfiprintf_r+0xda>
 8006968:	06d9      	lsls	r1, r3, #27
 800696a:	bf44      	itt	mi
 800696c:	2220      	movmi	r2, #32
 800696e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006972:	071a      	lsls	r2, r3, #28
 8006974:	bf44      	itt	mi
 8006976:	222b      	movmi	r2, #43	; 0x2b
 8006978:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800697c:	782a      	ldrb	r2, [r5, #0]
 800697e:	2a2a      	cmp	r2, #42	; 0x2a
 8006980:	d015      	beq.n	80069ae <_svfiprintf_r+0xea>
 8006982:	9a07      	ldr	r2, [sp, #28]
 8006984:	462f      	mov	r7, r5
 8006986:	2000      	movs	r0, #0
 8006988:	250a      	movs	r5, #10
 800698a:	4639      	mov	r1, r7
 800698c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006990:	3b30      	subs	r3, #48	; 0x30
 8006992:	2b09      	cmp	r3, #9
 8006994:	d94d      	bls.n	8006a32 <_svfiprintf_r+0x16e>
 8006996:	b1b8      	cbz	r0, 80069c8 <_svfiprintf_r+0x104>
 8006998:	e00f      	b.n	80069ba <_svfiprintf_r+0xf6>
 800699a:	462f      	mov	r7, r5
 800699c:	e7b8      	b.n	8006910 <_svfiprintf_r+0x4c>
 800699e:	4a40      	ldr	r2, [pc, #256]	; (8006aa0 <_svfiprintf_r+0x1dc>)
 80069a0:	1a80      	subs	r0, r0, r2
 80069a2:	fa0b f000 	lsl.w	r0, fp, r0
 80069a6:	4318      	orrs	r0, r3
 80069a8:	9004      	str	r0, [sp, #16]
 80069aa:	463d      	mov	r5, r7
 80069ac:	e7d3      	b.n	8006956 <_svfiprintf_r+0x92>
 80069ae:	9a03      	ldr	r2, [sp, #12]
 80069b0:	1d11      	adds	r1, r2, #4
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	9103      	str	r1, [sp, #12]
 80069b6:	2a00      	cmp	r2, #0
 80069b8:	db01      	blt.n	80069be <_svfiprintf_r+0xfa>
 80069ba:	9207      	str	r2, [sp, #28]
 80069bc:	e004      	b.n	80069c8 <_svfiprintf_r+0x104>
 80069be:	4252      	negs	r2, r2
 80069c0:	f043 0302 	orr.w	r3, r3, #2
 80069c4:	9207      	str	r2, [sp, #28]
 80069c6:	9304      	str	r3, [sp, #16]
 80069c8:	783b      	ldrb	r3, [r7, #0]
 80069ca:	2b2e      	cmp	r3, #46	; 0x2e
 80069cc:	d10c      	bne.n	80069e8 <_svfiprintf_r+0x124>
 80069ce:	787b      	ldrb	r3, [r7, #1]
 80069d0:	2b2a      	cmp	r3, #42	; 0x2a
 80069d2:	d133      	bne.n	8006a3c <_svfiprintf_r+0x178>
 80069d4:	9b03      	ldr	r3, [sp, #12]
 80069d6:	1d1a      	adds	r2, r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	9203      	str	r2, [sp, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bfb8      	it	lt
 80069e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80069e4:	3702      	adds	r7, #2
 80069e6:	9305      	str	r3, [sp, #20]
 80069e8:	4d2e      	ldr	r5, [pc, #184]	; (8006aa4 <_svfiprintf_r+0x1e0>)
 80069ea:	7839      	ldrb	r1, [r7, #0]
 80069ec:	2203      	movs	r2, #3
 80069ee:	4628      	mov	r0, r5
 80069f0:	f7f9 fc06 	bl	8000200 <memchr>
 80069f4:	b138      	cbz	r0, 8006a06 <_svfiprintf_r+0x142>
 80069f6:	2340      	movs	r3, #64	; 0x40
 80069f8:	1b40      	subs	r0, r0, r5
 80069fa:	fa03 f000 	lsl.w	r0, r3, r0
 80069fe:	9b04      	ldr	r3, [sp, #16]
 8006a00:	4303      	orrs	r3, r0
 8006a02:	3701      	adds	r7, #1
 8006a04:	9304      	str	r3, [sp, #16]
 8006a06:	7839      	ldrb	r1, [r7, #0]
 8006a08:	4827      	ldr	r0, [pc, #156]	; (8006aa8 <_svfiprintf_r+0x1e4>)
 8006a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a0e:	2206      	movs	r2, #6
 8006a10:	1c7e      	adds	r6, r7, #1
 8006a12:	f7f9 fbf5 	bl	8000200 <memchr>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d038      	beq.n	8006a8c <_svfiprintf_r+0x1c8>
 8006a1a:	4b24      	ldr	r3, [pc, #144]	; (8006aac <_svfiprintf_r+0x1e8>)
 8006a1c:	bb13      	cbnz	r3, 8006a64 <_svfiprintf_r+0x1a0>
 8006a1e:	9b03      	ldr	r3, [sp, #12]
 8006a20:	3307      	adds	r3, #7
 8006a22:	f023 0307 	bic.w	r3, r3, #7
 8006a26:	3308      	adds	r3, #8
 8006a28:	9303      	str	r3, [sp, #12]
 8006a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2c:	444b      	add	r3, r9
 8006a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a30:	e76d      	b.n	800690e <_svfiprintf_r+0x4a>
 8006a32:	fb05 3202 	mla	r2, r5, r2, r3
 8006a36:	2001      	movs	r0, #1
 8006a38:	460f      	mov	r7, r1
 8006a3a:	e7a6      	b.n	800698a <_svfiprintf_r+0xc6>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	3701      	adds	r7, #1
 8006a40:	9305      	str	r3, [sp, #20]
 8006a42:	4619      	mov	r1, r3
 8006a44:	250a      	movs	r5, #10
 8006a46:	4638      	mov	r0, r7
 8006a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a4c:	3a30      	subs	r2, #48	; 0x30
 8006a4e:	2a09      	cmp	r2, #9
 8006a50:	d903      	bls.n	8006a5a <_svfiprintf_r+0x196>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0c8      	beq.n	80069e8 <_svfiprintf_r+0x124>
 8006a56:	9105      	str	r1, [sp, #20]
 8006a58:	e7c6      	b.n	80069e8 <_svfiprintf_r+0x124>
 8006a5a:	fb05 2101 	mla	r1, r5, r1, r2
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4607      	mov	r7, r0
 8006a62:	e7f0      	b.n	8006a46 <_svfiprintf_r+0x182>
 8006a64:	ab03      	add	r3, sp, #12
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	4622      	mov	r2, r4
 8006a6a:	4b11      	ldr	r3, [pc, #68]	; (8006ab0 <_svfiprintf_r+0x1ec>)
 8006a6c:	a904      	add	r1, sp, #16
 8006a6e:	4640      	mov	r0, r8
 8006a70:	f3af 8000 	nop.w
 8006a74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006a78:	4681      	mov	r9, r0
 8006a7a:	d1d6      	bne.n	8006a2a <_svfiprintf_r+0x166>
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	065b      	lsls	r3, r3, #25
 8006a80:	f53f af35 	bmi.w	80068ee <_svfiprintf_r+0x2a>
 8006a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a86:	b01d      	add	sp, #116	; 0x74
 8006a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8c:	ab03      	add	r3, sp, #12
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	4622      	mov	r2, r4
 8006a92:	4b07      	ldr	r3, [pc, #28]	; (8006ab0 <_svfiprintf_r+0x1ec>)
 8006a94:	a904      	add	r1, sp, #16
 8006a96:	4640      	mov	r0, r8
 8006a98:	f000 f882 	bl	8006ba0 <_printf_i>
 8006a9c:	e7ea      	b.n	8006a74 <_svfiprintf_r+0x1b0>
 8006a9e:	bf00      	nop
 8006aa0:	08007098 	.word	0x08007098
 8006aa4:	0800709e 	.word	0x0800709e
 8006aa8:	080070a2 	.word	0x080070a2
 8006aac:	00000000 	.word	0x00000000
 8006ab0:	0800680f 	.word	0x0800680f

08006ab4 <_printf_common>:
 8006ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	4691      	mov	r9, r2
 8006aba:	461f      	mov	r7, r3
 8006abc:	688a      	ldr	r2, [r1, #8]
 8006abe:	690b      	ldr	r3, [r1, #16]
 8006ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	bfb8      	it	lt
 8006ac8:	4613      	movlt	r3, r2
 8006aca:	f8c9 3000 	str.w	r3, [r9]
 8006ace:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	b112      	cbz	r2, 8006ade <_printf_common+0x2a>
 8006ad8:	3301      	adds	r3, #1
 8006ada:	f8c9 3000 	str.w	r3, [r9]
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	0699      	lsls	r1, r3, #26
 8006ae2:	bf42      	ittt	mi
 8006ae4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ae8:	3302      	addmi	r3, #2
 8006aea:	f8c9 3000 	strmi.w	r3, [r9]
 8006aee:	6825      	ldr	r5, [r4, #0]
 8006af0:	f015 0506 	ands.w	r5, r5, #6
 8006af4:	d107      	bne.n	8006b06 <_printf_common+0x52>
 8006af6:	f104 0a19 	add.w	sl, r4, #25
 8006afa:	68e3      	ldr	r3, [r4, #12]
 8006afc:	f8d9 2000 	ldr.w	r2, [r9]
 8006b00:	1a9b      	subs	r3, r3, r2
 8006b02:	42ab      	cmp	r3, r5
 8006b04:	dc28      	bgt.n	8006b58 <_printf_common+0xa4>
 8006b06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b0a:	6822      	ldr	r2, [r4, #0]
 8006b0c:	3300      	adds	r3, #0
 8006b0e:	bf18      	it	ne
 8006b10:	2301      	movne	r3, #1
 8006b12:	0692      	lsls	r2, r2, #26
 8006b14:	d42d      	bmi.n	8006b72 <_printf_common+0xbe>
 8006b16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	47c0      	blx	r8
 8006b20:	3001      	adds	r0, #1
 8006b22:	d020      	beq.n	8006b66 <_printf_common+0xb2>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	68e5      	ldr	r5, [r4, #12]
 8006b28:	f8d9 2000 	ldr.w	r2, [r9]
 8006b2c:	f003 0306 	and.w	r3, r3, #6
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	bf08      	it	eq
 8006b34:	1aad      	subeq	r5, r5, r2
 8006b36:	68a3      	ldr	r3, [r4, #8]
 8006b38:	6922      	ldr	r2, [r4, #16]
 8006b3a:	bf0c      	ite	eq
 8006b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b40:	2500      	movne	r5, #0
 8006b42:	4293      	cmp	r3, r2
 8006b44:	bfc4      	itt	gt
 8006b46:	1a9b      	subgt	r3, r3, r2
 8006b48:	18ed      	addgt	r5, r5, r3
 8006b4a:	f04f 0900 	mov.w	r9, #0
 8006b4e:	341a      	adds	r4, #26
 8006b50:	454d      	cmp	r5, r9
 8006b52:	d11a      	bne.n	8006b8a <_printf_common+0xd6>
 8006b54:	2000      	movs	r0, #0
 8006b56:	e008      	b.n	8006b6a <_printf_common+0xb6>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	4652      	mov	r2, sl
 8006b5c:	4639      	mov	r1, r7
 8006b5e:	4630      	mov	r0, r6
 8006b60:	47c0      	blx	r8
 8006b62:	3001      	adds	r0, #1
 8006b64:	d103      	bne.n	8006b6e <_printf_common+0xba>
 8006b66:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6e:	3501      	adds	r5, #1
 8006b70:	e7c3      	b.n	8006afa <_printf_common+0x46>
 8006b72:	18e1      	adds	r1, r4, r3
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	2030      	movs	r0, #48	; 0x30
 8006b78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b7c:	4422      	add	r2, r4
 8006b7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b86:	3302      	adds	r3, #2
 8006b88:	e7c5      	b.n	8006b16 <_printf_common+0x62>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4622      	mov	r2, r4
 8006b8e:	4639      	mov	r1, r7
 8006b90:	4630      	mov	r0, r6
 8006b92:	47c0      	blx	r8
 8006b94:	3001      	adds	r0, #1
 8006b96:	d0e6      	beq.n	8006b66 <_printf_common+0xb2>
 8006b98:	f109 0901 	add.w	r9, r9, #1
 8006b9c:	e7d8      	b.n	8006b50 <_printf_common+0x9c>
	...

08006ba0 <_printf_i>:
 8006ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ba4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ba8:	460c      	mov	r4, r1
 8006baa:	7e09      	ldrb	r1, [r1, #24]
 8006bac:	b085      	sub	sp, #20
 8006bae:	296e      	cmp	r1, #110	; 0x6e
 8006bb0:	4617      	mov	r7, r2
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	4698      	mov	r8, r3
 8006bb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bb8:	f000 80b3 	beq.w	8006d22 <_printf_i+0x182>
 8006bbc:	d822      	bhi.n	8006c04 <_printf_i+0x64>
 8006bbe:	2963      	cmp	r1, #99	; 0x63
 8006bc0:	d036      	beq.n	8006c30 <_printf_i+0x90>
 8006bc2:	d80a      	bhi.n	8006bda <_printf_i+0x3a>
 8006bc4:	2900      	cmp	r1, #0
 8006bc6:	f000 80b9 	beq.w	8006d3c <_printf_i+0x19c>
 8006bca:	2958      	cmp	r1, #88	; 0x58
 8006bcc:	f000 8083 	beq.w	8006cd6 <_printf_i+0x136>
 8006bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006bd8:	e032      	b.n	8006c40 <_printf_i+0xa0>
 8006bda:	2964      	cmp	r1, #100	; 0x64
 8006bdc:	d001      	beq.n	8006be2 <_printf_i+0x42>
 8006bde:	2969      	cmp	r1, #105	; 0x69
 8006be0:	d1f6      	bne.n	8006bd0 <_printf_i+0x30>
 8006be2:	6820      	ldr	r0, [r4, #0]
 8006be4:	6813      	ldr	r3, [r2, #0]
 8006be6:	0605      	lsls	r5, r0, #24
 8006be8:	f103 0104 	add.w	r1, r3, #4
 8006bec:	d52a      	bpl.n	8006c44 <_printf_i+0xa4>
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6011      	str	r1, [r2, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	da03      	bge.n	8006bfe <_printf_i+0x5e>
 8006bf6:	222d      	movs	r2, #45	; 0x2d
 8006bf8:	425b      	negs	r3, r3
 8006bfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006bfe:	486f      	ldr	r0, [pc, #444]	; (8006dbc <_printf_i+0x21c>)
 8006c00:	220a      	movs	r2, #10
 8006c02:	e039      	b.n	8006c78 <_printf_i+0xd8>
 8006c04:	2973      	cmp	r1, #115	; 0x73
 8006c06:	f000 809d 	beq.w	8006d44 <_printf_i+0x1a4>
 8006c0a:	d808      	bhi.n	8006c1e <_printf_i+0x7e>
 8006c0c:	296f      	cmp	r1, #111	; 0x6f
 8006c0e:	d020      	beq.n	8006c52 <_printf_i+0xb2>
 8006c10:	2970      	cmp	r1, #112	; 0x70
 8006c12:	d1dd      	bne.n	8006bd0 <_printf_i+0x30>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	f043 0320 	orr.w	r3, r3, #32
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	e003      	b.n	8006c26 <_printf_i+0x86>
 8006c1e:	2975      	cmp	r1, #117	; 0x75
 8006c20:	d017      	beq.n	8006c52 <_printf_i+0xb2>
 8006c22:	2978      	cmp	r1, #120	; 0x78
 8006c24:	d1d4      	bne.n	8006bd0 <_printf_i+0x30>
 8006c26:	2378      	movs	r3, #120	; 0x78
 8006c28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c2c:	4864      	ldr	r0, [pc, #400]	; (8006dc0 <_printf_i+0x220>)
 8006c2e:	e055      	b.n	8006cdc <_printf_i+0x13c>
 8006c30:	6813      	ldr	r3, [r2, #0]
 8006c32:	1d19      	adds	r1, r3, #4
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6011      	str	r1, [r2, #0]
 8006c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c40:	2301      	movs	r3, #1
 8006c42:	e08c      	b.n	8006d5e <_printf_i+0x1be>
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6011      	str	r1, [r2, #0]
 8006c48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c4c:	bf18      	it	ne
 8006c4e:	b21b      	sxthne	r3, r3
 8006c50:	e7cf      	b.n	8006bf2 <_printf_i+0x52>
 8006c52:	6813      	ldr	r3, [r2, #0]
 8006c54:	6825      	ldr	r5, [r4, #0]
 8006c56:	1d18      	adds	r0, r3, #4
 8006c58:	6010      	str	r0, [r2, #0]
 8006c5a:	0628      	lsls	r0, r5, #24
 8006c5c:	d501      	bpl.n	8006c62 <_printf_i+0xc2>
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	e002      	b.n	8006c68 <_printf_i+0xc8>
 8006c62:	0668      	lsls	r0, r5, #25
 8006c64:	d5fb      	bpl.n	8006c5e <_printf_i+0xbe>
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	4854      	ldr	r0, [pc, #336]	; (8006dbc <_printf_i+0x21c>)
 8006c6a:	296f      	cmp	r1, #111	; 0x6f
 8006c6c:	bf14      	ite	ne
 8006c6e:	220a      	movne	r2, #10
 8006c70:	2208      	moveq	r2, #8
 8006c72:	2100      	movs	r1, #0
 8006c74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c78:	6865      	ldr	r5, [r4, #4]
 8006c7a:	60a5      	str	r5, [r4, #8]
 8006c7c:	2d00      	cmp	r5, #0
 8006c7e:	f2c0 8095 	blt.w	8006dac <_printf_i+0x20c>
 8006c82:	6821      	ldr	r1, [r4, #0]
 8006c84:	f021 0104 	bic.w	r1, r1, #4
 8006c88:	6021      	str	r1, [r4, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d13d      	bne.n	8006d0a <_printf_i+0x16a>
 8006c8e:	2d00      	cmp	r5, #0
 8006c90:	f040 808e 	bne.w	8006db0 <_printf_i+0x210>
 8006c94:	4665      	mov	r5, ip
 8006c96:	2a08      	cmp	r2, #8
 8006c98:	d10b      	bne.n	8006cb2 <_printf_i+0x112>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	07db      	lsls	r3, r3, #31
 8006c9e:	d508      	bpl.n	8006cb2 <_printf_i+0x112>
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	6862      	ldr	r2, [r4, #4]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	bfde      	ittt	le
 8006ca8:	2330      	movle	r3, #48	; 0x30
 8006caa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cb2:	ebac 0305 	sub.w	r3, ip, r5
 8006cb6:	6123      	str	r3, [r4, #16]
 8006cb8:	f8cd 8000 	str.w	r8, [sp]
 8006cbc:	463b      	mov	r3, r7
 8006cbe:	aa03      	add	r2, sp, #12
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7ff fef6 	bl	8006ab4 <_printf_common>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d14d      	bne.n	8006d68 <_printf_i+0x1c8>
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	b005      	add	sp, #20
 8006cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cd6:	4839      	ldr	r0, [pc, #228]	; (8006dbc <_printf_i+0x21c>)
 8006cd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006cdc:	6813      	ldr	r3, [r2, #0]
 8006cde:	6821      	ldr	r1, [r4, #0]
 8006ce0:	1d1d      	adds	r5, r3, #4
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6015      	str	r5, [r2, #0]
 8006ce6:	060a      	lsls	r2, r1, #24
 8006ce8:	d50b      	bpl.n	8006d02 <_printf_i+0x162>
 8006cea:	07ca      	lsls	r2, r1, #31
 8006cec:	bf44      	itt	mi
 8006cee:	f041 0120 	orrmi.w	r1, r1, #32
 8006cf2:	6021      	strmi	r1, [r4, #0]
 8006cf4:	b91b      	cbnz	r3, 8006cfe <_printf_i+0x15e>
 8006cf6:	6822      	ldr	r2, [r4, #0]
 8006cf8:	f022 0220 	bic.w	r2, r2, #32
 8006cfc:	6022      	str	r2, [r4, #0]
 8006cfe:	2210      	movs	r2, #16
 8006d00:	e7b7      	b.n	8006c72 <_printf_i+0xd2>
 8006d02:	064d      	lsls	r5, r1, #25
 8006d04:	bf48      	it	mi
 8006d06:	b29b      	uxthmi	r3, r3
 8006d08:	e7ef      	b.n	8006cea <_printf_i+0x14a>
 8006d0a:	4665      	mov	r5, ip
 8006d0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d10:	fb02 3311 	mls	r3, r2, r1, r3
 8006d14:	5cc3      	ldrb	r3, [r0, r3]
 8006d16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	2900      	cmp	r1, #0
 8006d1e:	d1f5      	bne.n	8006d0c <_printf_i+0x16c>
 8006d20:	e7b9      	b.n	8006c96 <_printf_i+0xf6>
 8006d22:	6813      	ldr	r3, [r2, #0]
 8006d24:	6825      	ldr	r5, [r4, #0]
 8006d26:	6961      	ldr	r1, [r4, #20]
 8006d28:	1d18      	adds	r0, r3, #4
 8006d2a:	6010      	str	r0, [r2, #0]
 8006d2c:	0628      	lsls	r0, r5, #24
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	d501      	bpl.n	8006d36 <_printf_i+0x196>
 8006d32:	6019      	str	r1, [r3, #0]
 8006d34:	e002      	b.n	8006d3c <_printf_i+0x19c>
 8006d36:	066a      	lsls	r2, r5, #25
 8006d38:	d5fb      	bpl.n	8006d32 <_printf_i+0x192>
 8006d3a:	8019      	strh	r1, [r3, #0]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	6123      	str	r3, [r4, #16]
 8006d40:	4665      	mov	r5, ip
 8006d42:	e7b9      	b.n	8006cb8 <_printf_i+0x118>
 8006d44:	6813      	ldr	r3, [r2, #0]
 8006d46:	1d19      	adds	r1, r3, #4
 8006d48:	6011      	str	r1, [r2, #0]
 8006d4a:	681d      	ldr	r5, [r3, #0]
 8006d4c:	6862      	ldr	r2, [r4, #4]
 8006d4e:	2100      	movs	r1, #0
 8006d50:	4628      	mov	r0, r5
 8006d52:	f7f9 fa55 	bl	8000200 <memchr>
 8006d56:	b108      	cbz	r0, 8006d5c <_printf_i+0x1bc>
 8006d58:	1b40      	subs	r0, r0, r5
 8006d5a:	6060      	str	r0, [r4, #4]
 8006d5c:	6863      	ldr	r3, [r4, #4]
 8006d5e:	6123      	str	r3, [r4, #16]
 8006d60:	2300      	movs	r3, #0
 8006d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d66:	e7a7      	b.n	8006cb8 <_printf_i+0x118>
 8006d68:	6923      	ldr	r3, [r4, #16]
 8006d6a:	462a      	mov	r2, r5
 8006d6c:	4639      	mov	r1, r7
 8006d6e:	4630      	mov	r0, r6
 8006d70:	47c0      	blx	r8
 8006d72:	3001      	adds	r0, #1
 8006d74:	d0aa      	beq.n	8006ccc <_printf_i+0x12c>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	079b      	lsls	r3, r3, #30
 8006d7a:	d413      	bmi.n	8006da4 <_printf_i+0x204>
 8006d7c:	68e0      	ldr	r0, [r4, #12]
 8006d7e:	9b03      	ldr	r3, [sp, #12]
 8006d80:	4298      	cmp	r0, r3
 8006d82:	bfb8      	it	lt
 8006d84:	4618      	movlt	r0, r3
 8006d86:	e7a3      	b.n	8006cd0 <_printf_i+0x130>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	464a      	mov	r2, r9
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	4630      	mov	r0, r6
 8006d90:	47c0      	blx	r8
 8006d92:	3001      	adds	r0, #1
 8006d94:	d09a      	beq.n	8006ccc <_printf_i+0x12c>
 8006d96:	3501      	adds	r5, #1
 8006d98:	68e3      	ldr	r3, [r4, #12]
 8006d9a:	9a03      	ldr	r2, [sp, #12]
 8006d9c:	1a9b      	subs	r3, r3, r2
 8006d9e:	42ab      	cmp	r3, r5
 8006da0:	dcf2      	bgt.n	8006d88 <_printf_i+0x1e8>
 8006da2:	e7eb      	b.n	8006d7c <_printf_i+0x1dc>
 8006da4:	2500      	movs	r5, #0
 8006da6:	f104 0919 	add.w	r9, r4, #25
 8006daa:	e7f5      	b.n	8006d98 <_printf_i+0x1f8>
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1ac      	bne.n	8006d0a <_printf_i+0x16a>
 8006db0:	7803      	ldrb	r3, [r0, #0]
 8006db2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006db6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dba:	e76c      	b.n	8006c96 <_printf_i+0xf6>
 8006dbc:	080070a9 	.word	0x080070a9
 8006dc0:	080070ba 	.word	0x080070ba

08006dc4 <memcpy>:
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	1e43      	subs	r3, r0, #1
 8006dc8:	440a      	add	r2, r1
 8006dca:	4291      	cmp	r1, r2
 8006dcc:	d100      	bne.n	8006dd0 <memcpy+0xc>
 8006dce:	bd10      	pop	{r4, pc}
 8006dd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dd8:	e7f7      	b.n	8006dca <memcpy+0x6>

08006dda <memmove>:
 8006dda:	4288      	cmp	r0, r1
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	eb01 0302 	add.w	r3, r1, r2
 8006de2:	d807      	bhi.n	8006df4 <memmove+0x1a>
 8006de4:	1e42      	subs	r2, r0, #1
 8006de6:	4299      	cmp	r1, r3
 8006de8:	d00a      	beq.n	8006e00 <memmove+0x26>
 8006dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dee:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006df2:	e7f8      	b.n	8006de6 <memmove+0xc>
 8006df4:	4283      	cmp	r3, r0
 8006df6:	d9f5      	bls.n	8006de4 <memmove+0xa>
 8006df8:	1881      	adds	r1, r0, r2
 8006dfa:	1ad2      	subs	r2, r2, r3
 8006dfc:	42d3      	cmn	r3, r2
 8006dfe:	d100      	bne.n	8006e02 <memmove+0x28>
 8006e00:	bd10      	pop	{r4, pc}
 8006e02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e06:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006e0a:	e7f7      	b.n	8006dfc <memmove+0x22>

08006e0c <_free_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4605      	mov	r5, r0
 8006e10:	2900      	cmp	r1, #0
 8006e12:	d045      	beq.n	8006ea0 <_free_r+0x94>
 8006e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e18:	1f0c      	subs	r4, r1, #4
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	bfb8      	it	lt
 8006e1e:	18e4      	addlt	r4, r4, r3
 8006e20:	f000 f8d2 	bl	8006fc8 <__malloc_lock>
 8006e24:	4a1f      	ldr	r2, [pc, #124]	; (8006ea4 <_free_r+0x98>)
 8006e26:	6813      	ldr	r3, [r2, #0]
 8006e28:	4610      	mov	r0, r2
 8006e2a:	b933      	cbnz	r3, 8006e3a <_free_r+0x2e>
 8006e2c:	6063      	str	r3, [r4, #4]
 8006e2e:	6014      	str	r4, [r2, #0]
 8006e30:	4628      	mov	r0, r5
 8006e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e36:	f000 b8c8 	b.w	8006fca <__malloc_unlock>
 8006e3a:	42a3      	cmp	r3, r4
 8006e3c:	d90c      	bls.n	8006e58 <_free_r+0x4c>
 8006e3e:	6821      	ldr	r1, [r4, #0]
 8006e40:	1862      	adds	r2, r4, r1
 8006e42:	4293      	cmp	r3, r2
 8006e44:	bf04      	itt	eq
 8006e46:	681a      	ldreq	r2, [r3, #0]
 8006e48:	685b      	ldreq	r3, [r3, #4]
 8006e4a:	6063      	str	r3, [r4, #4]
 8006e4c:	bf04      	itt	eq
 8006e4e:	1852      	addeq	r2, r2, r1
 8006e50:	6022      	streq	r2, [r4, #0]
 8006e52:	6004      	str	r4, [r0, #0]
 8006e54:	e7ec      	b.n	8006e30 <_free_r+0x24>
 8006e56:	4613      	mov	r3, r2
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	b10a      	cbz	r2, 8006e60 <_free_r+0x54>
 8006e5c:	42a2      	cmp	r2, r4
 8006e5e:	d9fa      	bls.n	8006e56 <_free_r+0x4a>
 8006e60:	6819      	ldr	r1, [r3, #0]
 8006e62:	1858      	adds	r0, r3, r1
 8006e64:	42a0      	cmp	r0, r4
 8006e66:	d10b      	bne.n	8006e80 <_free_r+0x74>
 8006e68:	6820      	ldr	r0, [r4, #0]
 8006e6a:	4401      	add	r1, r0
 8006e6c:	1858      	adds	r0, r3, r1
 8006e6e:	4282      	cmp	r2, r0
 8006e70:	6019      	str	r1, [r3, #0]
 8006e72:	d1dd      	bne.n	8006e30 <_free_r+0x24>
 8006e74:	6810      	ldr	r0, [r2, #0]
 8006e76:	6852      	ldr	r2, [r2, #4]
 8006e78:	605a      	str	r2, [r3, #4]
 8006e7a:	4401      	add	r1, r0
 8006e7c:	6019      	str	r1, [r3, #0]
 8006e7e:	e7d7      	b.n	8006e30 <_free_r+0x24>
 8006e80:	d902      	bls.n	8006e88 <_free_r+0x7c>
 8006e82:	230c      	movs	r3, #12
 8006e84:	602b      	str	r3, [r5, #0]
 8006e86:	e7d3      	b.n	8006e30 <_free_r+0x24>
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	1821      	adds	r1, r4, r0
 8006e8c:	428a      	cmp	r2, r1
 8006e8e:	bf04      	itt	eq
 8006e90:	6811      	ldreq	r1, [r2, #0]
 8006e92:	6852      	ldreq	r2, [r2, #4]
 8006e94:	6062      	str	r2, [r4, #4]
 8006e96:	bf04      	itt	eq
 8006e98:	1809      	addeq	r1, r1, r0
 8006e9a:	6021      	streq	r1, [r4, #0]
 8006e9c:	605c      	str	r4, [r3, #4]
 8006e9e:	e7c7      	b.n	8006e30 <_free_r+0x24>
 8006ea0:	bd38      	pop	{r3, r4, r5, pc}
 8006ea2:	bf00      	nop
 8006ea4:	2000016c 	.word	0x2000016c

08006ea8 <_malloc_r>:
 8006ea8:	b570      	push	{r4, r5, r6, lr}
 8006eaa:	1ccd      	adds	r5, r1, #3
 8006eac:	f025 0503 	bic.w	r5, r5, #3
 8006eb0:	3508      	adds	r5, #8
 8006eb2:	2d0c      	cmp	r5, #12
 8006eb4:	bf38      	it	cc
 8006eb6:	250c      	movcc	r5, #12
 8006eb8:	2d00      	cmp	r5, #0
 8006eba:	4606      	mov	r6, r0
 8006ebc:	db01      	blt.n	8006ec2 <_malloc_r+0x1a>
 8006ebe:	42a9      	cmp	r1, r5
 8006ec0:	d903      	bls.n	8006eca <_malloc_r+0x22>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	6033      	str	r3, [r6, #0]
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	bd70      	pop	{r4, r5, r6, pc}
 8006eca:	f000 f87d 	bl	8006fc8 <__malloc_lock>
 8006ece:	4a21      	ldr	r2, [pc, #132]	; (8006f54 <_malloc_r+0xac>)
 8006ed0:	6814      	ldr	r4, [r2, #0]
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	b991      	cbnz	r1, 8006efc <_malloc_r+0x54>
 8006ed6:	4c20      	ldr	r4, [pc, #128]	; (8006f58 <_malloc_r+0xb0>)
 8006ed8:	6823      	ldr	r3, [r4, #0]
 8006eda:	b91b      	cbnz	r3, 8006ee4 <_malloc_r+0x3c>
 8006edc:	4630      	mov	r0, r6
 8006ede:	f000 f863 	bl	8006fa8 <_sbrk_r>
 8006ee2:	6020      	str	r0, [r4, #0]
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	f000 f85e 	bl	8006fa8 <_sbrk_r>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d124      	bne.n	8006f3a <_malloc_r+0x92>
 8006ef0:	230c      	movs	r3, #12
 8006ef2:	6033      	str	r3, [r6, #0]
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f000 f868 	bl	8006fca <__malloc_unlock>
 8006efa:	e7e4      	b.n	8006ec6 <_malloc_r+0x1e>
 8006efc:	680b      	ldr	r3, [r1, #0]
 8006efe:	1b5b      	subs	r3, r3, r5
 8006f00:	d418      	bmi.n	8006f34 <_malloc_r+0x8c>
 8006f02:	2b0b      	cmp	r3, #11
 8006f04:	d90f      	bls.n	8006f26 <_malloc_r+0x7e>
 8006f06:	600b      	str	r3, [r1, #0]
 8006f08:	50cd      	str	r5, [r1, r3]
 8006f0a:	18cc      	adds	r4, r1, r3
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f000 f85c 	bl	8006fca <__malloc_unlock>
 8006f12:	f104 000b 	add.w	r0, r4, #11
 8006f16:	1d23      	adds	r3, r4, #4
 8006f18:	f020 0007 	bic.w	r0, r0, #7
 8006f1c:	1ac3      	subs	r3, r0, r3
 8006f1e:	d0d3      	beq.n	8006ec8 <_malloc_r+0x20>
 8006f20:	425a      	negs	r2, r3
 8006f22:	50e2      	str	r2, [r4, r3]
 8006f24:	e7d0      	b.n	8006ec8 <_malloc_r+0x20>
 8006f26:	428c      	cmp	r4, r1
 8006f28:	684b      	ldr	r3, [r1, #4]
 8006f2a:	bf16      	itet	ne
 8006f2c:	6063      	strne	r3, [r4, #4]
 8006f2e:	6013      	streq	r3, [r2, #0]
 8006f30:	460c      	movne	r4, r1
 8006f32:	e7eb      	b.n	8006f0c <_malloc_r+0x64>
 8006f34:	460c      	mov	r4, r1
 8006f36:	6849      	ldr	r1, [r1, #4]
 8006f38:	e7cc      	b.n	8006ed4 <_malloc_r+0x2c>
 8006f3a:	1cc4      	adds	r4, r0, #3
 8006f3c:	f024 0403 	bic.w	r4, r4, #3
 8006f40:	42a0      	cmp	r0, r4
 8006f42:	d005      	beq.n	8006f50 <_malloc_r+0xa8>
 8006f44:	1a21      	subs	r1, r4, r0
 8006f46:	4630      	mov	r0, r6
 8006f48:	f000 f82e 	bl	8006fa8 <_sbrk_r>
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d0cf      	beq.n	8006ef0 <_malloc_r+0x48>
 8006f50:	6025      	str	r5, [r4, #0]
 8006f52:	e7db      	b.n	8006f0c <_malloc_r+0x64>
 8006f54:	2000016c 	.word	0x2000016c
 8006f58:	20000170 	.word	0x20000170

08006f5c <_realloc_r>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	4607      	mov	r7, r0
 8006f60:	4614      	mov	r4, r2
 8006f62:	460e      	mov	r6, r1
 8006f64:	b921      	cbnz	r1, 8006f70 <_realloc_r+0x14>
 8006f66:	4611      	mov	r1, r2
 8006f68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f6c:	f7ff bf9c 	b.w	8006ea8 <_malloc_r>
 8006f70:	b922      	cbnz	r2, 8006f7c <_realloc_r+0x20>
 8006f72:	f7ff ff4b 	bl	8006e0c <_free_r>
 8006f76:	4625      	mov	r5, r4
 8006f78:	4628      	mov	r0, r5
 8006f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7c:	f000 f826 	bl	8006fcc <_malloc_usable_size_r>
 8006f80:	42a0      	cmp	r0, r4
 8006f82:	d20f      	bcs.n	8006fa4 <_realloc_r+0x48>
 8006f84:	4621      	mov	r1, r4
 8006f86:	4638      	mov	r0, r7
 8006f88:	f7ff ff8e 	bl	8006ea8 <_malloc_r>
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d0f2      	beq.n	8006f78 <_realloc_r+0x1c>
 8006f92:	4631      	mov	r1, r6
 8006f94:	4622      	mov	r2, r4
 8006f96:	f7ff ff15 	bl	8006dc4 <memcpy>
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4638      	mov	r0, r7
 8006f9e:	f7ff ff35 	bl	8006e0c <_free_r>
 8006fa2:	e7e9      	b.n	8006f78 <_realloc_r+0x1c>
 8006fa4:	4635      	mov	r5, r6
 8006fa6:	e7e7      	b.n	8006f78 <_realloc_r+0x1c>

08006fa8 <_sbrk_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4c06      	ldr	r4, [pc, #24]	; (8006fc4 <_sbrk_r+0x1c>)
 8006fac:	2300      	movs	r3, #0
 8006fae:	4605      	mov	r5, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	f7fb f8e2 	bl	800217c <_sbrk>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_sbrk_r+0x1a>
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_sbrk_r+0x1a>
 8006fc0:	602b      	str	r3, [r5, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	200003c4 	.word	0x200003c4

08006fc8 <__malloc_lock>:
 8006fc8:	4770      	bx	lr

08006fca <__malloc_unlock>:
 8006fca:	4770      	bx	lr

08006fcc <_malloc_usable_size_r>:
 8006fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd0:	1f18      	subs	r0, r3, #4
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bfbc      	itt	lt
 8006fd6:	580b      	ldrlt	r3, [r1, r0]
 8006fd8:	18c0      	addlt	r0, r0, r3
 8006fda:	4770      	bx	lr

08006fdc <_init>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	bf00      	nop
 8006fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe2:	bc08      	pop	{r3}
 8006fe4:	469e      	mov	lr, r3
 8006fe6:	4770      	bx	lr

08006fe8 <_fini>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	bf00      	nop
 8006fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fee:	bc08      	pop	{r3}
 8006ff0:	469e      	mov	lr, r3
 8006ff2:	4770      	bx	lr
